
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003028  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00003028  000030bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a1  00800098  00800098  000030f4  2**0
                  ALLOC
  3 .stab         0000231c  00000000  00000000  000030f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001537  00000000  00000000  00005410  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006947  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006a87  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008840  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000972b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a4d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a638  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a8c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b093  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e2       	ldi	r30, 0x28	; 40
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e9       	ldi	r26, 0x98	; 152
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 33       	cpi	r26, 0x39	; 57
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 93 13 	call	0x2726	; 0x2726 <main>
      8a:	0c 94 12 18 	jmp	0x3024	; 0x3024 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3b 14 	jmp	0x2876	; 0x2876 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e7       	ldi	r26, 0x75	; 117
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 57 14 	jmp	0x28ae	; 0x28ae <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 47 14 	jmp	0x288e	; 0x288e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 63 14 	jmp	0x28c6	; 0x28c6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 47 14 	jmp	0x288e	; 0x288e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 63 14 	jmp	0x28c6	; 0x28c6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3b 14 	jmp	0x2876	; 0x2876 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e7       	ldi	r24, 0x75	; 117
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 57 14 	jmp	0x28ae	; 0x28ae <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 47 14 	jmp	0x288e	; 0x288e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 63 14 	jmp	0x28c6	; 0x28c6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 47 14 	jmp	0x288e	; 0x288e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 63 14 	jmp	0x28c6	; 0x28c6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 47 14 	jmp	0x288e	; 0x288e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 63 14 	jmp	0x28c6	; 0x28c6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_enuInit>:
#include"errorstate.h"
#include"DIO_priv.h"
#include"DIO_config.h"
#include "stdtypes.h"

ES_t DIO_enuInit(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62

	DDRA=CONC(PORTA_PIN7,PORTA_PIN6,PORTA_PIN5,PORTA_PIN4,PORTA_PIN3,PORTA_PIN2,PORTA_PIN1,PORTA_PIN0);
     b50:	ea e3       	ldi	r30, 0x3A	; 58
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	89 e0       	ldi	r24, 0x09	; 9
     b56:	80 83       	st	Z, r24
	DDRB=CONC(PORTB_PIN7,PORTB_PIN6,PORTB_PIN5,PORTB_PIN4,PORTB_PIN3,PORTB_PIN2,PORTB_PIN1,PORTB_PIN0);
     b58:	e7 e3       	ldi	r30, 0x37	; 55
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	10 82       	st	Z, r1
	DDRC=CONC(PORTC_PIN7,PORTC_PIN6,PORTC_PIN5,PORTC_PIN4,PORTC_PIN3,PORTC_PIN2,PORTC_PIN1,PORTC_PIN0);
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	10 82       	st	Z, r1
	DDRD=CONC(PORTD_PIN7,PORTD_PIN6,PORTD_PIN5,PORTD_PIN4,PORTD_PIN3,PORTD_PIN2,PORTD_PIN1,PORTD_PIN0);
     b64:	e1 e3       	ldi	r30, 0x31	; 49
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	10 82       	st	Z, r1

}
     b6a:	0f 90       	pop	r0
     b6c:	cf 91       	pop	r28
     b6e:	df 91       	pop	r29
     b70:	08 95       	ret

00000b72 <DIO_enuSetPortDIR>:
ES_t DIO_enuSetPortDIR(u8 copy_u8port, u8 copy_u8value){
     b72:	df 93       	push	r29
     b74:	cf 93       	push	r28
     b76:	00 d0       	rcall	.+0      	; 0xb78 <DIO_enuSetPortDIR+0x6>
     b78:	00 d0       	rcall	.+0      	; 0xb7a <DIO_enuSetPortDIR+0x8>
     b7a:	0f 92       	push	r0
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	89 83       	std	Y+1, r24	; 0x01
     b82:	6a 83       	std	Y+2, r22	; 0x02
switch(copy_u8port){
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	28 2f       	mov	r18, r24
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	3c 83       	std	Y+4, r19	; 0x04
     b8c:	2b 83       	std	Y+3, r18	; 0x03
     b8e:	8b 81       	ldd	r24, Y+3	; 0x03
     b90:	9c 81       	ldd	r25, Y+4	; 0x04
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	91 05       	cpc	r25, r1
     b96:	d1 f0       	breq	.+52     	; 0xbcc <DIO_enuSetPortDIR+0x5a>
     b98:	2b 81       	ldd	r18, Y+3	; 0x03
     b9a:	3c 81       	ldd	r19, Y+4	; 0x04
     b9c:	22 30       	cpi	r18, 0x02	; 2
     b9e:	31 05       	cpc	r19, r1
     ba0:	2c f4       	brge	.+10     	; 0xbac <DIO_enuSetPortDIR+0x3a>
     ba2:	8b 81       	ldd	r24, Y+3	; 0x03
     ba4:	9c 81       	ldd	r25, Y+4	; 0x04
     ba6:	00 97       	sbiw	r24, 0x00	; 0
     ba8:	61 f0       	breq	.+24     	; 0xbc2 <DIO_enuSetPortDIR+0x50>
     baa:	1e c0       	rjmp	.+60     	; 0xbe8 <DIO_enuSetPortDIR+0x76>
     bac:	2b 81       	ldd	r18, Y+3	; 0x03
     bae:	3c 81       	ldd	r19, Y+4	; 0x04
     bb0:	22 30       	cpi	r18, 0x02	; 2
     bb2:	31 05       	cpc	r19, r1
     bb4:	81 f0       	breq	.+32     	; 0xbd6 <DIO_enuSetPortDIR+0x64>
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	9c 81       	ldd	r25, Y+4	; 0x04
     bba:	83 30       	cpi	r24, 0x03	; 3
     bbc:	91 05       	cpc	r25, r1
     bbe:	81 f0       	breq	.+32     	; 0xbe0 <DIO_enuSetPortDIR+0x6e>
     bc0:	13 c0       	rjmp	.+38     	; 0xbe8 <DIO_enuSetPortDIR+0x76>
case DIO_u8PORTA:
	DDRA=copy_u8value;
     bc2:	ea e3       	ldi	r30, 0x3A	; 58
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	80 83       	st	Z, r24
     bca:	0e c0       	rjmp	.+28     	; 0xbe8 <DIO_enuSetPortDIR+0x76>
	break;

case DIO_u8PORTB:
	DDRB=copy_u8value;
     bcc:	e7 e3       	ldi	r30, 0x37	; 55
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	8a 81       	ldd	r24, Y+2	; 0x02
     bd2:	80 83       	st	Z, r24
     bd4:	09 c0       	rjmp	.+18     	; 0xbe8 <DIO_enuSetPortDIR+0x76>
	break;

case DIO_u8PORTC:
	DDRC=copy_u8value;
     bd6:	e4 e3       	ldi	r30, 0x34	; 52
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	80 83       	st	Z, r24
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <DIO_enuSetPortDIR+0x76>
	break;

case DIO_u8PORTD:
	DDRD=copy_u8value;
     be0:	e1 e3       	ldi	r30, 0x31	; 49
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	8a 81       	ldd	r24, Y+2	; 0x02
     be6:	80 83       	st	Z, r24
	break;
}
}
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	cf 91       	pop	r28
     bf4:	df 91       	pop	r29
     bf6:	08 95       	ret

00000bf8 <DIO_enuSetPortVAL>:
ES_t DIO_enuSetPortVAL(u8 copy_u8port, u8 copy_u8value){
     bf8:	df 93       	push	r29
     bfa:	cf 93       	push	r28
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <DIO_enuSetPortVAL+0x6>
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <DIO_enuSetPortVAL+0x8>
     c00:	0f 92       	push	r0
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	89 83       	std	Y+1, r24	; 0x01
     c08:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port){
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	3c 83       	std	Y+4, r19	; 0x04
     c12:	2b 83       	std	Y+3, r18	; 0x03
     c14:	8b 81       	ldd	r24, Y+3	; 0x03
     c16:	9c 81       	ldd	r25, Y+4	; 0x04
     c18:	81 30       	cpi	r24, 0x01	; 1
     c1a:	91 05       	cpc	r25, r1
     c1c:	d1 f0       	breq	.+52     	; 0xc52 <DIO_enuSetPortVAL+0x5a>
     c1e:	2b 81       	ldd	r18, Y+3	; 0x03
     c20:	3c 81       	ldd	r19, Y+4	; 0x04
     c22:	22 30       	cpi	r18, 0x02	; 2
     c24:	31 05       	cpc	r19, r1
     c26:	2c f4       	brge	.+10     	; 0xc32 <DIO_enuSetPortVAL+0x3a>
     c28:	8b 81       	ldd	r24, Y+3	; 0x03
     c2a:	9c 81       	ldd	r25, Y+4	; 0x04
     c2c:	00 97       	sbiw	r24, 0x00	; 0
     c2e:	61 f0       	breq	.+24     	; 0xc48 <DIO_enuSetPortVAL+0x50>
     c30:	1e c0       	rjmp	.+60     	; 0xc6e <DIO_enuSetPortVAL+0x76>
     c32:	2b 81       	ldd	r18, Y+3	; 0x03
     c34:	3c 81       	ldd	r19, Y+4	; 0x04
     c36:	22 30       	cpi	r18, 0x02	; 2
     c38:	31 05       	cpc	r19, r1
     c3a:	81 f0       	breq	.+32     	; 0xc5c <DIO_enuSetPortVAL+0x64>
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	9c 81       	ldd	r25, Y+4	; 0x04
     c40:	83 30       	cpi	r24, 0x03	; 3
     c42:	91 05       	cpc	r25, r1
     c44:	81 f0       	breq	.+32     	; 0xc66 <DIO_enuSetPortVAL+0x6e>
     c46:	13 c0       	rjmp	.+38     	; 0xc6e <DIO_enuSetPortVAL+0x76>
	case DIO_u8PORTA:
		PORTA=copy_u8value;
     c48:	eb e3       	ldi	r30, 0x3B	; 59
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	8a 81       	ldd	r24, Y+2	; 0x02
     c4e:	80 83       	st	Z, r24
     c50:	0e c0       	rjmp	.+28     	; 0xc6e <DIO_enuSetPortVAL+0x76>
		break;

	case DIO_u8PORTB:
		PORTB=copy_u8value;
     c52:	e8 e3       	ldi	r30, 0x38	; 56
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	80 83       	st	Z, r24
     c5a:	09 c0       	rjmp	.+18     	; 0xc6e <DIO_enuSetPortVAL+0x76>
		break;

	case DIO_u8PORTC:
		PORTC=copy_u8value;
     c5c:	e5 e3       	ldi	r30, 0x35	; 53
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	80 83       	st	Z, r24
     c64:	04 c0       	rjmp	.+8      	; 0xc6e <DIO_enuSetPortVAL+0x76>
		break;

	case DIO_u8PORTD:
		PORTD=copy_u8value;
     c66:	e2 e3       	ldi	r30, 0x32	; 50
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	8a 81       	ldd	r24, Y+2	; 0x02
     c6c:	80 83       	st	Z, r24
		break;
	}
}
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	cf 91       	pop	r28
     c7a:	df 91       	pop	r29
     c7c:	08 95       	ret

00000c7e <DIO_enuTogPort>:
ES_t DIO_enuTogPort(u8 copy_u8port){
     c7e:	df 93       	push	r29
     c80:	cf 93       	push	r28
     c82:	00 d0       	rcall	.+0      	; 0xc84 <DIO_enuTogPort+0x6>
     c84:	00 d0       	rcall	.+0      	; 0xc86 <DIO_enuTogPort+0x8>
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8port){
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	28 2f       	mov	r18, r24
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	3b 83       	std	Y+3, r19	; 0x03
     c94:	2a 83       	std	Y+2, r18	; 0x02
     c96:	8a 81       	ldd	r24, Y+2	; 0x02
     c98:	9b 81       	ldd	r25, Y+3	; 0x03
     c9a:	81 30       	cpi	r24, 0x01	; 1
     c9c:	91 05       	cpc	r25, r1
     c9e:	e9 f0       	breq	.+58     	; 0xcda <DIO_enuTogPort+0x5c>
     ca0:	2a 81       	ldd	r18, Y+2	; 0x02
     ca2:	3b 81       	ldd	r19, Y+3	; 0x03
     ca4:	22 30       	cpi	r18, 0x02	; 2
     ca6:	31 05       	cpc	r19, r1
     ca8:	2c f4       	brge	.+10     	; 0xcb4 <DIO_enuTogPort+0x36>
     caa:	8a 81       	ldd	r24, Y+2	; 0x02
     cac:	9b 81       	ldd	r25, Y+3	; 0x03
     cae:	00 97       	sbiw	r24, 0x00	; 0
     cb0:	61 f0       	breq	.+24     	; 0xcca <DIO_enuTogPort+0x4c>
     cb2:	2a c0       	rjmp	.+84     	; 0xd08 <DIO_enuTogPort+0x8a>
     cb4:	2a 81       	ldd	r18, Y+2	; 0x02
     cb6:	3b 81       	ldd	r19, Y+3	; 0x03
     cb8:	22 30       	cpi	r18, 0x02	; 2
     cba:	31 05       	cpc	r19, r1
     cbc:	b1 f0       	breq	.+44     	; 0xcea <DIO_enuTogPort+0x6c>
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	9b 81       	ldd	r25, Y+3	; 0x03
     cc2:	83 30       	cpi	r24, 0x03	; 3
     cc4:	91 05       	cpc	r25, r1
     cc6:	c9 f0       	breq	.+50     	; 0xcfa <DIO_enuTogPort+0x7c>
     cc8:	1f c0       	rjmp	.+62     	; 0xd08 <DIO_enuTogPort+0x8a>
		case DIO_u8PORTA:
			PORTA=~PORTA;
     cca:	ab e3       	ldi	r26, 0x3B	; 59
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	eb e3       	ldi	r30, 0x3B	; 59
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	80 95       	com	r24
     cd6:	8c 93       	st	X, r24
     cd8:	17 c0       	rjmp	.+46     	; 0xd08 <DIO_enuTogPort+0x8a>
			break;

		case DIO_u8PORTB:
			PORTB=~PORTB;
     cda:	a8 e3       	ldi	r26, 0x38	; 56
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e8 e3       	ldi	r30, 0x38	; 56
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	80 95       	com	r24
     ce6:	8c 93       	st	X, r24
     ce8:	0f c0       	rjmp	.+30     	; 0xd08 <DIO_enuTogPort+0x8a>
			break;

		case DIO_u8PORTC:
			PORTC=~PORTC;
     cea:	a5 e3       	ldi	r26, 0x35	; 53
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e5 e3       	ldi	r30, 0x35	; 53
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	80 95       	com	r24
     cf6:	8c 93       	st	X, r24
     cf8:	07 c0       	rjmp	.+14     	; 0xd08 <DIO_enuTogPort+0x8a>
			break;

		case DIO_u8PORTD:
			PORTD=~PORTD;
     cfa:	a2 e3       	ldi	r26, 0x32	; 50
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e2 e3       	ldi	r30, 0x32	; 50
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	80 95       	com	r24
     d06:	8c 93       	st	X, r24
			break;
		}

}
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <DIO_enuSetPinDIR>:
ES_t DIO_enuSetPinDIR(u8 copy_u8port, u8 copy_u8pin, u8 copy_u8value){
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	00 d0       	rcall	.+0      	; 0xd1c <DIO_enuSetPinDIR+0x6>
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <DIO_enuSetPinDIR+0x8>
     d1e:	0f 92       	push	r0
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	89 83       	std	Y+1, r24	; 0x01
     d26:	6a 83       	std	Y+2, r22	; 0x02
     d28:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8pin>=PIN0&&copy_u8pin<=PIN7&&copy_u8value>=INPUT&&copy_u8value<=OUTPUT){
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	88 30       	cpi	r24, 0x08	; 8
     d2e:	08 f0       	brcs	.+2      	; 0xd32 <DIO_enuSetPinDIR+0x1c>
     d30:	ca c0       	rjmp	.+404    	; 0xec6 <DIO_enuSetPinDIR+0x1b0>
     d32:	8b 81       	ldd	r24, Y+3	; 0x03
     d34:	82 30       	cpi	r24, 0x02	; 2
     d36:	08 f0       	brcs	.+2      	; 0xd3a <DIO_enuSetPinDIR+0x24>
     d38:	c6 c0       	rjmp	.+396    	; 0xec6 <DIO_enuSetPinDIR+0x1b0>
	switch(copy_u8port){
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	3d 83       	std	Y+5, r19	; 0x05
     d42:	2c 83       	std	Y+4, r18	; 0x04
     d44:	6c 81       	ldd	r22, Y+4	; 0x04
     d46:	7d 81       	ldd	r23, Y+5	; 0x05
     d48:	61 30       	cpi	r22, 0x01	; 1
     d4a:	71 05       	cpc	r23, r1
     d4c:	09 f4       	brne	.+2      	; 0xd50 <DIO_enuSetPinDIR+0x3a>
     d4e:	41 c0       	rjmp	.+130    	; 0xdd2 <DIO_enuSetPinDIR+0xbc>
     d50:	8c 81       	ldd	r24, Y+4	; 0x04
     d52:	9d 81       	ldd	r25, Y+5	; 0x05
     d54:	82 30       	cpi	r24, 0x02	; 2
     d56:	91 05       	cpc	r25, r1
     d58:	34 f4       	brge	.+12     	; 0xd66 <DIO_enuSetPinDIR+0x50>
     d5a:	2c 81       	ldd	r18, Y+4	; 0x04
     d5c:	3d 81       	ldd	r19, Y+5	; 0x05
     d5e:	21 15       	cp	r18, r1
     d60:	31 05       	cpc	r19, r1
     d62:	71 f0       	breq	.+28     	; 0xd80 <DIO_enuSetPinDIR+0x6a>
     d64:	b0 c0       	rjmp	.+352    	; 0xec6 <DIO_enuSetPinDIR+0x1b0>
     d66:	6c 81       	ldd	r22, Y+4	; 0x04
     d68:	7d 81       	ldd	r23, Y+5	; 0x05
     d6a:	62 30       	cpi	r22, 0x02	; 2
     d6c:	71 05       	cpc	r23, r1
     d6e:	09 f4       	brne	.+2      	; 0xd72 <DIO_enuSetPinDIR+0x5c>
     d70:	59 c0       	rjmp	.+178    	; 0xe24 <DIO_enuSetPinDIR+0x10e>
     d72:	8c 81       	ldd	r24, Y+4	; 0x04
     d74:	9d 81       	ldd	r25, Y+5	; 0x05
     d76:	83 30       	cpi	r24, 0x03	; 3
     d78:	91 05       	cpc	r25, r1
     d7a:	09 f4       	brne	.+2      	; 0xd7e <DIO_enuSetPinDIR+0x68>
     d7c:	7c c0       	rjmp	.+248    	; 0xe76 <DIO_enuSetPinDIR+0x160>
     d7e:	a3 c0       	rjmp	.+326    	; 0xec6 <DIO_enuSetPinDIR+0x1b0>
		case DIO_u8PORTA:
			DDRA&=~(masking_bit<<copy_u8pin);
     d80:	aa e3       	ldi	r26, 0x3A	; 58
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	ea e3       	ldi	r30, 0x3A	; 58
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	48 2f       	mov	r20, r24
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <DIO_enuSetPinDIR+0x86>
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	2a 95       	dec	r18
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <DIO_enuSetPinDIR+0x82>
     da0:	80 95       	com	r24
     da2:	84 23       	and	r24, r20
     da4:	8c 93       	st	X, r24
			DDRA|=(copy_u8value<<copy_u8pin);
     da6:	aa e3       	ldi	r26, 0x3A	; 58
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	ea e3       	ldi	r30, 0x3A	; 58
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	48 2f       	mov	r20, r24
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	88 2f       	mov	r24, r24
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	b9 01       	movw	r22, r18
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <DIO_enuSetPinDIR+0xb0>
     dc2:	66 0f       	add	r22, r22
     dc4:	77 1f       	adc	r23, r23
     dc6:	8a 95       	dec	r24
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <DIO_enuSetPinDIR+0xac>
     dca:	cb 01       	movw	r24, r22
     dcc:	84 2b       	or	r24, r20
     dce:	8c 93       	st	X, r24
     dd0:	7a c0       	rjmp	.+244    	; 0xec6 <DIO_enuSetPinDIR+0x1b0>
			break;

		case DIO_u8PORTB:
			DDRB&=~(masking_bit<<copy_u8pin);
     dd2:	a7 e3       	ldi	r26, 0x37	; 55
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e7 e3       	ldi	r30, 0x37	; 55
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	48 2f       	mov	r20, r24
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 c0       	rjmp	.+4      	; 0xdee <DIO_enuSetPinDIR+0xd8>
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	2a 95       	dec	r18
     df0:	e2 f7       	brpl	.-8      	; 0xdea <DIO_enuSetPinDIR+0xd4>
     df2:	80 95       	com	r24
     df4:	84 23       	and	r24, r20
     df6:	8c 93       	st	X, r24
			DDRB|=(copy_u8value<<copy_u8pin);
     df8:	a7 e3       	ldi	r26, 0x37	; 55
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e7 e3       	ldi	r30, 0x37	; 55
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	48 2f       	mov	r20, r24
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	88 2f       	mov	r24, r24
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	b9 01       	movw	r22, r18
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <DIO_enuSetPinDIR+0x102>
     e14:	66 0f       	add	r22, r22
     e16:	77 1f       	adc	r23, r23
     e18:	8a 95       	dec	r24
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <DIO_enuSetPinDIR+0xfe>
     e1c:	cb 01       	movw	r24, r22
     e1e:	84 2b       	or	r24, r20
     e20:	8c 93       	st	X, r24
     e22:	51 c0       	rjmp	.+162    	; 0xec6 <DIO_enuSetPinDIR+0x1b0>
			break;

		case DIO_u8PORTC:
			DDRC&=~(masking_bit<<copy_u8pin);
     e24:	a4 e3       	ldi	r26, 0x34	; 52
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e4 e3       	ldi	r30, 0x34	; 52
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	48 2f       	mov	r20, r24
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <DIO_enuSetPinDIR+0x12a>
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	2a 95       	dec	r18
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <DIO_enuSetPinDIR+0x126>
     e44:	80 95       	com	r24
     e46:	84 23       	and	r24, r20
     e48:	8c 93       	st	X, r24
			DDRC|=(copy_u8value<<copy_u8pin);
     e4a:	a4 e3       	ldi	r26, 0x34	; 52
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e4 e3       	ldi	r30, 0x34	; 52
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	88 2f       	mov	r24, r24
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	b9 01       	movw	r22, r18
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <DIO_enuSetPinDIR+0x154>
     e66:	66 0f       	add	r22, r22
     e68:	77 1f       	adc	r23, r23
     e6a:	8a 95       	dec	r24
     e6c:	e2 f7       	brpl	.-8      	; 0xe66 <DIO_enuSetPinDIR+0x150>
     e6e:	cb 01       	movw	r24, r22
     e70:	84 2b       	or	r24, r20
     e72:	8c 93       	st	X, r24
     e74:	28 c0       	rjmp	.+80     	; 0xec6 <DIO_enuSetPinDIR+0x1b0>
			break;

		case DIO_u8PORTD:
			DDRD&=~(masking_bit<<copy_u8pin);
     e76:	a1 e3       	ldi	r26, 0x31	; 49
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e1 e3       	ldi	r30, 0x31	; 49
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <DIO_enuSetPinDIR+0x17c>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	2a 95       	dec	r18
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <DIO_enuSetPinDIR+0x178>
     e96:	80 95       	com	r24
     e98:	84 23       	and	r24, r20
     e9a:	8c 93       	st	X, r24
			DDRD|=(copy_u8value<<copy_u8pin);
     e9c:	a1 e3       	ldi	r26, 0x31	; 49
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e1 e3       	ldi	r30, 0x31	; 49
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	48 2f       	mov	r20, r24
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
     eb0:	88 2f       	mov	r24, r24
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	b9 01       	movw	r22, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <DIO_enuSetPinDIR+0x1a6>
     eb8:	66 0f       	add	r22, r22
     eba:	77 1f       	adc	r23, r23
     ebc:	8a 95       	dec	r24
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <DIO_enuSetPinDIR+0x1a2>
     ec0:	cb 01       	movw	r24, r22
     ec2:	84 2b       	or	r24, r20
     ec4:	8c 93       	st	X, r24
			break;
		}
	}
	return ES_OK;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
}
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	08 95       	ret

00000ed8 <DIO_enuSetPinVAL>:

ES_t DIO_enuSetPinVAL(u8 copy_u8port, u8 copy_u8pin, u8 copy_u8value){
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	00 d0       	rcall	.+0      	; 0xede <DIO_enuSetPinVAL+0x6>
     ede:	00 d0       	rcall	.+0      	; 0xee0 <DIO_enuSetPinVAL+0x8>
     ee0:	0f 92       	push	r0
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	89 83       	std	Y+1, r24	; 0x01
     ee8:	6a 83       	std	Y+2, r22	; 0x02
     eea:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8pin>=PIN0&&copy_u8pin<=PIN7&&copy_u8value>=LOW&&copy_u8value<=HIGH){
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	88 30       	cpi	r24, 0x08	; 8
     ef0:	08 f0       	brcs	.+2      	; 0xef4 <DIO_enuSetPinVAL+0x1c>
     ef2:	ca c0       	rjmp	.+404    	; 0x1088 <DIO_enuSetPinVAL+0x1b0>
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	82 30       	cpi	r24, 0x02	; 2
     ef8:	08 f0       	brcs	.+2      	; 0xefc <DIO_enuSetPinVAL+0x24>
     efa:	c6 c0       	rjmp	.+396    	; 0x1088 <DIO_enuSetPinVAL+0x1b0>
	switch(copy_u8port){
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	3d 83       	std	Y+5, r19	; 0x05
     f04:	2c 83       	std	Y+4, r18	; 0x04
     f06:	6c 81       	ldd	r22, Y+4	; 0x04
     f08:	7d 81       	ldd	r23, Y+5	; 0x05
     f0a:	61 30       	cpi	r22, 0x01	; 1
     f0c:	71 05       	cpc	r23, r1
     f0e:	09 f4       	brne	.+2      	; 0xf12 <DIO_enuSetPinVAL+0x3a>
     f10:	41 c0       	rjmp	.+130    	; 0xf94 <DIO_enuSetPinVAL+0xbc>
     f12:	8c 81       	ldd	r24, Y+4	; 0x04
     f14:	9d 81       	ldd	r25, Y+5	; 0x05
     f16:	82 30       	cpi	r24, 0x02	; 2
     f18:	91 05       	cpc	r25, r1
     f1a:	34 f4       	brge	.+12     	; 0xf28 <DIO_enuSetPinVAL+0x50>
     f1c:	2c 81       	ldd	r18, Y+4	; 0x04
     f1e:	3d 81       	ldd	r19, Y+5	; 0x05
     f20:	21 15       	cp	r18, r1
     f22:	31 05       	cpc	r19, r1
     f24:	71 f0       	breq	.+28     	; 0xf42 <DIO_enuSetPinVAL+0x6a>
     f26:	b0 c0       	rjmp	.+352    	; 0x1088 <DIO_enuSetPinVAL+0x1b0>
     f28:	6c 81       	ldd	r22, Y+4	; 0x04
     f2a:	7d 81       	ldd	r23, Y+5	; 0x05
     f2c:	62 30       	cpi	r22, 0x02	; 2
     f2e:	71 05       	cpc	r23, r1
     f30:	09 f4       	brne	.+2      	; 0xf34 <DIO_enuSetPinVAL+0x5c>
     f32:	59 c0       	rjmp	.+178    	; 0xfe6 <DIO_enuSetPinVAL+0x10e>
     f34:	8c 81       	ldd	r24, Y+4	; 0x04
     f36:	9d 81       	ldd	r25, Y+5	; 0x05
     f38:	83 30       	cpi	r24, 0x03	; 3
     f3a:	91 05       	cpc	r25, r1
     f3c:	09 f4       	brne	.+2      	; 0xf40 <DIO_enuSetPinVAL+0x68>
     f3e:	7c c0       	rjmp	.+248    	; 0x1038 <DIO_enuSetPinVAL+0x160>
     f40:	a3 c0       	rjmp	.+326    	; 0x1088 <DIO_enuSetPinVAL+0x1b0>
		case DIO_u8PORTA:
			PORTA&=~(masking_bit<<copy_u8pin);
     f42:	ab e3       	ldi	r26, 0x3B	; 59
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	eb e3       	ldi	r30, 0x3B	; 59
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_enuSetPinVAL+0x86>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	2a 95       	dec	r18
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_enuSetPinVAL+0x82>
     f62:	80 95       	com	r24
     f64:	84 23       	and	r24, r20
     f66:	8c 93       	st	X, r24
			PORTA|=(copy_u8value<<copy_u8pin);
     f68:	ab e3       	ldi	r26, 0x3B	; 59
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	eb e3       	ldi	r30, 0x3B	; 59
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	48 2f       	mov	r20, r24
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	88 2f       	mov	r24, r24
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	b9 01       	movw	r22, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <DIO_enuSetPinVAL+0xb0>
     f84:	66 0f       	add	r22, r22
     f86:	77 1f       	adc	r23, r23
     f88:	8a 95       	dec	r24
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <DIO_enuSetPinVAL+0xac>
     f8c:	cb 01       	movw	r24, r22
     f8e:	84 2b       	or	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	7a c0       	rjmp	.+244    	; 0x1088 <DIO_enuSetPinVAL+0x1b0>
			break;

		case DIO_u8PORTB:
			PORTB&=~(masking_bit<<copy_u8pin);
     f94:	a8 e3       	ldi	r26, 0x38	; 56
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e8 e3       	ldi	r30, 0x38	; 56
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <DIO_enuSetPinVAL+0xd8>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	2a 95       	dec	r18
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <DIO_enuSetPinVAL+0xd4>
     fb4:	80 95       	com	r24
     fb6:	84 23       	and	r24, r20
     fb8:	8c 93       	st	X, r24
			PORTB|=(copy_u8value<<copy_u8pin);
     fba:	a8 e3       	ldi	r26, 0x38	; 56
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e8 e3       	ldi	r30, 0x38	; 56
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	48 2f       	mov	r20, r24
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	88 2f       	mov	r24, r24
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	b9 01       	movw	r22, r18
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <DIO_enuSetPinVAL+0x102>
     fd6:	66 0f       	add	r22, r22
     fd8:	77 1f       	adc	r23, r23
     fda:	8a 95       	dec	r24
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <DIO_enuSetPinVAL+0xfe>
     fde:	cb 01       	movw	r24, r22
     fe0:	84 2b       	or	r24, r20
     fe2:	8c 93       	st	X, r24
     fe4:	51 c0       	rjmp	.+162    	; 0x1088 <DIO_enuSetPinVAL+0x1b0>
			break;

		case DIO_u8PORTC:
			PORTC&=~(masking_bit<<copy_u8pin);
     fe6:	a5 e3       	ldi	r26, 0x35	; 53
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e5 e3       	ldi	r30, 0x35	; 53
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	48 2f       	mov	r20, r24
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <DIO_enuSetPinVAL+0x12a>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	2a 95       	dec	r18
    1004:	e2 f7       	brpl	.-8      	; 0xffe <DIO_enuSetPinVAL+0x126>
    1006:	80 95       	com	r24
    1008:	84 23       	and	r24, r20
    100a:	8c 93       	st	X, r24
			PORTC|=(copy_u8value<<copy_u8pin);
    100c:	a5 e3       	ldi	r26, 0x35	; 53
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e5 e3       	ldi	r30, 0x35	; 53
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	48 2f       	mov	r20, r24
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	88 2f       	mov	r24, r24
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	b9 01       	movw	r22, r18
    1026:	02 c0       	rjmp	.+4      	; 0x102c <DIO_enuSetPinVAL+0x154>
    1028:	66 0f       	add	r22, r22
    102a:	77 1f       	adc	r23, r23
    102c:	8a 95       	dec	r24
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <DIO_enuSetPinVAL+0x150>
    1030:	cb 01       	movw	r24, r22
    1032:	84 2b       	or	r24, r20
    1034:	8c 93       	st	X, r24
    1036:	28 c0       	rjmp	.+80     	; 0x1088 <DIO_enuSetPinVAL+0x1b0>
			break;

		case DIO_u8PORTD:
			PORTD&=~(masking_bit<<copy_u8pin);
    1038:	a2 e3       	ldi	r26, 0x32	; 50
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e2 e3       	ldi	r30, 0x32	; 50
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <DIO_enuSetPinVAL+0x17c>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	2a 95       	dec	r18
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <DIO_enuSetPinVAL+0x178>
    1058:	80 95       	com	r24
    105a:	84 23       	and	r24, r20
    105c:	8c 93       	st	X, r24
			PORTD|=(copy_u8value<<copy_u8pin);
    105e:	a2 e3       	ldi	r26, 0x32	; 50
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e2 e3       	ldi	r30, 0x32	; 50
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	48 2f       	mov	r20, r24
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	88 2f       	mov	r24, r24
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	b9 01       	movw	r22, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <DIO_enuSetPinVAL+0x1a6>
    107a:	66 0f       	add	r22, r22
    107c:	77 1f       	adc	r23, r23
    107e:	8a 95       	dec	r24
    1080:	e2 f7       	brpl	.-8      	; 0x107a <DIO_enuSetPinVAL+0x1a2>
    1082:	cb 01       	movw	r24, r22
    1084:	84 2b       	or	r24, r20
    1086:	8c 93       	st	X, r24
			break;
		}
	}
	return ES_OK;
    1088:	81 e0       	ldi	r24, 0x01	; 1
}
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	cf 91       	pop	r28
    1096:	df 91       	pop	r29
    1098:	08 95       	ret

0000109a <DIO_enuTogPin>:
ES_t DIO_enuTogPin(u8 copy_u8port,u8 copy_u8pin){
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <DIO_enuTogPin+0x6>
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <DIO_enuTogPin+0x8>
    10a2:	0f 92       	push	r0
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	89 83       	std	Y+1, r24	; 0x01
    10aa:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port){
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	3c 83       	std	Y+4, r19	; 0x04
    10b4:	2b 83       	std	Y+3, r18	; 0x03
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ba:	81 30       	cpi	r24, 0x01	; 1
    10bc:	91 05       	cpc	r25, r1
    10be:	49 f1       	breq	.+82     	; 0x1112 <DIO_enuTogPin+0x78>
    10c0:	2b 81       	ldd	r18, Y+3	; 0x03
    10c2:	3c 81       	ldd	r19, Y+4	; 0x04
    10c4:	22 30       	cpi	r18, 0x02	; 2
    10c6:	31 05       	cpc	r19, r1
    10c8:	2c f4       	brge	.+10     	; 0x10d4 <DIO_enuTogPin+0x3a>
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	9c 81       	ldd	r25, Y+4	; 0x04
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	61 f0       	breq	.+24     	; 0x10ea <DIO_enuTogPin+0x50>
    10d2:	4b c0       	rjmp	.+150    	; 0x116a <DIO_enuTogPin+0xd0>
    10d4:	2b 81       	ldd	r18, Y+3	; 0x03
    10d6:	3c 81       	ldd	r19, Y+4	; 0x04
    10d8:	22 30       	cpi	r18, 0x02	; 2
    10da:	31 05       	cpc	r19, r1
    10dc:	49 f1       	breq	.+82     	; 0x1130 <DIO_enuTogPin+0x96>
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	9c 81       	ldd	r25, Y+4	; 0x04
    10e2:	83 30       	cpi	r24, 0x03	; 3
    10e4:	91 05       	cpc	r25, r1
    10e6:	99 f1       	breq	.+102    	; 0x114e <DIO_enuTogPin+0xb4>
    10e8:	40 c0       	rjmp	.+128    	; 0x116a <DIO_enuTogPin+0xd0>
			case DIO_u8PORTA:
				PORTA^=(masking_bit<<copy_u8pin);
    10ea:	ab e3       	ldi	r26, 0x3B	; 59
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	eb e3       	ldi	r30, 0x3B	; 59
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	48 2f       	mov	r20, r24
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	02 2e       	mov	r0, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <DIO_enuTogPin+0x6e>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	0a 94       	dec	r0
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <DIO_enuTogPin+0x6a>
    110c:	84 27       	eor	r24, r20
    110e:	8c 93       	st	X, r24
    1110:	2c c0       	rjmp	.+88     	; 0x116a <DIO_enuTogPin+0xd0>
				break;

			case DIO_u8PORTB:
				PORTB=(masking_bit<<copy_u8pin);
    1112:	e8 e3       	ldi	r30, 0x38	; 56
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	02 2e       	mov	r0, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <DIO_enuTogPin+0x8e>
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	0a 94       	dec	r0
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <DIO_enuTogPin+0x8a>
    112c:	80 83       	st	Z, r24
    112e:	1d c0       	rjmp	.+58     	; 0x116a <DIO_enuTogPin+0xd0>
				break;

			case DIO_u8PORTC:
				PORTC=(masking_bit<<copy_u8pin);
    1130:	e5 e3       	ldi	r30, 0x35	; 53
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 2e       	mov	r0, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <DIO_enuTogPin+0xac>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <DIO_enuTogPin+0xa8>
    114a:	80 83       	st	Z, r24
    114c:	0e c0       	rjmp	.+28     	; 0x116a <DIO_enuTogPin+0xd0>
				break;

			case DIO_u8PORTD:
				PORTD=(masking_bit<<copy_u8pin);
    114e:	e2 e3       	ldi	r30, 0x32	; 50
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	02 2e       	mov	r0, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <DIO_enuTogPin+0xca>
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	0a 94       	dec	r0
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <DIO_enuTogPin+0xc6>
    1168:	80 83       	st	Z, r24
				break;
			}
}
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <DIO_enuGetPortval>:

ES_t DIO_enuGetPortval(u8 copy_u8port, u8 *copy_u8value){
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	00 d0       	rcall	.+0      	; 0x1180 <DIO_enuGetPortval+0x6>
    1180:	00 d0       	rcall	.+0      	; 0x1182 <DIO_enuGetPortval+0x8>
    1182:	00 d0       	rcall	.+0      	; 0x1184 <DIO_enuGetPortval+0xa>
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	89 83       	std	Y+1, r24	; 0x01
    118a:	7b 83       	std	Y+3, r23	; 0x03
    118c:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port){
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	3d 83       	std	Y+5, r19	; 0x05
    1196:	2c 83       	std	Y+4, r18	; 0x04
    1198:	8c 81       	ldd	r24, Y+4	; 0x04
    119a:	9d 81       	ldd	r25, Y+5	; 0x05
    119c:	81 30       	cpi	r24, 0x01	; 1
    119e:	91 05       	cpc	r25, r1
    11a0:	e1 f0       	breq	.+56     	; 0x11da <DIO_enuGetPortval+0x60>
    11a2:	2c 81       	ldd	r18, Y+4	; 0x04
    11a4:	3d 81       	ldd	r19, Y+5	; 0x05
    11a6:	22 30       	cpi	r18, 0x02	; 2
    11a8:	31 05       	cpc	r19, r1
    11aa:	2c f4       	brge	.+10     	; 0x11b6 <DIO_enuGetPortval+0x3c>
    11ac:	8c 81       	ldd	r24, Y+4	; 0x04
    11ae:	9d 81       	ldd	r25, Y+5	; 0x05
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	61 f0       	breq	.+24     	; 0x11cc <DIO_enuGetPortval+0x52>
    11b4:	26 c0       	rjmp	.+76     	; 0x1202 <DIO_enuGetPortval+0x88>
    11b6:	2c 81       	ldd	r18, Y+4	; 0x04
    11b8:	3d 81       	ldd	r19, Y+5	; 0x05
    11ba:	22 30       	cpi	r18, 0x02	; 2
    11bc:	31 05       	cpc	r19, r1
    11be:	a1 f0       	breq	.+40     	; 0x11e8 <DIO_enuGetPortval+0x6e>
    11c0:	8c 81       	ldd	r24, Y+4	; 0x04
    11c2:	9d 81       	ldd	r25, Y+5	; 0x05
    11c4:	83 30       	cpi	r24, 0x03	; 3
    11c6:	91 05       	cpc	r25, r1
    11c8:	b1 f0       	breq	.+44     	; 0x11f6 <DIO_enuGetPortval+0x7c>
    11ca:	1b c0       	rjmp	.+54     	; 0x1202 <DIO_enuGetPortval+0x88>
			case DIO_u8PORTA:
				*copy_u8value=PINA;
    11cc:	e9 e3       	ldi	r30, 0x39	; 57
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	ea 81       	ldd	r30, Y+2	; 0x02
    11d4:	fb 81       	ldd	r31, Y+3	; 0x03
    11d6:	80 83       	st	Z, r24
    11d8:	14 c0       	rjmp	.+40     	; 0x1202 <DIO_enuGetPortval+0x88>
				break;

			case DIO_u8PORTB:
				*copy_u8value=PINB;
    11da:	e6 e3       	ldi	r30, 0x36	; 54
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	ea 81       	ldd	r30, Y+2	; 0x02
    11e2:	fb 81       	ldd	r31, Y+3	; 0x03
    11e4:	80 83       	st	Z, r24
    11e6:	0d c0       	rjmp	.+26     	; 0x1202 <DIO_enuGetPortval+0x88>
				break;

			case DIO_u8PORTC:
				*copy_u8value=PINC;
    11e8:	e3 e3       	ldi	r30, 0x33	; 51
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	ea 81       	ldd	r30, Y+2	; 0x02
    11f0:	fb 81       	ldd	r31, Y+3	; 0x03
    11f2:	80 83       	st	Z, r24
    11f4:	06 c0       	rjmp	.+12     	; 0x1202 <DIO_enuGetPortval+0x88>
				break;

			case DIO_u8PORTD:
				*copy_u8value=PIND;
    11f6:	e0 e3       	ldi	r30, 0x30	; 48
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	ea 81       	ldd	r30, Y+2	; 0x02
    11fe:	fb 81       	ldd	r31, Y+3	; 0x03
    1200:	80 83       	st	Z, r24
				break;
			}

}
    1202:	26 96       	adiw	r28, 0x06	; 6
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <DIO_enuGetPinval>:
ES_t DIO_enuGetPinval(u8 copy_u8port,u8 copy_u8pin, u8 *copy_u8value){
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	27 97       	sbiw	r28, 0x07	; 7
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	89 83       	std	Y+1, r24	; 0x01
    122a:	6a 83       	std	Y+2, r22	; 0x02
    122c:	5c 83       	std	Y+4, r21	; 0x04
    122e:	4b 83       	std	Y+3, r20	; 0x03
	switch(copy_u8port){
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	3e 83       	std	Y+6, r19	; 0x06
    1238:	2d 83       	std	Y+5, r18	; 0x05
    123a:	4d 81       	ldd	r20, Y+5	; 0x05
    123c:	5e 81       	ldd	r21, Y+6	; 0x06
    123e:	41 30       	cpi	r20, 0x01	; 1
    1240:	51 05       	cpc	r21, r1
    1242:	59 f1       	breq	.+86     	; 0x129a <DIO_enuGetPinval+0x86>
    1244:	8d 81       	ldd	r24, Y+5	; 0x05
    1246:	9e 81       	ldd	r25, Y+6	; 0x06
    1248:	82 30       	cpi	r24, 0x02	; 2
    124a:	91 05       	cpc	r25, r1
    124c:	34 f4       	brge	.+12     	; 0x125a <DIO_enuGetPinval+0x46>
    124e:	2d 81       	ldd	r18, Y+5	; 0x05
    1250:	3e 81       	ldd	r19, Y+6	; 0x06
    1252:	21 15       	cp	r18, r1
    1254:	31 05       	cpc	r19, r1
    1256:	69 f0       	breq	.+26     	; 0x1272 <DIO_enuGetPinval+0x5e>
    1258:	5b c0       	rjmp	.+182    	; 0x1310 <DIO_enuGetPinval+0xfc>
    125a:	4d 81       	ldd	r20, Y+5	; 0x05
    125c:	5e 81       	ldd	r21, Y+6	; 0x06
    125e:	42 30       	cpi	r20, 0x02	; 2
    1260:	51 05       	cpc	r21, r1
    1262:	79 f1       	breq	.+94     	; 0x12c2 <DIO_enuGetPinval+0xae>
    1264:	8d 81       	ldd	r24, Y+5	; 0x05
    1266:	9e 81       	ldd	r25, Y+6	; 0x06
    1268:	83 30       	cpi	r24, 0x03	; 3
    126a:	91 05       	cpc	r25, r1
    126c:	09 f4       	brne	.+2      	; 0x1270 <DIO_enuGetPinval+0x5c>
    126e:	3d c0       	rjmp	.+122    	; 0x12ea <DIO_enuGetPinval+0xd6>
    1270:	4f c0       	rjmp	.+158    	; 0x1310 <DIO_enuGetPinval+0xfc>
			case DIO_u8PORTA:
				*copy_u8value=((PINA>>copy_u8pin) &masking_bit);
    1272:	e9 e3       	ldi	r30, 0x39	; 57
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	88 2f       	mov	r24, r24
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	a9 01       	movw	r20, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <DIO_enuGetPinval+0x76>
    1286:	55 95       	asr	r21
    1288:	47 95       	ror	r20
    128a:	8a 95       	dec	r24
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <DIO_enuGetPinval+0x72>
    128e:	ca 01       	movw	r24, r20
    1290:	81 70       	andi	r24, 0x01	; 1
    1292:	eb 81       	ldd	r30, Y+3	; 0x03
    1294:	fc 81       	ldd	r31, Y+4	; 0x04
    1296:	80 83       	st	Z, r24
    1298:	3b c0       	rjmp	.+118    	; 0x1310 <DIO_enuGetPinval+0xfc>
				break;

			case DIO_u8PORTB:
				*copy_u8value=((PINB>>copy_u8pin) &masking_bit);
    129a:	e6 e3       	ldi	r30, 0x36	; 54
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	88 2f       	mov	r24, r24
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	a9 01       	movw	r20, r18
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <DIO_enuGetPinval+0x9e>
    12ae:	55 95       	asr	r21
    12b0:	47 95       	ror	r20
    12b2:	8a 95       	dec	r24
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <DIO_enuGetPinval+0x9a>
    12b6:	ca 01       	movw	r24, r20
    12b8:	81 70       	andi	r24, 0x01	; 1
    12ba:	eb 81       	ldd	r30, Y+3	; 0x03
    12bc:	fc 81       	ldd	r31, Y+4	; 0x04
    12be:	80 83       	st	Z, r24
    12c0:	27 c0       	rjmp	.+78     	; 0x1310 <DIO_enuGetPinval+0xfc>
				break;

			case DIO_u8PORTC:
				*copy_u8value=((PINC>>copy_u8pin) &masking_bit);
    12c2:	e3 e3       	ldi	r30, 0x33	; 51
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	88 2f       	mov	r24, r24
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	a9 01       	movw	r20, r18
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <DIO_enuGetPinval+0xc6>
    12d6:	55 95       	asr	r21
    12d8:	47 95       	ror	r20
    12da:	8a 95       	dec	r24
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <DIO_enuGetPinval+0xc2>
    12de:	ca 01       	movw	r24, r20
    12e0:	81 70       	andi	r24, 0x01	; 1
    12e2:	eb 81       	ldd	r30, Y+3	; 0x03
    12e4:	fc 81       	ldd	r31, Y+4	; 0x04
    12e6:	80 83       	st	Z, r24
    12e8:	13 c0       	rjmp	.+38     	; 0x1310 <DIO_enuGetPinval+0xfc>
				break;

			case DIO_u8PORTD:
				*copy_u8value=((PIND>>copy_u8pin) &masking_bit);
    12ea:	e0 e3       	ldi	r30, 0x30	; 48
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	a9 01       	movw	r20, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <DIO_enuGetPinval+0xee>
    12fe:	55 95       	asr	r21
    1300:	47 95       	ror	r20
    1302:	8a 95       	dec	r24
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <DIO_enuGetPinval+0xea>
    1306:	ca 01       	movw	r24, r20
    1308:	81 70       	andi	r24, 0x01	; 1
    130a:	eb 81       	ldd	r30, Y+3	; 0x03
    130c:	fc 81       	ldd	r31, Y+4	; 0x04
    130e:	80 83       	st	Z, r24
				break;
			}

}
    1310:	27 96       	adiw	r28, 0x07	; 7
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	cd bf       	out	0x3d, r28	; 61
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <LCD_enuinit>:


 u8 static initfinished=0;

 ES_t LCD_enuinit()
 {
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	e8 97       	sbiw	r28, 0x38	; 56
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	de bf       	out	0x3e, r29	; 62
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	cd bf       	out	0x3d, r28	; 61
	 /***************************************************************************************/
	 /****************************   		8-bits code  	******************************/
	 /***************************************************************************************/
	 	 /* make port b as output */
	 	 DIO_enuSetPortDIR(1, 0xff);
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	6f ef       	ldi	r22, 0xFF	; 255
    133a:	0e 94 b9 05 	call	0xb72	; 0xb72 <DIO_enuSetPortDIR>

	 	 /* make pins A0, A1, A2 ===> sr, wr, en as output */
	 	 DIO_enuSetPinDIR(0, 0, 1);
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	41 e0       	ldi	r20, 0x01	; 1
    1344:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_enuSetPinDIR>
	 	 DIO_enuSetPinDIR(0, 1, 1);
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	61 e0       	ldi	r22, 0x01	; 1
    134c:	41 e0       	ldi	r20, 0x01	; 1
    134e:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_enuSetPinDIR>
	 	 DIO_enuSetPinDIR(0, 2, 1);
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	62 e0       	ldi	r22, 0x02	; 2
    1356:	41 e0       	ldi	r20, 0x01	; 1
    1358:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_enuSetPinDIR>
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	a8 e4       	ldi	r26, 0x48	; 72
    1362:	b2 e4       	ldi	r27, 0x42	; 66
    1364:	8d ab       	std	Y+53, r24	; 0x35
    1366:	9e ab       	std	Y+54, r25	; 0x36
    1368:	af ab       	std	Y+55, r26	; 0x37
    136a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    136c:	6d a9       	ldd	r22, Y+53	; 0x35
    136e:	7e a9       	ldd	r23, Y+54	; 0x36
    1370:	8f a9       	ldd	r24, Y+55	; 0x37
    1372:	98 ad       	ldd	r25, Y+56	; 0x38
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	4a ef       	ldi	r20, 0xFA	; 250
    137a:	54 e4       	ldi	r21, 0x44	; 68
    137c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	89 ab       	std	Y+49, r24	; 0x31
    1386:	9a ab       	std	Y+50, r25	; 0x32
    1388:	ab ab       	std	Y+51, r26	; 0x33
    138a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    138c:	69 a9       	ldd	r22, Y+49	; 0x31
    138e:	7a a9       	ldd	r23, Y+50	; 0x32
    1390:	8b a9       	ldd	r24, Y+51	; 0x33
    1392:	9c a9       	ldd	r25, Y+52	; 0x34
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	40 e8       	ldi	r20, 0x80	; 128
    139a:	5f e3       	ldi	r21, 0x3F	; 63
    139c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13a0:	88 23       	and	r24, r24
    13a2:	2c f4       	brge	.+10     	; 0x13ae <LCD_enuinit+0x8c>
		__ticks = 1;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	98 ab       	std	Y+48, r25	; 0x30
    13aa:	8f a7       	std	Y+47, r24	; 0x2f
    13ac:	3f c0       	rjmp	.+126    	; 0x142c <LCD_enuinit+0x10a>
	else if (__tmp > 65535)
    13ae:	69 a9       	ldd	r22, Y+49	; 0x31
    13b0:	7a a9       	ldd	r23, Y+50	; 0x32
    13b2:	8b a9       	ldd	r24, Y+51	; 0x33
    13b4:	9c a9       	ldd	r25, Y+52	; 0x34
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	3f ef       	ldi	r19, 0xFF	; 255
    13ba:	4f e7       	ldi	r20, 0x7F	; 127
    13bc:	57 e4       	ldi	r21, 0x47	; 71
    13be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13c2:	18 16       	cp	r1, r24
    13c4:	4c f5       	brge	.+82     	; 0x1418 <LCD_enuinit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c6:	6d a9       	ldd	r22, Y+53	; 0x35
    13c8:	7e a9       	ldd	r23, Y+54	; 0x36
    13ca:	8f a9       	ldd	r24, Y+55	; 0x37
    13cc:	98 ad       	ldd	r25, Y+56	; 0x38
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	40 e2       	ldi	r20, 0x20	; 32
    13d4:	51 e4       	ldi	r21, 0x41	; 65
    13d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	bc 01       	movw	r22, r24
    13e0:	cd 01       	movw	r24, r26
    13e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	98 ab       	std	Y+48, r25	; 0x30
    13ec:	8f a7       	std	Y+47, r24	; 0x2f
    13ee:	0f c0       	rjmp	.+30     	; 0x140e <LCD_enuinit+0xec>
    13f0:	88 ec       	ldi	r24, 0xC8	; 200
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	9e a7       	std	Y+46, r25	; 0x2e
    13f6:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    13fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    13fc:	01 97       	sbiw	r24, 0x01	; 1
    13fe:	f1 f7       	brne	.-4      	; 0x13fc <LCD_enuinit+0xda>
    1400:	9e a7       	std	Y+46, r25	; 0x2e
    1402:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1404:	8f a5       	ldd	r24, Y+47	; 0x2f
    1406:	98 a9       	ldd	r25, Y+48	; 0x30
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	98 ab       	std	Y+48, r25	; 0x30
    140c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    140e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1410:	98 a9       	ldd	r25, Y+48	; 0x30
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	69 f7       	brne	.-38     	; 0x13f0 <LCD_enuinit+0xce>
    1416:	14 c0       	rjmp	.+40     	; 0x1440 <LCD_enuinit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1418:	69 a9       	ldd	r22, Y+49	; 0x31
    141a:	7a a9       	ldd	r23, Y+50	; 0x32
    141c:	8b a9       	ldd	r24, Y+51	; 0x33
    141e:	9c a9       	ldd	r25, Y+52	; 0x34
    1420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	98 ab       	std	Y+48, r25	; 0x30
    142a:	8f a7       	std	Y+47, r24	; 0x2f
    142c:	8f a5       	ldd	r24, Y+47	; 0x2f
    142e:	98 a9       	ldd	r25, Y+48	; 0x30
    1430:	9c a7       	std	Y+44, r25	; 0x2c
    1432:	8b a7       	std	Y+43, r24	; 0x2b
    1434:	8b a5       	ldd	r24, Y+43	; 0x2b
    1436:	9c a5       	ldd	r25, Y+44	; 0x2c
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	f1 f7       	brne	.-4      	; 0x1438 <LCD_enuinit+0x116>
    143c:	9c a7       	std	Y+44, r25	; 0x2c
    143e:	8b a7       	std	Y+43, r24	; 0x2b

	 	 _delay_ms(50) ; // becuase of if lcd_init () call first
	 	 LCD_enusendcmd(0x38) ;  // 8 bit ,, 2 line ,, 5*7 font
    1440:	88 e3       	ldi	r24, 0x38	; 56
    1442:	0e 94 8c 0b 	call	0x1718	; 0x1718 <LCD_enusendcmd>
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	a0 e8       	ldi	r26, 0x80	; 128
    144c:	bf e3       	ldi	r27, 0x3F	; 63
    144e:	8f a3       	std	Y+39, r24	; 0x27
    1450:	98 a7       	std	Y+40, r25	; 0x28
    1452:	a9 a7       	std	Y+41, r26	; 0x29
    1454:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1456:	6f a1       	ldd	r22, Y+39	; 0x27
    1458:	78 a5       	ldd	r23, Y+40	; 0x28
    145a:	89 a5       	ldd	r24, Y+41	; 0x29
    145c:	9a a5       	ldd	r25, Y+42	; 0x2a
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	4a ef       	ldi	r20, 0xFA	; 250
    1464:	54 e4       	ldi	r21, 0x44	; 68
    1466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	8b a3       	std	Y+35, r24	; 0x23
    1470:	9c a3       	std	Y+36, r25	; 0x24
    1472:	ad a3       	std	Y+37, r26	; 0x25
    1474:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1476:	6b a1       	ldd	r22, Y+35	; 0x23
    1478:	7c a1       	ldd	r23, Y+36	; 0x24
    147a:	8d a1       	ldd	r24, Y+37	; 0x25
    147c:	9e a1       	ldd	r25, Y+38	; 0x26
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	40 e8       	ldi	r20, 0x80	; 128
    1484:	5f e3       	ldi	r21, 0x3F	; 63
    1486:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    148a:	88 23       	and	r24, r24
    148c:	2c f4       	brge	.+10     	; 0x1498 <LCD_enuinit+0x176>
		__ticks = 1;
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	9a a3       	std	Y+34, r25	; 0x22
    1494:	89 a3       	std	Y+33, r24	; 0x21
    1496:	3f c0       	rjmp	.+126    	; 0x1516 <LCD_enuinit+0x1f4>
	else if (__tmp > 65535)
    1498:	6b a1       	ldd	r22, Y+35	; 0x23
    149a:	7c a1       	ldd	r23, Y+36	; 0x24
    149c:	8d a1       	ldd	r24, Y+37	; 0x25
    149e:	9e a1       	ldd	r25, Y+38	; 0x26
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	3f ef       	ldi	r19, 0xFF	; 255
    14a4:	4f e7       	ldi	r20, 0x7F	; 127
    14a6:	57 e4       	ldi	r21, 0x47	; 71
    14a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14ac:	18 16       	cp	r1, r24
    14ae:	4c f5       	brge	.+82     	; 0x1502 <LCD_enuinit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b0:	6f a1       	ldd	r22, Y+39	; 0x27
    14b2:	78 a5       	ldd	r23, Y+40	; 0x28
    14b4:	89 a5       	ldd	r24, Y+41	; 0x29
    14b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	40 e2       	ldi	r20, 0x20	; 32
    14be:	51 e4       	ldi	r21, 0x41	; 65
    14c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	bc 01       	movw	r22, r24
    14ca:	cd 01       	movw	r24, r26
    14cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	9a a3       	std	Y+34, r25	; 0x22
    14d6:	89 a3       	std	Y+33, r24	; 0x21
    14d8:	0f c0       	rjmp	.+30     	; 0x14f8 <LCD_enuinit+0x1d6>
    14da:	88 ec       	ldi	r24, 0xC8	; 200
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	98 a3       	std	Y+32, r25	; 0x20
    14e0:	8f 8f       	std	Y+31, r24	; 0x1f
    14e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14e4:	98 a1       	ldd	r25, Y+32	; 0x20
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	f1 f7       	brne	.-4      	; 0x14e6 <LCD_enuinit+0x1c4>
    14ea:	98 a3       	std	Y+32, r25	; 0x20
    14ec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ee:	89 a1       	ldd	r24, Y+33	; 0x21
    14f0:	9a a1       	ldd	r25, Y+34	; 0x22
    14f2:	01 97       	sbiw	r24, 0x01	; 1
    14f4:	9a a3       	std	Y+34, r25	; 0x22
    14f6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f8:	89 a1       	ldd	r24, Y+33	; 0x21
    14fa:	9a a1       	ldd	r25, Y+34	; 0x22
    14fc:	00 97       	sbiw	r24, 0x00	; 0
    14fe:	69 f7       	brne	.-38     	; 0x14da <LCD_enuinit+0x1b8>
    1500:	14 c0       	rjmp	.+40     	; 0x152a <LCD_enuinit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1502:	6b a1       	ldd	r22, Y+35	; 0x23
    1504:	7c a1       	ldd	r23, Y+36	; 0x24
    1506:	8d a1       	ldd	r24, Y+37	; 0x25
    1508:	9e a1       	ldd	r25, Y+38	; 0x26
    150a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150e:	dc 01       	movw	r26, r24
    1510:	cb 01       	movw	r24, r22
    1512:	9a a3       	std	Y+34, r25	; 0x22
    1514:	89 a3       	std	Y+33, r24	; 0x21
    1516:	89 a1       	ldd	r24, Y+33	; 0x21
    1518:	9a a1       	ldd	r25, Y+34	; 0x22
    151a:	9e 8f       	std	Y+30, r25	; 0x1e
    151c:	8d 8f       	std	Y+29, r24	; 0x1d
    151e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1520:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	f1 f7       	brne	.-4      	; 0x1522 <LCD_enuinit+0x200>
    1526:	9e 8f       	std	Y+30, r25	; 0x1e
    1528:	8d 8f       	std	Y+29, r24	; 0x1d
	 	 _delay_ms(1) ;
	 	 LCD_enusendcmd(0x0c) ;  // 0x0e ,, 0x0f cursor
    152a:	8c e0       	ldi	r24, 0x0C	; 12
    152c:	0e 94 8c 0b 	call	0x1718	; 0x1718 <LCD_enusendcmd>
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	a0 e8       	ldi	r26, 0x80	; 128
    1536:	bf e3       	ldi	r27, 0x3F	; 63
    1538:	89 8f       	std	Y+25, r24	; 0x19
    153a:	9a 8f       	std	Y+26, r25	; 0x1a
    153c:	ab 8f       	std	Y+27, r26	; 0x1b
    153e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1540:	69 8d       	ldd	r22, Y+25	; 0x19
    1542:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1544:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1546:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	4a ef       	ldi	r20, 0xFA	; 250
    154e:	54 e4       	ldi	r21, 0x44	; 68
    1550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	8d 8b       	std	Y+21, r24	; 0x15
    155a:	9e 8b       	std	Y+22, r25	; 0x16
    155c:	af 8b       	std	Y+23, r26	; 0x17
    155e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1560:	6d 89       	ldd	r22, Y+21	; 0x15
    1562:	7e 89       	ldd	r23, Y+22	; 0x16
    1564:	8f 89       	ldd	r24, Y+23	; 0x17
    1566:	98 8d       	ldd	r25, Y+24	; 0x18
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	40 e8       	ldi	r20, 0x80	; 128
    156e:	5f e3       	ldi	r21, 0x3F	; 63
    1570:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1574:	88 23       	and	r24, r24
    1576:	2c f4       	brge	.+10     	; 0x1582 <LCD_enuinit+0x260>
		__ticks = 1;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	9c 8b       	std	Y+20, r25	; 0x14
    157e:	8b 8b       	std	Y+19, r24	; 0x13
    1580:	3f c0       	rjmp	.+126    	; 0x1600 <LCD_enuinit+0x2de>
	else if (__tmp > 65535)
    1582:	6d 89       	ldd	r22, Y+21	; 0x15
    1584:	7e 89       	ldd	r23, Y+22	; 0x16
    1586:	8f 89       	ldd	r24, Y+23	; 0x17
    1588:	98 8d       	ldd	r25, Y+24	; 0x18
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	3f ef       	ldi	r19, 0xFF	; 255
    158e:	4f e7       	ldi	r20, 0x7F	; 127
    1590:	57 e4       	ldi	r21, 0x47	; 71
    1592:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1596:	18 16       	cp	r1, r24
    1598:	4c f5       	brge	.+82     	; 0x15ec <LCD_enuinit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    159a:	69 8d       	ldd	r22, Y+25	; 0x19
    159c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    159e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e2       	ldi	r20, 0x20	; 32
    15a8:	51 e4       	ldi	r21, 0x41	; 65
    15aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	bc 01       	movw	r22, r24
    15b4:	cd 01       	movw	r24, r26
    15b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ba:	dc 01       	movw	r26, r24
    15bc:	cb 01       	movw	r24, r22
    15be:	9c 8b       	std	Y+20, r25	; 0x14
    15c0:	8b 8b       	std	Y+19, r24	; 0x13
    15c2:	0f c0       	rjmp	.+30     	; 0x15e2 <LCD_enuinit+0x2c0>
    15c4:	88 ec       	ldi	r24, 0xC8	; 200
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	9a 8b       	std	Y+18, r25	; 0x12
    15ca:	89 8b       	std	Y+17, r24	; 0x11
    15cc:	89 89       	ldd	r24, Y+17	; 0x11
    15ce:	9a 89       	ldd	r25, Y+18	; 0x12
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	f1 f7       	brne	.-4      	; 0x15d0 <LCD_enuinit+0x2ae>
    15d4:	9a 8b       	std	Y+18, r25	; 0x12
    15d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d8:	8b 89       	ldd	r24, Y+19	; 0x13
    15da:	9c 89       	ldd	r25, Y+20	; 0x14
    15dc:	01 97       	sbiw	r24, 0x01	; 1
    15de:	9c 8b       	std	Y+20, r25	; 0x14
    15e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e2:	8b 89       	ldd	r24, Y+19	; 0x13
    15e4:	9c 89       	ldd	r25, Y+20	; 0x14
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	69 f7       	brne	.-38     	; 0x15c4 <LCD_enuinit+0x2a2>
    15ea:	14 c0       	rjmp	.+40     	; 0x1614 <LCD_enuinit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ec:	6d 89       	ldd	r22, Y+21	; 0x15
    15ee:	7e 89       	ldd	r23, Y+22	; 0x16
    15f0:	8f 89       	ldd	r24, Y+23	; 0x17
    15f2:	98 8d       	ldd	r25, Y+24	; 0x18
    15f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	9c 8b       	std	Y+20, r25	; 0x14
    15fe:	8b 8b       	std	Y+19, r24	; 0x13
    1600:	8b 89       	ldd	r24, Y+19	; 0x13
    1602:	9c 89       	ldd	r25, Y+20	; 0x14
    1604:	98 8b       	std	Y+16, r25	; 0x10
    1606:	8f 87       	std	Y+15, r24	; 0x0f
    1608:	8f 85       	ldd	r24, Y+15	; 0x0f
    160a:	98 89       	ldd	r25, Y+16	; 0x10
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	f1 f7       	brne	.-4      	; 0x160c <LCD_enuinit+0x2ea>
    1610:	98 8b       	std	Y+16, r25	; 0x10
    1612:	8f 87       	std	Y+15, r24	; 0x0f
	 	 _delay_ms(1) ;
	 	 LCD_enusendcmd(0x01) ; // clear screen
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	0e 94 8c 0b 	call	0x1718	; 0x1718 <LCD_enusendcmd>
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	a0 e0       	ldi	r26, 0x00	; 0
    1620:	b0 e4       	ldi	r27, 0x40	; 64
    1622:	8b 87       	std	Y+11, r24	; 0x0b
    1624:	9c 87       	std	Y+12, r25	; 0x0c
    1626:	ad 87       	std	Y+13, r26	; 0x0d
    1628:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162a:	6b 85       	ldd	r22, Y+11	; 0x0b
    162c:	7c 85       	ldd	r23, Y+12	; 0x0c
    162e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1630:	9e 85       	ldd	r25, Y+14	; 0x0e
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	4a ef       	ldi	r20, 0xFA	; 250
    1638:	54 e4       	ldi	r21, 0x44	; 68
    163a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	8f 83       	std	Y+7, r24	; 0x07
    1644:	98 87       	std	Y+8, r25	; 0x08
    1646:	a9 87       	std	Y+9, r26	; 0x09
    1648:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    164a:	6f 81       	ldd	r22, Y+7	; 0x07
    164c:	78 85       	ldd	r23, Y+8	; 0x08
    164e:	89 85       	ldd	r24, Y+9	; 0x09
    1650:	9a 85       	ldd	r25, Y+10	; 0x0a
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	40 e8       	ldi	r20, 0x80	; 128
    1658:	5f e3       	ldi	r21, 0x3F	; 63
    165a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    165e:	88 23       	and	r24, r24
    1660:	2c f4       	brge	.+10     	; 0x166c <LCD_enuinit+0x34a>
		__ticks = 1;
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	9e 83       	std	Y+6, r25	; 0x06
    1668:	8d 83       	std	Y+5, r24	; 0x05
    166a:	3f c0       	rjmp	.+126    	; 0x16ea <LCD_enuinit+0x3c8>
	else if (__tmp > 65535)
    166c:	6f 81       	ldd	r22, Y+7	; 0x07
    166e:	78 85       	ldd	r23, Y+8	; 0x08
    1670:	89 85       	ldd	r24, Y+9	; 0x09
    1672:	9a 85       	ldd	r25, Y+10	; 0x0a
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	3f ef       	ldi	r19, 0xFF	; 255
    1678:	4f e7       	ldi	r20, 0x7F	; 127
    167a:	57 e4       	ldi	r21, 0x47	; 71
    167c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1680:	18 16       	cp	r1, r24
    1682:	4c f5       	brge	.+82     	; 0x16d6 <LCD_enuinit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1684:	6b 85       	ldd	r22, Y+11	; 0x0b
    1686:	7c 85       	ldd	r23, Y+12	; 0x0c
    1688:	8d 85       	ldd	r24, Y+13	; 0x0d
    168a:	9e 85       	ldd	r25, Y+14	; 0x0e
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	40 e2       	ldi	r20, 0x20	; 32
    1692:	51 e4       	ldi	r21, 0x41	; 65
    1694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	bc 01       	movw	r22, r24
    169e:	cd 01       	movw	r24, r26
    16a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	9e 83       	std	Y+6, r25	; 0x06
    16aa:	8d 83       	std	Y+5, r24	; 0x05
    16ac:	0f c0       	rjmp	.+30     	; 0x16cc <LCD_enuinit+0x3aa>
    16ae:	88 ec       	ldi	r24, 0xC8	; 200
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	9c 83       	std	Y+4, r25	; 0x04
    16b4:	8b 83       	std	Y+3, r24	; 0x03
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ba:	01 97       	sbiw	r24, 0x01	; 1
    16bc:	f1 f7       	brne	.-4      	; 0x16ba <LCD_enuinit+0x398>
    16be:	9c 83       	std	Y+4, r25	; 0x04
    16c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c2:	8d 81       	ldd	r24, Y+5	; 0x05
    16c4:	9e 81       	ldd	r25, Y+6	; 0x06
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	9e 83       	std	Y+6, r25	; 0x06
    16ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16cc:	8d 81       	ldd	r24, Y+5	; 0x05
    16ce:	9e 81       	ldd	r25, Y+6	; 0x06
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	69 f7       	brne	.-38     	; 0x16ae <LCD_enuinit+0x38c>
    16d4:	14 c0       	rjmp	.+40     	; 0x16fe <LCD_enuinit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d6:	6f 81       	ldd	r22, Y+7	; 0x07
    16d8:	78 85       	ldd	r23, Y+8	; 0x08
    16da:	89 85       	ldd	r24, Y+9	; 0x09
    16dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	9e 83       	std	Y+6, r25	; 0x06
    16e8:	8d 83       	std	Y+5, r24	; 0x05
    16ea:	8d 81       	ldd	r24, Y+5	; 0x05
    16ec:	9e 81       	ldd	r25, Y+6	; 0x06
    16ee:	9a 83       	std	Y+2, r25	; 0x02
    16f0:	89 83       	std	Y+1, r24	; 0x01
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	9a 81       	ldd	r25, Y+2	; 0x02
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <LCD_enuinit+0x3d4>
    16fa:	9a 83       	std	Y+2, r25	; 0x02
    16fc:	89 83       	std	Y+1, r24	; 0x01
	 	 _delay_ms(2) ;
	 	 LCD_enusendcmd(0x06) ; // Address increase no shift
    16fe:	86 e0       	ldi	r24, 0x06	; 6
    1700:	0e 94 8c 0b 	call	0x1718	; 0x1718 <LCD_enusendcmd>


	  	 return ES_OK;
    1704:	81 e0       	ldi	r24, 0x01	; 1
 }
    1706:	e8 96       	adiw	r28, 0x38	; 56
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	cf 91       	pop	r28
    1714:	df 91       	pop	r29
    1716:	08 95       	ret

00001718 <LCD_enusendcmd>:
 ES_t LCD_enusendcmd(u8 copy_cmd)
 {
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	6d 97       	sbiw	r28, 0x1d	; 29
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	8d 8f       	std	Y+29, r24	; 0x1d
	 /***************************************************************************************/
	 /****************************   		8-bits code  	******************************/
	 /***************************************************************************************/
	 	 /* clear sr */
	 	 DIO_enuSetPinVAL(0, 0, 0);
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	60 e0       	ldi	r22, 0x00	; 0
    1732:	40 e0       	ldi	r20, 0x00	; 0
    1734:	0e 94 6c 07 	call	0xed8	; 0xed8 <DIO_enuSetPinVAL>

	 	 /* send the command on port b */
	 	 DIO_enuSetPortVAL(1, copy_cmd);
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    173c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <DIO_enuSetPortVAL>

	 	 /* set en as high */
	 	 DIO_enuSetPinVAL(0, 2, 1);
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	62 e0       	ldi	r22, 0x02	; 2
    1744:	41 e0       	ldi	r20, 0x01	; 1
    1746:	0e 94 6c 07 	call	0xed8	; 0xed8 <DIO_enuSetPinVAL>
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	a0 e8       	ldi	r26, 0x80	; 128
    1750:	bf e3       	ldi	r27, 0x3F	; 63
    1752:	89 8f       	std	Y+25, r24	; 0x19
    1754:	9a 8f       	std	Y+26, r25	; 0x1a
    1756:	ab 8f       	std	Y+27, r26	; 0x1b
    1758:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    175a:	69 8d       	ldd	r22, Y+25	; 0x19
    175c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    175e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1760:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	4a ef       	ldi	r20, 0xFA	; 250
    1768:	54 e4       	ldi	r21, 0x44	; 68
    176a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	8d 8b       	std	Y+21, r24	; 0x15
    1774:	9e 8b       	std	Y+22, r25	; 0x16
    1776:	af 8b       	std	Y+23, r26	; 0x17
    1778:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    177a:	6d 89       	ldd	r22, Y+21	; 0x15
    177c:	7e 89       	ldd	r23, Y+22	; 0x16
    177e:	8f 89       	ldd	r24, Y+23	; 0x17
    1780:	98 8d       	ldd	r25, Y+24	; 0x18
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	40 e8       	ldi	r20, 0x80	; 128
    1788:	5f e3       	ldi	r21, 0x3F	; 63
    178a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    178e:	88 23       	and	r24, r24
    1790:	2c f4       	brge	.+10     	; 0x179c <LCD_enusendcmd+0x84>
		__ticks = 1;
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	9c 8b       	std	Y+20, r25	; 0x14
    1798:	8b 8b       	std	Y+19, r24	; 0x13
    179a:	3f c0       	rjmp	.+126    	; 0x181a <LCD_enusendcmd+0x102>
	else if (__tmp > 65535)
    179c:	6d 89       	ldd	r22, Y+21	; 0x15
    179e:	7e 89       	ldd	r23, Y+22	; 0x16
    17a0:	8f 89       	ldd	r24, Y+23	; 0x17
    17a2:	98 8d       	ldd	r25, Y+24	; 0x18
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	3f ef       	ldi	r19, 0xFF	; 255
    17a8:	4f e7       	ldi	r20, 0x7F	; 127
    17aa:	57 e4       	ldi	r21, 0x47	; 71
    17ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17b0:	18 16       	cp	r1, r24
    17b2:	4c f5       	brge	.+82     	; 0x1806 <LCD_enusendcmd+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b4:	69 8d       	ldd	r22, Y+25	; 0x19
    17b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e2       	ldi	r20, 0x20	; 32
    17c2:	51 e4       	ldi	r21, 0x41	; 65
    17c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	bc 01       	movw	r22, r24
    17ce:	cd 01       	movw	r24, r26
    17d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	9c 8b       	std	Y+20, r25	; 0x14
    17da:	8b 8b       	std	Y+19, r24	; 0x13
    17dc:	0f c0       	rjmp	.+30     	; 0x17fc <LCD_enusendcmd+0xe4>
    17de:	88 ec       	ldi	r24, 0xC8	; 200
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	9a 8b       	std	Y+18, r25	; 0x12
    17e4:	89 8b       	std	Y+17, r24	; 0x11
    17e6:	89 89       	ldd	r24, Y+17	; 0x11
    17e8:	9a 89       	ldd	r25, Y+18	; 0x12
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	f1 f7       	brne	.-4      	; 0x17ea <LCD_enusendcmd+0xd2>
    17ee:	9a 8b       	std	Y+18, r25	; 0x12
    17f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f2:	8b 89       	ldd	r24, Y+19	; 0x13
    17f4:	9c 89       	ldd	r25, Y+20	; 0x14
    17f6:	01 97       	sbiw	r24, 0x01	; 1
    17f8:	9c 8b       	std	Y+20, r25	; 0x14
    17fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17fc:	8b 89       	ldd	r24, Y+19	; 0x13
    17fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	69 f7       	brne	.-38     	; 0x17de <LCD_enusendcmd+0xc6>
    1804:	14 c0       	rjmp	.+40     	; 0x182e <LCD_enusendcmd+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1806:	6d 89       	ldd	r22, Y+21	; 0x15
    1808:	7e 89       	ldd	r23, Y+22	; 0x16
    180a:	8f 89       	ldd	r24, Y+23	; 0x17
    180c:	98 8d       	ldd	r25, Y+24	; 0x18
    180e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	9c 8b       	std	Y+20, r25	; 0x14
    1818:	8b 8b       	std	Y+19, r24	; 0x13
    181a:	8b 89       	ldd	r24, Y+19	; 0x13
    181c:	9c 89       	ldd	r25, Y+20	; 0x14
    181e:	98 8b       	std	Y+16, r25	; 0x10
    1820:	8f 87       	std	Y+15, r24	; 0x0f
    1822:	8f 85       	ldd	r24, Y+15	; 0x0f
    1824:	98 89       	ldd	r25, Y+16	; 0x10
    1826:	01 97       	sbiw	r24, 0x01	; 1
    1828:	f1 f7       	brne	.-4      	; 0x1826 <LCD_enusendcmd+0x10e>
    182a:	98 8b       	std	Y+16, r25	; 0x10
    182c:	8f 87       	std	Y+15, r24	; 0x0f
	 	 _delay_ms(1) ;

	 	 /* clear en */
	 	 DIO_enuSetPinVAL(0, 2, 0);
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	62 e0       	ldi	r22, 0x02	; 2
    1832:	40 e0       	ldi	r20, 0x00	; 0
    1834:	0e 94 6c 07 	call	0xed8	; 0xed8 <DIO_enuSetPinVAL>
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	a0 e8       	ldi	r26, 0x80	; 128
    183e:	bf e3       	ldi	r27, 0x3F	; 63
    1840:	8b 87       	std	Y+11, r24	; 0x0b
    1842:	9c 87       	std	Y+12, r25	; 0x0c
    1844:	ad 87       	std	Y+13, r26	; 0x0d
    1846:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1848:	6b 85       	ldd	r22, Y+11	; 0x0b
    184a:	7c 85       	ldd	r23, Y+12	; 0x0c
    184c:	8d 85       	ldd	r24, Y+13	; 0x0d
    184e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	4a ef       	ldi	r20, 0xFA	; 250
    1856:	54 e4       	ldi	r21, 0x44	; 68
    1858:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	8f 83       	std	Y+7, r24	; 0x07
    1862:	98 87       	std	Y+8, r25	; 0x08
    1864:	a9 87       	std	Y+9, r26	; 0x09
    1866:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1868:	6f 81       	ldd	r22, Y+7	; 0x07
    186a:	78 85       	ldd	r23, Y+8	; 0x08
    186c:	89 85       	ldd	r24, Y+9	; 0x09
    186e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	40 e8       	ldi	r20, 0x80	; 128
    1876:	5f e3       	ldi	r21, 0x3F	; 63
    1878:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    187c:	88 23       	and	r24, r24
    187e:	2c f4       	brge	.+10     	; 0x188a <LCD_enusendcmd+0x172>
		__ticks = 1;
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	9e 83       	std	Y+6, r25	; 0x06
    1886:	8d 83       	std	Y+5, r24	; 0x05
    1888:	3f c0       	rjmp	.+126    	; 0x1908 <LCD_enusendcmd+0x1f0>
	else if (__tmp > 65535)
    188a:	6f 81       	ldd	r22, Y+7	; 0x07
    188c:	78 85       	ldd	r23, Y+8	; 0x08
    188e:	89 85       	ldd	r24, Y+9	; 0x09
    1890:	9a 85       	ldd	r25, Y+10	; 0x0a
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	3f ef       	ldi	r19, 0xFF	; 255
    1896:	4f e7       	ldi	r20, 0x7F	; 127
    1898:	57 e4       	ldi	r21, 0x47	; 71
    189a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    189e:	18 16       	cp	r1, r24
    18a0:	4c f5       	brge	.+82     	; 0x18f4 <LCD_enusendcmd+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	40 e2       	ldi	r20, 0x20	; 32
    18b0:	51 e4       	ldi	r21, 0x41	; 65
    18b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	bc 01       	movw	r22, r24
    18bc:	cd 01       	movw	r24, r26
    18be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	9e 83       	std	Y+6, r25	; 0x06
    18c8:	8d 83       	std	Y+5, r24	; 0x05
    18ca:	0f c0       	rjmp	.+30     	; 0x18ea <LCD_enusendcmd+0x1d2>
    18cc:	88 ec       	ldi	r24, 0xC8	; 200
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	9c 83       	std	Y+4, r25	; 0x04
    18d2:	8b 83       	std	Y+3, r24	; 0x03
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	9c 81       	ldd	r25, Y+4	; 0x04
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	f1 f7       	brne	.-4      	; 0x18d8 <LCD_enusendcmd+0x1c0>
    18dc:	9c 83       	std	Y+4, r25	; 0x04
    18de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e0:	8d 81       	ldd	r24, Y+5	; 0x05
    18e2:	9e 81       	ldd	r25, Y+6	; 0x06
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	9e 83       	std	Y+6, r25	; 0x06
    18e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ea:	8d 81       	ldd	r24, Y+5	; 0x05
    18ec:	9e 81       	ldd	r25, Y+6	; 0x06
    18ee:	00 97       	sbiw	r24, 0x00	; 0
    18f0:	69 f7       	brne	.-38     	; 0x18cc <LCD_enusendcmd+0x1b4>
    18f2:	14 c0       	rjmp	.+40     	; 0x191c <LCD_enusendcmd+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f4:	6f 81       	ldd	r22, Y+7	; 0x07
    18f6:	78 85       	ldd	r23, Y+8	; 0x08
    18f8:	89 85       	ldd	r24, Y+9	; 0x09
    18fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    18fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	9e 83       	std	Y+6, r25	; 0x06
    1906:	8d 83       	std	Y+5, r24	; 0x05
    1908:	8d 81       	ldd	r24, Y+5	; 0x05
    190a:	9e 81       	ldd	r25, Y+6	; 0x06
    190c:	9a 83       	std	Y+2, r25	; 0x02
    190e:	89 83       	std	Y+1, r24	; 0x01
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	9a 81       	ldd	r25, Y+2	; 0x02
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	f1 f7       	brne	.-4      	; 0x1914 <LCD_enusendcmd+0x1fc>
    1918:	9a 83       	std	Y+2, r25	; 0x02
    191a:	89 83       	std	Y+1, r24	; 0x01
	 	 _delay_ms(1) ;
	 	 return ES_OK;
    191c:	81 e0       	ldi	r24, 0x01	; 1
 }
    191e:	6d 96       	adiw	r28, 0x1d	; 29
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	cd bf       	out	0x3d, r28	; 61
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <LCD_enuwritedate>:
 ES_t LCD_enuwritedate(u8 copy_data){
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	6d 97       	sbiw	r28, 0x1d	; 29
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	f8 94       	cli
    193e:	de bf       	out	0x3e, r29	; 62
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	cd bf       	out	0x3d, r28	; 61
    1944:	8d 8f       	std	Y+29, r24	; 0x1d
	 /***************************************************************************************/
	 /****************************   		8-bits code  	******************************/
	 /***************************************************************************************/
	 	 /* set sr as high */
	 	 DIO_enuSetPinVAL(0, 0, 1);
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	60 e0       	ldi	r22, 0x00	; 0
    194a:	41 e0       	ldi	r20, 0x01	; 1
    194c:	0e 94 6c 07 	call	0xed8	; 0xed8 <DIO_enuSetPinVAL>

	 	 /* write the data on port b */
	 	 DIO_enuSetPortVAL(1, copy_data);
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1954:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <DIO_enuSetPortVAL>

	 	 /* set en as high */
	 	 DIO_enuSetPinVAL(0, 2, 1);
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	62 e0       	ldi	r22, 0x02	; 2
    195c:	41 e0       	ldi	r20, 0x01	; 1
    195e:	0e 94 6c 07 	call	0xed8	; 0xed8 <DIO_enuSetPinVAL>
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	a0 e8       	ldi	r26, 0x80	; 128
    1968:	bf e3       	ldi	r27, 0x3F	; 63
    196a:	89 8f       	std	Y+25, r24	; 0x19
    196c:	9a 8f       	std	Y+26, r25	; 0x1a
    196e:	ab 8f       	std	Y+27, r26	; 0x1b
    1970:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1972:	69 8d       	ldd	r22, Y+25	; 0x19
    1974:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1976:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1978:	9c 8d       	ldd	r25, Y+28	; 0x1c
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	4a ef       	ldi	r20, 0xFA	; 250
    1980:	54 e4       	ldi	r21, 0x44	; 68
    1982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	8d 8b       	std	Y+21, r24	; 0x15
    198c:	9e 8b       	std	Y+22, r25	; 0x16
    198e:	af 8b       	std	Y+23, r26	; 0x17
    1990:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1992:	6d 89       	ldd	r22, Y+21	; 0x15
    1994:	7e 89       	ldd	r23, Y+22	; 0x16
    1996:	8f 89       	ldd	r24, Y+23	; 0x17
    1998:	98 8d       	ldd	r25, Y+24	; 0x18
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	40 e8       	ldi	r20, 0x80	; 128
    19a0:	5f e3       	ldi	r21, 0x3F	; 63
    19a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19a6:	88 23       	and	r24, r24
    19a8:	2c f4       	brge	.+10     	; 0x19b4 <LCD_enuwritedate+0x84>
		__ticks = 1;
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	9c 8b       	std	Y+20, r25	; 0x14
    19b0:	8b 8b       	std	Y+19, r24	; 0x13
    19b2:	3f c0       	rjmp	.+126    	; 0x1a32 <LCD_enuwritedate+0x102>
	else if (__tmp > 65535)
    19b4:	6d 89       	ldd	r22, Y+21	; 0x15
    19b6:	7e 89       	ldd	r23, Y+22	; 0x16
    19b8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ba:	98 8d       	ldd	r25, Y+24	; 0x18
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	3f ef       	ldi	r19, 0xFF	; 255
    19c0:	4f e7       	ldi	r20, 0x7F	; 127
    19c2:	57 e4       	ldi	r21, 0x47	; 71
    19c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19c8:	18 16       	cp	r1, r24
    19ca:	4c f5       	brge	.+82     	; 0x1a1e <LCD_enuwritedate+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19cc:	69 8d       	ldd	r22, Y+25	; 0x19
    19ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e2       	ldi	r20, 0x20	; 32
    19da:	51 e4       	ldi	r21, 0x41	; 65
    19dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	bc 01       	movw	r22, r24
    19e6:	cd 01       	movw	r24, r26
    19e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	9c 8b       	std	Y+20, r25	; 0x14
    19f2:	8b 8b       	std	Y+19, r24	; 0x13
    19f4:	0f c0       	rjmp	.+30     	; 0x1a14 <LCD_enuwritedate+0xe4>
    19f6:	88 ec       	ldi	r24, 0xC8	; 200
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	9a 8b       	std	Y+18, r25	; 0x12
    19fc:	89 8b       	std	Y+17, r24	; 0x11
    19fe:	89 89       	ldd	r24, Y+17	; 0x11
    1a00:	9a 89       	ldd	r25, Y+18	; 0x12
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <LCD_enuwritedate+0xd2>
    1a06:	9a 8b       	std	Y+18, r25	; 0x12
    1a08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	9c 8b       	std	Y+20, r25	; 0x14
    1a12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a14:	8b 89       	ldd	r24, Y+19	; 0x13
    1a16:	9c 89       	ldd	r25, Y+20	; 0x14
    1a18:	00 97       	sbiw	r24, 0x00	; 0
    1a1a:	69 f7       	brne	.-38     	; 0x19f6 <LCD_enuwritedate+0xc6>
    1a1c:	14 c0       	rjmp	.+40     	; 0x1a46 <LCD_enuwritedate+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a20:	7e 89       	ldd	r23, Y+22	; 0x16
    1a22:	8f 89       	ldd	r24, Y+23	; 0x17
    1a24:	98 8d       	ldd	r25, Y+24	; 0x18
    1a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	9c 8b       	std	Y+20, r25	; 0x14
    1a30:	8b 8b       	std	Y+19, r24	; 0x13
    1a32:	8b 89       	ldd	r24, Y+19	; 0x13
    1a34:	9c 89       	ldd	r25, Y+20	; 0x14
    1a36:	98 8b       	std	Y+16, r25	; 0x10
    1a38:	8f 87       	std	Y+15, r24	; 0x0f
    1a3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a3c:	98 89       	ldd	r25, Y+16	; 0x10
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <LCD_enuwritedate+0x10e>
    1a42:	98 8b       	std	Y+16, r25	; 0x10
    1a44:	8f 87       	std	Y+15, r24	; 0x0f

	 	 _delay_ms(1) ;

	 	 /* clear en */
	 	 DIO_enuSetPinVAL(0, 2, 0);
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	62 e0       	ldi	r22, 0x02	; 2
    1a4a:	40 e0       	ldi	r20, 0x00	; 0
    1a4c:	0e 94 6c 07 	call	0xed8	; 0xed8 <DIO_enuSetPinVAL>
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	a0 e8       	ldi	r26, 0x80	; 128
    1a56:	bf e3       	ldi	r27, 0x3F	; 63
    1a58:	8b 87       	std	Y+11, r24	; 0x0b
    1a5a:	9c 87       	std	Y+12, r25	; 0x0c
    1a5c:	ad 87       	std	Y+13, r26	; 0x0d
    1a5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	4a ef       	ldi	r20, 0xFA	; 250
    1a6e:	54 e4       	ldi	r21, 0x44	; 68
    1a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	8f 83       	std	Y+7, r24	; 0x07
    1a7a:	98 87       	std	Y+8, r25	; 0x08
    1a7c:	a9 87       	std	Y+9, r26	; 0x09
    1a7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a80:	6f 81       	ldd	r22, Y+7	; 0x07
    1a82:	78 85       	ldd	r23, Y+8	; 0x08
    1a84:	89 85       	ldd	r24, Y+9	; 0x09
    1a86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e8       	ldi	r20, 0x80	; 128
    1a8e:	5f e3       	ldi	r21, 0x3F	; 63
    1a90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a94:	88 23       	and	r24, r24
    1a96:	2c f4       	brge	.+10     	; 0x1aa2 <LCD_enuwritedate+0x172>
		__ticks = 1;
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	9e 83       	std	Y+6, r25	; 0x06
    1a9e:	8d 83       	std	Y+5, r24	; 0x05
    1aa0:	3f c0       	rjmp	.+126    	; 0x1b20 <LCD_enuwritedate+0x1f0>
	else if (__tmp > 65535)
    1aa2:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa4:	78 85       	ldd	r23, Y+8	; 0x08
    1aa6:	89 85       	ldd	r24, Y+9	; 0x09
    1aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	3f ef       	ldi	r19, 0xFF	; 255
    1aae:	4f e7       	ldi	r20, 0x7F	; 127
    1ab0:	57 e4       	ldi	r21, 0x47	; 71
    1ab2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ab6:	18 16       	cp	r1, r24
    1ab8:	4c f5       	brge	.+82     	; 0x1b0c <LCD_enuwritedate+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1abc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1abe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	40 e2       	ldi	r20, 0x20	; 32
    1ac8:	51 e4       	ldi	r21, 0x41	; 65
    1aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	bc 01       	movw	r22, r24
    1ad4:	cd 01       	movw	r24, r26
    1ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	9e 83       	std	Y+6, r25	; 0x06
    1ae0:	8d 83       	std	Y+5, r24	; 0x05
    1ae2:	0f c0       	rjmp	.+30     	; 0x1b02 <LCD_enuwritedate+0x1d2>
    1ae4:	88 ec       	ldi	r24, 0xC8	; 200
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	9c 83       	std	Y+4, r25	; 0x04
    1aea:	8b 83       	std	Y+3, r24	; 0x03
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	9c 81       	ldd	r25, Y+4	; 0x04
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	f1 f7       	brne	.-4      	; 0x1af0 <LCD_enuwritedate+0x1c0>
    1af4:	9c 83       	std	Y+4, r25	; 0x04
    1af6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af8:	8d 81       	ldd	r24, Y+5	; 0x05
    1afa:	9e 81       	ldd	r25, Y+6	; 0x06
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	9e 83       	std	Y+6, r25	; 0x06
    1b00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b02:	8d 81       	ldd	r24, Y+5	; 0x05
    1b04:	9e 81       	ldd	r25, Y+6	; 0x06
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	69 f7       	brne	.-38     	; 0x1ae4 <LCD_enuwritedate+0x1b4>
    1b0a:	14 c0       	rjmp	.+40     	; 0x1b34 <LCD_enuwritedate+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b0e:	78 85       	ldd	r23, Y+8	; 0x08
    1b10:	89 85       	ldd	r24, Y+9	; 0x09
    1b12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	9e 83       	std	Y+6, r25	; 0x06
    1b1e:	8d 83       	std	Y+5, r24	; 0x05
    1b20:	8d 81       	ldd	r24, Y+5	; 0x05
    1b22:	9e 81       	ldd	r25, Y+6	; 0x06
    1b24:	9a 83       	std	Y+2, r25	; 0x02
    1b26:	89 83       	std	Y+1, r24	; 0x01
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	f1 f7       	brne	.-4      	; 0x1b2c <LCD_enuwritedate+0x1fc>
    1b30:	9a 83       	std	Y+2, r25	; 0x02
    1b32:	89 83       	std	Y+1, r24	; 0x01
	 	 _delay_ms(1) ;
	 	return ES_OK;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
 }
    1b36:	6d 96       	adiw	r28, 0x1d	; 29
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <setposition>:

 u8 static setposition(u8 r,u8 c)
{
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <setposition+0x6>
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <setposition+0x8>
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	8a 83       	std	Y+2, r24	; 0x02
    1b56:	6b 83       	std	Y+3, r22	; 0x03
 	if(r<2&& c<16)
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	82 30       	cpi	r24, 0x02	; 2
    1b5c:	c8 f4       	brcc	.+50     	; 0x1b90 <setposition+0x48>
    1b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b60:	80 31       	cpi	r24, 0x10	; 16
    1b62:	b0 f4       	brcc	.+44     	; 0x1b90 <setposition+0x48>
 	{
 	u8 address=r*0x40+c;
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	88 2f       	mov	r24, r24
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	00 24       	eor	r0, r0
    1b6c:	96 95       	lsr	r25
    1b6e:	87 95       	ror	r24
    1b70:	07 94       	ror	r0
    1b72:	96 95       	lsr	r25
    1b74:	87 95       	ror	r24
    1b76:	07 94       	ror	r0
    1b78:	98 2f       	mov	r25, r24
    1b7a:	80 2d       	mov	r24, r0
    1b7c:	98 2f       	mov	r25, r24
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	89 0f       	add	r24, r25
    1b82:	89 83       	std	Y+1, r24	; 0x01
 	address|=(1<<7);
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	80 68       	ori	r24, 0x80	; 128
    1b88:	89 83       	std	Y+1, r24	; 0x01
 	LCD_enusendcmd(address);
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	0e 94 8c 0b 	call	0x1718	; 0x1718 <LCD_enusendcmd>
 	}
 }
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	cf 91       	pop	r28
    1b9a:	df 91       	pop	r29
    1b9c:	08 95       	ret

00001b9e <LCD_enudisplaystring>:
 ES_t LCD_enudisplaystring(u8 *copy_string,u8 r,u8 c)
 {
    1b9e:	df 93       	push	r29
    1ba0:	cf 93       	push	r28
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <LCD_enudisplaystring+0x6>
    1ba4:	00 d0       	rcall	.+0      	; 0x1ba6 <LCD_enudisplaystring+0x8>
    1ba6:	00 d0       	rcall	.+0      	; 0x1ba8 <LCD_enudisplaystring+0xa>
    1ba8:	cd b7       	in	r28, 0x3d	; 61
    1baa:	de b7       	in	r29, 0x3e	; 62
    1bac:	9c 83       	std	Y+4, r25	; 0x04
    1bae:	8b 83       	std	Y+3, r24	; 0x03
    1bb0:	6d 83       	std	Y+5, r22	; 0x05
    1bb2:	4e 83       	std	Y+6, r20	; 0x06
 	setposition(r,c);
    1bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb6:	6e 81       	ldd	r22, Y+6	; 0x06
    1bb8:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <setposition>
 	u8 local_it=0;
    1bbc:	1a 82       	std	Y+2, r1	; 0x02
 	u8 LOCAL_u8inline=0;
    1bbe:	19 82       	std	Y+1, r1	; 0x01
    1bc0:	55 c0       	rjmp	.+170    	; 0x1c6c <LCD_enudisplaystring+0xce>
 	while(copy_string[local_it]!='\0'&&(16*r+c+local_it)<32)
 	{

 		if((16*r+c+local_it)<16)
    1bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc4:	88 2f       	mov	r24, r24
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	9c 01       	movw	r18, r24
    1bca:	22 95       	swap	r18
    1bcc:	32 95       	swap	r19
    1bce:	30 7f       	andi	r19, 0xF0	; 240
    1bd0:	32 27       	eor	r19, r18
    1bd2:	20 7f       	andi	r18, 0xF0	; 240
    1bd4:	32 27       	eor	r19, r18
    1bd6:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd8:	88 2f       	mov	r24, r24
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	28 0f       	add	r18, r24
    1bde:	39 1f       	adc	r19, r25
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	88 2f       	mov	r24, r24
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	82 0f       	add	r24, r18
    1be8:	93 1f       	adc	r25, r19
    1bea:	80 31       	cpi	r24, 0x10	; 16
    1bec:	91 05       	cpc	r25, r1
    1bee:	7c f4       	brge	.+30     	; 0x1c0e <LCD_enudisplaystring+0x70>
 		{
 			LCD_enuwritedate(copy_string[local_it]);
    1bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	e2 0f       	add	r30, r18
    1bfe:	f3 1f       	adc	r31, r19
    1c00:	80 81       	ld	r24, Z
    1c02:	0e 94 98 0c 	call	0x1930	; 0x1930 <LCD_enuwritedate>
 			local_it++;
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	8f 5f       	subi	r24, 0xFF	; 255
    1c0a:	8a 83       	std	Y+2, r24	; 0x02
    1c0c:	2f c0       	rjmp	.+94     	; 0x1c6c <LCD_enudisplaystring+0xce>
 		}
 		else if((16*r+c+local_it)==16&&LOCAL_u8inline==0)
    1c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c10:	88 2f       	mov	r24, r24
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	9c 01       	movw	r18, r24
    1c16:	22 95       	swap	r18
    1c18:	32 95       	swap	r19
    1c1a:	30 7f       	andi	r19, 0xF0	; 240
    1c1c:	32 27       	eor	r19, r18
    1c1e:	20 7f       	andi	r18, 0xF0	; 240
    1c20:	32 27       	eor	r19, r18
    1c22:	8e 81       	ldd	r24, Y+6	; 0x06
    1c24:	88 2f       	mov	r24, r24
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	28 0f       	add	r18, r24
    1c2a:	39 1f       	adc	r19, r25
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	88 2f       	mov	r24, r24
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	82 0f       	add	r24, r18
    1c34:	93 1f       	adc	r25, r19
    1c36:	80 31       	cpi	r24, 0x10	; 16
    1c38:	91 05       	cpc	r25, r1
    1c3a:	51 f4       	brne	.+20     	; 0x1c50 <LCD_enudisplaystring+0xb2>
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	88 23       	and	r24, r24
    1c40:	39 f4       	brne	.+14     	; 0x1c50 <LCD_enudisplaystring+0xb2>
 		{
 			setposition(1,0);
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <setposition>
 			LOCAL_u8inline=1;
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	89 83       	std	Y+1, r24	; 0x01
    1c4e:	0e c0       	rjmp	.+28     	; 0x1c6c <LCD_enudisplaystring+0xce>
 		}
 		else
 		{
 			LCD_enuwritedate(copy_string[local_it]);
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	e2 0f       	add	r30, r18
    1c5e:	f3 1f       	adc	r31, r19
    1c60:	80 81       	ld	r24, Z
    1c62:	0e 94 98 0c 	call	0x1930	; 0x1930 <LCD_enuwritedate>
 			local_it++;
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	8f 5f       	subi	r24, 0xFF	; 255
    1c6a:	8a 83       	std	Y+2, r24	; 0x02
 ES_t LCD_enudisplaystring(u8 *copy_string,u8 r,u8 c)
 {
 	setposition(r,c);
 	u8 local_it=0;
 	u8 LOCAL_u8inline=0;
 	while(copy_string[local_it]!='\0'&&(16*r+c+local_it)<32)
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	9c 81       	ldd	r25, Y+4	; 0x04
    1c76:	fc 01       	movw	r30, r24
    1c78:	e2 0f       	add	r30, r18
    1c7a:	f3 1f       	adc	r31, r19
    1c7c:	80 81       	ld	r24, Z
    1c7e:	88 23       	and	r24, r24
    1c80:	c1 f0       	breq	.+48     	; 0x1cb2 <LCD_enudisplaystring+0x114>
    1c82:	8d 81       	ldd	r24, Y+5	; 0x05
    1c84:	88 2f       	mov	r24, r24
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	9c 01       	movw	r18, r24
    1c8a:	22 95       	swap	r18
    1c8c:	32 95       	swap	r19
    1c8e:	30 7f       	andi	r19, 0xF0	; 240
    1c90:	32 27       	eor	r19, r18
    1c92:	20 7f       	andi	r18, 0xF0	; 240
    1c94:	32 27       	eor	r19, r18
    1c96:	8e 81       	ldd	r24, Y+6	; 0x06
    1c98:	88 2f       	mov	r24, r24
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	28 0f       	add	r18, r24
    1c9e:	39 1f       	adc	r19, r25
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	88 2f       	mov	r24, r24
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	82 0f       	add	r24, r18
    1ca8:	93 1f       	adc	r25, r19
    1caa:	80 32       	cpi	r24, 0x20	; 32
    1cac:	91 05       	cpc	r25, r1
    1cae:	0c f4       	brge	.+2      	; 0x1cb2 <LCD_enudisplaystring+0x114>
    1cb0:	88 cf       	rjmp	.-240    	; 0x1bc2 <LCD_enudisplaystring+0x24>
 			local_it++;
 		}

 	}

 	return ES_OK;
    1cb2:	81 e0       	ldi	r24, 0x01	; 1

 }
    1cb4:	26 96       	adiw	r28, 0x06	; 6
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	de bf       	out	0x3e, r29	; 62
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	cd bf       	out	0x3d, r28	; 61
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	08 95       	ret

00001cc6 <storechar>:


 ES_t storechar(u8 index, u8 *pattern)
 {
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <storechar+0x6>
    1ccc:	00 d0       	rcall	.+0      	; 0x1cce <storechar+0x8>
    1cce:	00 d0       	rcall	.+0      	; 0x1cd0 <storechar+0xa>
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
    1cd4:	8c 83       	std	Y+4, r24	; 0x04
    1cd6:	7e 83       	std	Y+6, r23	; 0x06
    1cd8:	6d 83       	std	Y+5, r22	; 0x05
 	if(index>=0&&index<8)
    1cda:	8c 81       	ldd	r24, Y+4	; 0x04
    1cdc:	88 30       	cpi	r24, 0x08	; 8
    1cde:	50 f5       	brcc	.+84     	; 0x1d34 <storechar+0x6e>
 	{
 	u8 address=index*8;
    1ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce2:	88 2f       	mov	r24, r24
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	88 0f       	add	r24, r24
    1ce8:	99 1f       	adc	r25, r25
    1cea:	88 0f       	add	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	88 0f       	add	r24, r24
    1cf0:	99 1f       	adc	r25, r25
    1cf2:	8b 83       	std	Y+3, r24	; 0x03
 	address|=(1<<7);
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	80 68       	ori	r24, 0x80	; 128
    1cf8:	8b 83       	std	Y+3, r24	; 0x03
 	//go to cg ram
 	LCD_enusendcmd(address);
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	0e 94 8c 0b 	call	0x1718	; 0x1718 <LCD_enusendcmd>
 	for(int i=0;i<8;i++)
    1d00:	1a 82       	std	Y+2, r1	; 0x02
    1d02:	19 82       	std	Y+1, r1	; 0x01
    1d04:	0f c0       	rjmp	.+30     	; 0x1d24 <storechar+0x5e>
 	{
 		LCD_enuwritedate(pattern[i]);
    1d06:	29 81       	ldd	r18, Y+1	; 0x01
    1d08:	3a 81       	ldd	r19, Y+2	; 0x02
    1d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0e:	fc 01       	movw	r30, r24
    1d10:	e2 0f       	add	r30, r18
    1d12:	f3 1f       	adc	r31, r19
    1d14:	80 81       	ld	r24, Z
    1d16:	0e 94 98 0c 	call	0x1930	; 0x1930 <LCD_enuwritedate>
 	{
 	u8 address=index*8;
 	address|=(1<<7);
 	//go to cg ram
 	LCD_enusendcmd(address);
 	for(int i=0;i<8;i++)
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
    1d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1e:	01 96       	adiw	r24, 0x01	; 1
    1d20:	9a 83       	std	Y+2, r25	; 0x02
    1d22:	89 83       	std	Y+1, r24	; 0x01
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	9a 81       	ldd	r25, Y+2	; 0x02
    1d28:	88 30       	cpi	r24, 0x08	; 8
    1d2a:	91 05       	cpc	r25, r1
    1d2c:	64 f3       	brlt	.-40     	; 0x1d06 <storechar+0x40>
 	{
 		LCD_enuwritedate(pattern[i]);
 	}
 	//return to ddram
 	LCD_enusendcmd(0x02);
    1d2e:	82 e0       	ldi	r24, 0x02	; 2
    1d30:	0e 94 8c 0b 	call	0x1718	; 0x1718 <LCD_enusendcmd>
 	}
 	return ES_OK;
    1d34:	81 e0       	ldi	r24, 0x01	; 1
 }
    1d36:	26 96       	adiw	r28, 0x06	; 6
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <dispaystoredchar>:

 ES_t dispaystoredchar(u8 index, u8 r, u8 c)
 {
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <dispaystoredchar+0x6>
    1d4e:	00 d0       	rcall	.+0      	; 0x1d50 <dispaystoredchar+0x8>
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
    1d54:	89 83       	std	Y+1, r24	; 0x01
    1d56:	6a 83       	std	Y+2, r22	; 0x02
    1d58:	4b 83       	std	Y+3, r20	; 0x03
 	setposition(r,c);
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	6b 81       	ldd	r22, Y+3	; 0x03
    1d5e:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <setposition>
 	LCD_enuwritedate(index);
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	0e 94 98 0c 	call	0x1930	; 0x1930 <LCD_enuwritedate>
 }
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	cf 91       	pop	r28
    1d72:	df 91       	pop	r29
    1d74:	08 95       	ret

00001d76 <Private_u16GetPower>:

 static u16 Private_u16GetPower(u8 Copy_u8Number1, u8 Copy_u8Number2)
 {
    1d76:	df 93       	push	r29
    1d78:	cf 93       	push	r28
    1d7a:	00 d0       	rcall	.+0      	; 0x1d7c <Private_u16GetPower+0x6>
    1d7c:	00 d0       	rcall	.+0      	; 0x1d7e <Private_u16GetPower+0x8>
    1d7e:	0f 92       	push	r0
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
    1d84:	8c 83       	std	Y+4, r24	; 0x04
    1d86:	6d 83       	std	Y+5, r22	; 0x05
 	u16 Local_u16Result = 1;
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	9b 83       	std	Y+3, r25	; 0x03
    1d8e:	8a 83       	std	Y+2, r24	; 0x02
 	u8 Local_u8Counter = 0;
    1d90:	19 82       	std	Y+1, r1	; 0x01

 	for(Local_u8Counter = 0; Local_u8Counter < Copy_u8Number2; Local_u8Counter++)
    1d92:	19 82       	std	Y+1, r1	; 0x01
    1d94:	12 c0       	rjmp	.+36     	; 0x1dba <Private_u16GetPower+0x44>
 	{
 		Local_u16Result *= Copy_u8Number1;
    1d96:	8c 81       	ldd	r24, Y+4	; 0x04
    1d98:	28 2f       	mov	r18, r24
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1da0:	ac 01       	movw	r20, r24
    1da2:	42 9f       	mul	r20, r18
    1da4:	c0 01       	movw	r24, r0
    1da6:	43 9f       	mul	r20, r19
    1da8:	90 0d       	add	r25, r0
    1daa:	52 9f       	mul	r21, r18
    1dac:	90 0d       	add	r25, r0
    1dae:	11 24       	eor	r1, r1
    1db0:	9b 83       	std	Y+3, r25	; 0x03
    1db2:	8a 83       	std	Y+2, r24	; 0x02
 static u16 Private_u16GetPower(u8 Copy_u8Number1, u8 Copy_u8Number2)
 {
 	u16 Local_u16Result = 1;
 	u8 Local_u8Counter = 0;

 	for(Local_u8Counter = 0; Local_u8Counter < Copy_u8Number2; Local_u8Counter++)
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	8f 5f       	subi	r24, 0xFF	; 255
    1db8:	89 83       	std	Y+1, r24	; 0x01
    1dba:	99 81       	ldd	r25, Y+1	; 0x01
    1dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbe:	98 17       	cp	r25, r24
    1dc0:	50 f3       	brcs	.-44     	; 0x1d96 <Private_u16GetPower+0x20>
 	{
 		Local_u16Result *= Copy_u8Number1;
 	}
 	return Local_u16Result;
    1dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc4:	9b 81       	ldd	r25, Y+3	; 0x03
 }
    1dc6:	0f 90       	pop	r0
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	08 95       	ret

00001dd6 <LCD_voidWriteNumber>:

 ES_t LCD_voidWriteNumber(u16 Copy_u16Number)
 {
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
    1dde:	28 97       	sbiw	r28, 0x08	; 8
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	f8 94       	cli
    1de4:	de bf       	out	0x3e, r29	; 62
    1de6:	0f be       	out	0x3f, r0	; 63
    1de8:	cd bf       	out	0x3d, r28	; 61
    1dea:	9f 83       	std	Y+7, r25	; 0x07
    1dec:	8e 83       	std	Y+6, r24	; 0x06
 	u8 Local_u8Counter = 0, Local_u8Digits = 0, Local_u8Current;
    1dee:	1d 82       	std	Y+5, r1	; 0x05
    1df0:	1c 82       	std	Y+4, r1	; 0x04
 	u16 Local_u16CopyNumber = Copy_u16Number;
    1df2:	8e 81       	ldd	r24, Y+6	; 0x06
    1df4:	9f 81       	ldd	r25, Y+7	; 0x07
    1df6:	9a 83       	std	Y+2, r25	; 0x02
    1df8:	89 83       	std	Y+1, r24	; 0x01

 	if(0 == Copy_u16Number)
    1dfa:	8e 81       	ldd	r24, Y+6	; 0x06
    1dfc:	9f 81       	ldd	r25, Y+7	; 0x07
    1dfe:	00 97       	sbiw	r24, 0x00	; 0
    1e00:	89 f4       	brne	.+34     	; 0x1e24 <LCD_voidWriteNumber+0x4e>
 	{
 		LCD_enuwritedate('0');
    1e02:	80 e3       	ldi	r24, 0x30	; 48
    1e04:	0e 94 98 0c 	call	0x1930	; 0x1930 <LCD_enuwritedate>
    1e08:	48 c0       	rjmp	.+144    	; 0x1e9a <LCD_voidWriteNumber+0xc4>
 	}
 	else
 	{
 		while(Local_u16CopyNumber)
 		{
 			Local_u16CopyNumber /= 10;
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0e:	2a e0       	ldi	r18, 0x0A	; 10
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	b9 01       	movw	r22, r18
    1e14:	0e 94 14 14 	call	0x2828	; 0x2828 <__udivmodhi4>
    1e18:	cb 01       	movw	r24, r22
    1e1a:	9a 83       	std	Y+2, r25	; 0x02
    1e1c:	89 83       	std	Y+1, r24	; 0x01
 			Local_u8Digits++;
    1e1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e20:	8f 5f       	subi	r24, 0xFF	; 255
    1e22:	8c 83       	std	Y+4, r24	; 0x04
 	{
 		LCD_enuwritedate('0');
 	}
 	else
 	{
 		while(Local_u16CopyNumber)
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	9a 81       	ldd	r25, Y+2	; 0x02
    1e28:	00 97       	sbiw	r24, 0x00	; 0
    1e2a:	79 f7       	brne	.-34     	; 0x1e0a <LCD_voidWriteNumber+0x34>
 		{
 			Local_u16CopyNumber /= 10;
 			Local_u8Digits++;
 		}
 		Local_u16CopyNumber = Copy_u16Number;
    1e2c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e2e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e30:	9a 83       	std	Y+2, r25	; 0x02
    1e32:	89 83       	std	Y+1, r24	; 0x01

 		for(Local_u8Counter = 0; Local_u8Counter < Local_u8Digits; Local_u8Counter++)
    1e34:	1d 82       	std	Y+5, r1	; 0x05
    1e36:	2d c0       	rjmp	.+90     	; 0x1e92 <LCD_voidWriteNumber+0xbc>
 		{
 			Local_u8Current = Local_u16CopyNumber / (Private_u16GetPower(10, Local_u8Digits - 1 - Local_u8Counter));
    1e38:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3c:	29 2f       	mov	r18, r25
    1e3e:	28 1b       	sub	r18, r24
    1e40:	82 2f       	mov	r24, r18
    1e42:	98 2f       	mov	r25, r24
    1e44:	91 50       	subi	r25, 0x01	; 1
    1e46:	8a e0       	ldi	r24, 0x0A	; 10
    1e48:	69 2f       	mov	r22, r25
    1e4a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <Private_u16GetPower>
    1e4e:	9c 01       	movw	r18, r24
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	9a 81       	ldd	r25, Y+2	; 0x02
    1e54:	b9 01       	movw	r22, r18
    1e56:	0e 94 14 14 	call	0x2828	; 0x2828 <__udivmodhi4>
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	8b 83       	std	Y+3, r24	; 0x03
 			LCD_enuwritedate(Local_u8Current + '0');
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	80 5d       	subi	r24, 0xD0	; 208
    1e62:	0e 94 98 0c 	call	0x1930	; 0x1930 <LCD_enuwritedate>
 			Local_u16CopyNumber %= (Private_u16GetPower(10, Local_u8Digits - 1 - Local_u8Counter));
    1e66:	9c 81       	ldd	r25, Y+4	; 0x04
    1e68:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6a:	29 2f       	mov	r18, r25
    1e6c:	28 1b       	sub	r18, r24
    1e6e:	82 2f       	mov	r24, r18
    1e70:	98 2f       	mov	r25, r24
    1e72:	91 50       	subi	r25, 0x01	; 1
    1e74:	8a e0       	ldi	r24, 0x0A	; 10
    1e76:	69 2f       	mov	r22, r25
    1e78:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <Private_u16GetPower>
    1e7c:	9c 01       	movw	r18, r24
    1e7e:	89 81       	ldd	r24, Y+1	; 0x01
    1e80:	9a 81       	ldd	r25, Y+2	; 0x02
    1e82:	b9 01       	movw	r22, r18
    1e84:	0e 94 14 14 	call	0x2828	; 0x2828 <__udivmodhi4>
    1e88:	9a 83       	std	Y+2, r25	; 0x02
    1e8a:	89 83       	std	Y+1, r24	; 0x01
 			Local_u16CopyNumber /= 10;
 			Local_u8Digits++;
 		}
 		Local_u16CopyNumber = Copy_u16Number;

 		for(Local_u8Counter = 0; Local_u8Counter < Local_u8Digits; Local_u8Counter++)
    1e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8e:	8f 5f       	subi	r24, 0xFF	; 255
    1e90:	8d 83       	std	Y+5, r24	; 0x05
    1e92:	9d 81       	ldd	r25, Y+5	; 0x05
    1e94:	8c 81       	ldd	r24, Y+4	; 0x04
    1e96:	98 17       	cp	r25, r24
    1e98:	78 f2       	brcs	.-98     	; 0x1e38 <LCD_voidWriteNumber+0x62>
 			Local_u8Current = Local_u16CopyNumber / (Private_u16GetPower(10, Local_u8Digits - 1 - Local_u8Counter));
 			LCD_enuwritedate(Local_u8Current + '0');
 			Local_u16CopyNumber %= (Private_u16GetPower(10, Local_u8Digits - 1 - Local_u8Counter));
 		}
 	}
 }
    1e9a:	28 96       	adiw	r28, 0x08	; 8
    1e9c:	0f b6       	in	r0, 0x3f	; 63
    1e9e:	f8 94       	cli
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	cd bf       	out	0x3d, r28	; 61
    1ea6:	cf 91       	pop	r28
    1ea8:	df 91       	pop	r29
    1eaa:	08 95       	ret

00001eac <Keypad_enuInit>:
#include"KEYPAD_priv.h"
#include"KEYPAD_config.h"



ES_t Keypad_enuInit(void){
    1eac:	df 93       	push	r29
    1eae:	cf 93       	push	r28
    1eb0:	0f 92       	push	r0
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62

	DIO_enuSetPinDIR(C1_PORT,C1_PIN, DIO_PIN_OUTPUT);
    1eb6:	82 e0       	ldi	r24, 0x02	; 2
    1eb8:	64 e0       	ldi	r22, 0x04	; 4
    1eba:	41 e0       	ldi	r20, 0x01	; 1
    1ebc:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_enuSetPinDIR>
	DIO_enuSetPinDIR(C2_PORT,C2_PIN, DIO_PIN_OUTPUT);
    1ec0:	82 e0       	ldi	r24, 0x02	; 2
    1ec2:	65 e0       	ldi	r22, 0x05	; 5
    1ec4:	41 e0       	ldi	r20, 0x01	; 1
    1ec6:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_enuSetPinDIR>
	DIO_enuSetPinDIR(C3_PORT,C3_PIN, DIO_PIN_OUTPUT);
    1eca:	82 e0       	ldi	r24, 0x02	; 2
    1ecc:	66 e0       	ldi	r22, 0x06	; 6
    1ece:	41 e0       	ldi	r20, 0x01	; 1
    1ed0:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_enuSetPinDIR>
	DIO_enuSetPinDIR(C4_PORT,C4_PIN, DIO_PIN_OUTPUT);
    1ed4:	82 e0       	ldi	r24, 0x02	; 2
    1ed6:	67 e0       	ldi	r22, 0x07	; 7
    1ed8:	41 e0       	ldi	r20, 0x01	; 1
    1eda:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_enuSetPinDIR>

	DIO_enuSetPinVAL(C1_PORT,C1_PIN, DIO_PIN_HIGH);
    1ede:	82 e0       	ldi	r24, 0x02	; 2
    1ee0:	64 e0       	ldi	r22, 0x04	; 4
    1ee2:	41 e0       	ldi	r20, 0x01	; 1
    1ee4:	0e 94 6c 07 	call	0xed8	; 0xed8 <DIO_enuSetPinVAL>
	DIO_enuSetPinVAL(C2_PORT,C2_PIN, DIO_PIN_HIGH);
    1ee8:	82 e0       	ldi	r24, 0x02	; 2
    1eea:	65 e0       	ldi	r22, 0x05	; 5
    1eec:	41 e0       	ldi	r20, 0x01	; 1
    1eee:	0e 94 6c 07 	call	0xed8	; 0xed8 <DIO_enuSetPinVAL>
	DIO_enuSetPinVAL(C3_PORT,C3_PIN, DIO_PIN_HIGH);
    1ef2:	82 e0       	ldi	r24, 0x02	; 2
    1ef4:	66 e0       	ldi	r22, 0x06	; 6
    1ef6:	41 e0       	ldi	r20, 0x01	; 1
    1ef8:	0e 94 6c 07 	call	0xed8	; 0xed8 <DIO_enuSetPinVAL>
	DIO_enuSetPinVAL(C4_PORT,C4_PIN, DIO_PIN_HIGH);
    1efc:	82 e0       	ldi	r24, 0x02	; 2
    1efe:	67 e0       	ldi	r22, 0x07	; 7
    1f00:	41 e0       	ldi	r20, 0x01	; 1
    1f02:	0e 94 6c 07 	call	0xed8	; 0xed8 <DIO_enuSetPinVAL>


	DIO_enuSetPinDIR(R1_PORT,R1_PIN, DIO_PIN_INPUT);
    1f06:	82 e0       	ldi	r24, 0x02	; 2
    1f08:	60 e0       	ldi	r22, 0x00	; 0
    1f0a:	40 e0       	ldi	r20, 0x00	; 0
    1f0c:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_enuSetPinDIR>
	DIO_enuSetPinDIR(R2_PORT,R2_PIN, DIO_PIN_INPUT);
    1f10:	82 e0       	ldi	r24, 0x02	; 2
    1f12:	61 e0       	ldi	r22, 0x01	; 1
    1f14:	40 e0       	ldi	r20, 0x00	; 0
    1f16:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_enuSetPinDIR>
	DIO_enuSetPinDIR(R3_PORT,R3_PIN, DIO_PIN_INPUT);
    1f1a:	82 e0       	ldi	r24, 0x02	; 2
    1f1c:	62 e0       	ldi	r22, 0x02	; 2
    1f1e:	40 e0       	ldi	r20, 0x00	; 0
    1f20:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_enuSetPinDIR>
	DIO_enuSetPinDIR(R4_PORT,R4_PIN, DIO_PIN_INPUT);
    1f24:	82 e0       	ldi	r24, 0x02	; 2
    1f26:	63 e0       	ldi	r22, 0x03	; 3
    1f28:	40 e0       	ldi	r20, 0x00	; 0
    1f2a:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_enuSetPinDIR>

	DIO_enuSetPinVAL(R1_PORT,R1_PIN, DIO_PULL_UP);
    1f2e:	82 e0       	ldi	r24, 0x02	; 2
    1f30:	60 e0       	ldi	r22, 0x00	; 0
    1f32:	41 e0       	ldi	r20, 0x01	; 1
    1f34:	0e 94 6c 07 	call	0xed8	; 0xed8 <DIO_enuSetPinVAL>
	DIO_enuSetPinVAL(R2_PORT,R2_PIN, DIO_PULL_UP);
    1f38:	82 e0       	ldi	r24, 0x02	; 2
    1f3a:	61 e0       	ldi	r22, 0x01	; 1
    1f3c:	41 e0       	ldi	r20, 0x01	; 1
    1f3e:	0e 94 6c 07 	call	0xed8	; 0xed8 <DIO_enuSetPinVAL>
	DIO_enuSetPinVAL(R3_PORT,R3_PIN, DIO_PULL_UP);
    1f42:	82 e0       	ldi	r24, 0x02	; 2
    1f44:	62 e0       	ldi	r22, 0x02	; 2
    1f46:	41 e0       	ldi	r20, 0x01	; 1
    1f48:	0e 94 6c 07 	call	0xed8	; 0xed8 <DIO_enuSetPinVAL>
	DIO_enuSetPinVAL(R4_PORT,R4_PIN, DIO_PULL_UP);
    1f4c:	82 e0       	ldi	r24, 0x02	; 2
    1f4e:	63 e0       	ldi	r22, 0x03	; 3
    1f50:	41 e0       	ldi	r20, 0x01	; 1
    1f52:	0e 94 6c 07 	call	0xed8	; 0xed8 <DIO_enuSetPinVAL>
}
    1f56:	0f 90       	pop	r0
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey(u8 * Copy_pu8KeyValue)
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	e8 97       	sbiw	r28, 0x38	; 56
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	f8 94       	cli
    1f6c:	de bf       	out	0x3e, r29	; 62
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	cd bf       	out	0x3d, r28	; 61
    1f72:	9b ab       	std	Y+51, r25	; 0x33
    1f74:	8a ab       	std	Y+50, r24	; 0x32

  u8 local_u8C_Iterator;

  u8 local_u8PIN_VAL;

  u8 Local_Au8KeyValues[ROWS_NUM][COLS_NUM] = KEYS_VALUES;
    1f76:	ce 01       	movw	r24, r28
    1f78:	42 96       	adiw	r24, 0x12	; 18
    1f7a:	9d ab       	std	Y+53, r25	; 0x35
    1f7c:	8c ab       	std	Y+52, r24	; 0x34
    1f7e:	e7 e8       	ldi	r30, 0x87	; 135
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	ff ab       	std	Y+55, r31	; 0x37
    1f84:	ee ab       	std	Y+54, r30	; 0x36
    1f86:	f0 e1       	ldi	r31, 0x10	; 16
    1f88:	f8 af       	std	Y+56, r31	; 0x38
    1f8a:	ee a9       	ldd	r30, Y+54	; 0x36
    1f8c:	ff a9       	ldd	r31, Y+55	; 0x37
    1f8e:	00 80       	ld	r0, Z
    1f90:	8e a9       	ldd	r24, Y+54	; 0x36
    1f92:	9f a9       	ldd	r25, Y+55	; 0x37
    1f94:	01 96       	adiw	r24, 0x01	; 1
    1f96:	9f ab       	std	Y+55, r25	; 0x37
    1f98:	8e ab       	std	Y+54, r24	; 0x36
    1f9a:	ec a9       	ldd	r30, Y+52	; 0x34
    1f9c:	fd a9       	ldd	r31, Y+53	; 0x35
    1f9e:	00 82       	st	Z, r0
    1fa0:	8c a9       	ldd	r24, Y+52	; 0x34
    1fa2:	9d a9       	ldd	r25, Y+53	; 0x35
    1fa4:	01 96       	adiw	r24, 0x01	; 1
    1fa6:	9d ab       	std	Y+53, r25	; 0x35
    1fa8:	8c ab       	std	Y+52, r24	; 0x34
    1faa:	98 ad       	ldd	r25, Y+56	; 0x38
    1fac:	91 50       	subi	r25, 0x01	; 1
    1fae:	98 af       	std	Y+56, r25	; 0x38
    1fb0:	e8 ad       	ldd	r30, Y+56	; 0x38
    1fb2:	ee 23       	and	r30, r30
    1fb4:	51 f7       	brne	.-44     	; 0x1f8a <Keypad_enuGetPressedKey+0x2c>

  u8 local_Au8R_PORT[ROWS_NUM]={R1_PORT,R2_PORT,R3_PORT,R4_PORT};
    1fb6:	82 e0       	ldi	r24, 0x02	; 2
    1fb8:	8a a3       	std	Y+34, r24	; 0x22
    1fba:	82 e0       	ldi	r24, 0x02	; 2
    1fbc:	8b a3       	std	Y+35, r24	; 0x23
    1fbe:	82 e0       	ldi	r24, 0x02	; 2
    1fc0:	8c a3       	std	Y+36, r24	; 0x24
    1fc2:	82 e0       	ldi	r24, 0x02	; 2
    1fc4:	8d a3       	std	Y+37, r24	; 0x25
  u8 local_Au8C_PORT[ROWS_NUM]={C1_PORT,C2_PORT,C3_PORT,C4_PORT};
    1fc6:	82 e0       	ldi	r24, 0x02	; 2
    1fc8:	8e a3       	std	Y+38, r24	; 0x26
    1fca:	82 e0       	ldi	r24, 0x02	; 2
    1fcc:	8f a3       	std	Y+39, r24	; 0x27
    1fce:	82 e0       	ldi	r24, 0x02	; 2
    1fd0:	88 a7       	std	Y+40, r24	; 0x28
    1fd2:	82 e0       	ldi	r24, 0x02	; 2
    1fd4:	89 a7       	std	Y+41, r24	; 0x29
  u8 local_Au8R_PIN[ROWS_NUM]={R1_PIN,R2_PIN,R3_PIN,R4_PIN};
    1fd6:	1a a6       	std	Y+42, r1	; 0x2a
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	8b a7       	std	Y+43, r24	; 0x2b
    1fdc:	82 e0       	ldi	r24, 0x02	; 2
    1fde:	8c a7       	std	Y+44, r24	; 0x2c
    1fe0:	83 e0       	ldi	r24, 0x03	; 3
    1fe2:	8d a7       	std	Y+45, r24	; 0x2d
  u8 local_Au8C_PIN[ROWS_NUM]={C1_PIN,C2_PIN,C3_PIN,C4_PIN};
    1fe4:	84 e0       	ldi	r24, 0x04	; 4
    1fe6:	8e a7       	std	Y+46, r24	; 0x2e
    1fe8:	85 e0       	ldi	r24, 0x05	; 5
    1fea:	8f a7       	std	Y+47, r24	; 0x2f
    1fec:	86 e0       	ldi	r24, 0x06	; 6
    1fee:	88 ab       	std	Y+48, r24	; 0x30
    1ff0:	87 e0       	ldi	r24, 0x07	; 7
    1ff2:	89 ab       	std	Y+49, r24	; 0x31


while(1){
  for(local_u8C_Iterator=0;local_u8C_Iterator<COLS_NUM;local_u8C_Iterator++)
    1ff4:	1f 86       	std	Y+15, r1	; 0x0f
    1ff6:	3d c1       	rjmp	.+634    	; 0x2272 <Keypad_enuGetPressedKey+0x314>
  {
	  DIO_enuSetPinVAL(local_Au8C_PORT[local_u8C_Iterator],local_Au8C_PIN[local_u8C_Iterator],DIO_PIN_LOW);
    1ff8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ffa:	28 2f       	mov	r18, r24
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	ce 01       	movw	r24, r28
    2000:	86 96       	adiw	r24, 0x26	; 38
    2002:	fc 01       	movw	r30, r24
    2004:	e2 0f       	add	r30, r18
    2006:	f3 1f       	adc	r31, r19
    2008:	40 81       	ld	r20, Z
    200a:	8f 85       	ldd	r24, Y+15	; 0x0f
    200c:	28 2f       	mov	r18, r24
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	ce 01       	movw	r24, r28
    2012:	8e 96       	adiw	r24, 0x2e	; 46
    2014:	fc 01       	movw	r30, r24
    2016:	e2 0f       	add	r30, r18
    2018:	f3 1f       	adc	r31, r19
    201a:	90 81       	ld	r25, Z
    201c:	84 2f       	mov	r24, r20
    201e:	69 2f       	mov	r22, r25
    2020:	40 e0       	ldi	r20, 0x00	; 0
    2022:	0e 94 6c 07 	call	0xed8	; 0xed8 <DIO_enuSetPinVAL>

	  for(local_u8R_Iterator=0;local_u8R_Iterator<ROWS_NUM;local_u8R_Iterator++)
    2026:	18 8a       	std	Y+16, r1	; 0x10
    2028:	06 c1       	rjmp	.+524    	; 0x2236 <Keypad_enuGetPressedKey+0x2d8>
	  {
		  DIO_enuGetPinval(local_Au8R_PORT[local_u8R_Iterator],local_Au8R_PIN[local_u8R_Iterator],&local_u8PIN_VAL);
    202a:	88 89       	ldd	r24, Y+16	; 0x10
    202c:	28 2f       	mov	r18, r24
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	ce 01       	movw	r24, r28
    2032:	82 96       	adiw	r24, 0x22	; 34
    2034:	fc 01       	movw	r30, r24
    2036:	e2 0f       	add	r30, r18
    2038:	f3 1f       	adc	r31, r19
    203a:	40 81       	ld	r20, Z
    203c:	88 89       	ldd	r24, Y+16	; 0x10
    203e:	28 2f       	mov	r18, r24
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	ce 01       	movw	r24, r28
    2044:	8a 96       	adiw	r24, 0x2a	; 42
    2046:	fc 01       	movw	r30, r24
    2048:	e2 0f       	add	r30, r18
    204a:	f3 1f       	adc	r31, r19
    204c:	90 81       	ld	r25, Z
    204e:	9e 01       	movw	r18, r28
    2050:	2f 5e       	subi	r18, 0xEF	; 239
    2052:	3f 4f       	sbci	r19, 0xFF	; 255
    2054:	84 2f       	mov	r24, r20
    2056:	69 2f       	mov	r22, r25
    2058:	a9 01       	movw	r20, r18
    205a:	0e 94 0a 09 	call	0x1214	; 0x1214 <DIO_enuGetPinval>
		  if (local_u8PIN_VAL==0)
    205e:	89 89       	ldd	r24, Y+17	; 0x11
    2060:	88 23       	and	r24, r24
    2062:	09 f0       	breq	.+2      	; 0x2066 <Keypad_enuGetPressedKey+0x108>
    2064:	e5 c0       	rjmp	.+458    	; 0x2230 <Keypad_enuGetPressedKey+0x2d2>
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	a0 e2       	ldi	r26, 0x20	; 32
    206c:	b1 e4       	ldi	r27, 0x41	; 65
    206e:	8b 87       	std	Y+11, r24	; 0x0b
    2070:	9c 87       	std	Y+12, r25	; 0x0c
    2072:	ad 87       	std	Y+13, r26	; 0x0d
    2074:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2076:	6b 85       	ldd	r22, Y+11	; 0x0b
    2078:	7c 85       	ldd	r23, Y+12	; 0x0c
    207a:	8d 85       	ldd	r24, Y+13	; 0x0d
    207c:	9e 85       	ldd	r25, Y+14	; 0x0e
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	4a ef       	ldi	r20, 0xFA	; 250
    2084:	54 e4       	ldi	r21, 0x44	; 68
    2086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	8f 83       	std	Y+7, r24	; 0x07
    2090:	98 87       	std	Y+8, r25	; 0x08
    2092:	a9 87       	std	Y+9, r26	; 0x09
    2094:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2096:	6f 81       	ldd	r22, Y+7	; 0x07
    2098:	78 85       	ldd	r23, Y+8	; 0x08
    209a:	89 85       	ldd	r24, Y+9	; 0x09
    209c:	9a 85       	ldd	r25, Y+10	; 0x0a
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	40 e8       	ldi	r20, 0x80	; 128
    20a4:	5f e3       	ldi	r21, 0x3F	; 63
    20a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20aa:	88 23       	and	r24, r24
    20ac:	2c f4       	brge	.+10     	; 0x20b8 <Keypad_enuGetPressedKey+0x15a>
		__ticks = 1;
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	9e 83       	std	Y+6, r25	; 0x06
    20b4:	8d 83       	std	Y+5, r24	; 0x05
    20b6:	3f c0       	rjmp	.+126    	; 0x2136 <Keypad_enuGetPressedKey+0x1d8>
	else if (__tmp > 65535)
    20b8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ba:	78 85       	ldd	r23, Y+8	; 0x08
    20bc:	89 85       	ldd	r24, Y+9	; 0x09
    20be:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	3f ef       	ldi	r19, 0xFF	; 255
    20c4:	4f e7       	ldi	r20, 0x7F	; 127
    20c6:	57 e4       	ldi	r21, 0x47	; 71
    20c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20cc:	18 16       	cp	r1, r24
    20ce:	4c f5       	brge	.+82     	; 0x2122 <Keypad_enuGetPressedKey+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e2       	ldi	r20, 0x20	; 32
    20de:	51 e4       	ldi	r21, 0x41	; 65
    20e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	bc 01       	movw	r22, r24
    20ea:	cd 01       	movw	r24, r26
    20ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	9e 83       	std	Y+6, r25	; 0x06
    20f6:	8d 83       	std	Y+5, r24	; 0x05
    20f8:	0f c0       	rjmp	.+30     	; 0x2118 <Keypad_enuGetPressedKey+0x1ba>
    20fa:	88 ec       	ldi	r24, 0xC8	; 200
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	9c 83       	std	Y+4, r25	; 0x04
    2100:	8b 83       	std	Y+3, r24	; 0x03
    2102:	8b 81       	ldd	r24, Y+3	; 0x03
    2104:	9c 81       	ldd	r25, Y+4	; 0x04
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	f1 f7       	brne	.-4      	; 0x2106 <Keypad_enuGetPressedKey+0x1a8>
    210a:	9c 83       	std	Y+4, r25	; 0x04
    210c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    210e:	8d 81       	ldd	r24, Y+5	; 0x05
    2110:	9e 81       	ldd	r25, Y+6	; 0x06
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	9e 83       	std	Y+6, r25	; 0x06
    2116:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2118:	8d 81       	ldd	r24, Y+5	; 0x05
    211a:	9e 81       	ldd	r25, Y+6	; 0x06
    211c:	00 97       	sbiw	r24, 0x00	; 0
    211e:	69 f7       	brne	.-38     	; 0x20fa <Keypad_enuGetPressedKey+0x19c>
    2120:	14 c0       	rjmp	.+40     	; 0x214a <Keypad_enuGetPressedKey+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2122:	6f 81       	ldd	r22, Y+7	; 0x07
    2124:	78 85       	ldd	r23, Y+8	; 0x08
    2126:	89 85       	ldd	r24, Y+9	; 0x09
    2128:	9a 85       	ldd	r25, Y+10	; 0x0a
    212a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	9e 83       	std	Y+6, r25	; 0x06
    2134:	8d 83       	std	Y+5, r24	; 0x05
    2136:	8d 81       	ldd	r24, Y+5	; 0x05
    2138:	9e 81       	ldd	r25, Y+6	; 0x06
    213a:	9a 83       	std	Y+2, r25	; 0x02
    213c:	89 83       	std	Y+1, r24	; 0x01
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	9a 81       	ldd	r25, Y+2	; 0x02
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	f1 f7       	brne	.-4      	; 0x2142 <Keypad_enuGetPressedKey+0x1e4>
    2146:	9a 83       	std	Y+2, r25	; 0x02
    2148:	89 83       	std	Y+1, r24	; 0x01
		  {

			_delay_ms(10);
			DIO_enuGetPinval(local_Au8R_PORT[local_u8R_Iterator],local_Au8R_PIN[local_u8R_Iterator],&local_u8PIN_VAL);
    214a:	88 89       	ldd	r24, Y+16	; 0x10
    214c:	28 2f       	mov	r18, r24
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	ce 01       	movw	r24, r28
    2152:	82 96       	adiw	r24, 0x22	; 34
    2154:	fc 01       	movw	r30, r24
    2156:	e2 0f       	add	r30, r18
    2158:	f3 1f       	adc	r31, r19
    215a:	40 81       	ld	r20, Z
    215c:	88 89       	ldd	r24, Y+16	; 0x10
    215e:	28 2f       	mov	r18, r24
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	ce 01       	movw	r24, r28
    2164:	8a 96       	adiw	r24, 0x2a	; 42
    2166:	fc 01       	movw	r30, r24
    2168:	e2 0f       	add	r30, r18
    216a:	f3 1f       	adc	r31, r19
    216c:	90 81       	ld	r25, Z
    216e:	9e 01       	movw	r18, r28
    2170:	2f 5e       	subi	r18, 0xEF	; 239
    2172:	3f 4f       	sbci	r19, 0xFF	; 255
    2174:	84 2f       	mov	r24, r20
    2176:	69 2f       	mov	r22, r25
    2178:	a9 01       	movw	r20, r18
    217a:	0e 94 0a 09 	call	0x1214	; 0x1214 <DIO_enuGetPinval>
			if (local_u8PIN_VAL==0)
    217e:	89 89       	ldd	r24, Y+17	; 0x11
    2180:	88 23       	and	r24, r24
    2182:	09 f0       	breq	.+2      	; 0x2186 <Keypad_enuGetPressedKey+0x228>
    2184:	55 c0       	rjmp	.+170    	; 0x2230 <Keypad_enuGetPressedKey+0x2d2>
    2186:	1a c0       	rjmp	.+52     	; 0x21bc <Keypad_enuGetPressedKey+0x25e>
			{
				while (local_u8PIN_VAL==0)
				{
					DIO_enuGetPinval(local_Au8R_PORT[local_u8R_Iterator],local_Au8R_PIN[local_u8R_Iterator],&local_u8PIN_VAL);
    2188:	88 89       	ldd	r24, Y+16	; 0x10
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	ce 01       	movw	r24, r28
    2190:	82 96       	adiw	r24, 0x22	; 34
    2192:	fc 01       	movw	r30, r24
    2194:	e2 0f       	add	r30, r18
    2196:	f3 1f       	adc	r31, r19
    2198:	40 81       	ld	r20, Z
    219a:	88 89       	ldd	r24, Y+16	; 0x10
    219c:	28 2f       	mov	r18, r24
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	ce 01       	movw	r24, r28
    21a2:	8a 96       	adiw	r24, 0x2a	; 42
    21a4:	fc 01       	movw	r30, r24
    21a6:	e2 0f       	add	r30, r18
    21a8:	f3 1f       	adc	r31, r19
    21aa:	90 81       	ld	r25, Z
    21ac:	9e 01       	movw	r18, r28
    21ae:	2f 5e       	subi	r18, 0xEF	; 239
    21b0:	3f 4f       	sbci	r19, 0xFF	; 255
    21b2:	84 2f       	mov	r24, r20
    21b4:	69 2f       	mov	r22, r25
    21b6:	a9 01       	movw	r20, r18
    21b8:	0e 94 0a 09 	call	0x1214	; 0x1214 <DIO_enuGetPinval>

			_delay_ms(10);
			DIO_enuGetPinval(local_Au8R_PORT[local_u8R_Iterator],local_Au8R_PIN[local_u8R_Iterator],&local_u8PIN_VAL);
			if (local_u8PIN_VAL==0)
			{
				while (local_u8PIN_VAL==0)
    21bc:	89 89       	ldd	r24, Y+17	; 0x11
    21be:	88 23       	and	r24, r24
    21c0:	19 f3       	breq	.-58     	; 0x2188 <Keypad_enuGetPressedKey+0x22a>
				{
					DIO_enuGetPinval(local_Au8R_PORT[local_u8R_Iterator],local_Au8R_PIN[local_u8R_Iterator],&local_u8PIN_VAL);
				}
				DIO_enuSetPinVAL(local_Au8C_PORT[local_u8C_Iterator],local_Au8C_PIN[local_u8C_Iterator],DIO_PIN_HIGH);
    21c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c4:	28 2f       	mov	r18, r24
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	ce 01       	movw	r24, r28
    21ca:	86 96       	adiw	r24, 0x26	; 38
    21cc:	fc 01       	movw	r30, r24
    21ce:	e2 0f       	add	r30, r18
    21d0:	f3 1f       	adc	r31, r19
    21d2:	40 81       	ld	r20, Z
    21d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    21d6:	28 2f       	mov	r18, r24
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	ce 01       	movw	r24, r28
    21dc:	8e 96       	adiw	r24, 0x2e	; 46
    21de:	fc 01       	movw	r30, r24
    21e0:	e2 0f       	add	r30, r18
    21e2:	f3 1f       	adc	r31, r19
    21e4:	90 81       	ld	r25, Z
    21e6:	84 2f       	mov	r24, r20
    21e8:	69 2f       	mov	r22, r25
    21ea:	41 e0       	ldi	r20, 0x01	; 1
    21ec:	0e 94 6c 07 	call	0xed8	; 0xed8 <DIO_enuSetPinVAL>
				*Copy_pu8KeyValue = Local_Au8KeyValues[local_u8R_Iterator][local_u8C_Iterator];
    21f0:	88 89       	ldd	r24, Y+16	; 0x10
    21f2:	28 2f       	mov	r18, r24
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21f8:	48 2f       	mov	r20, r24
    21fa:	50 e0       	ldi	r21, 0x00	; 0
    21fc:	22 0f       	add	r18, r18
    21fe:	33 1f       	adc	r19, r19
    2200:	22 0f       	add	r18, r18
    2202:	33 1f       	adc	r19, r19
    2204:	ce 01       	movw	r24, r28
    2206:	01 96       	adiw	r24, 0x01	; 1
    2208:	82 0f       	add	r24, r18
    220a:	93 1f       	adc	r25, r19
    220c:	84 0f       	add	r24, r20
    220e:	95 1f       	adc	r25, r21
    2210:	fc 01       	movw	r30, r24
    2212:	71 96       	adiw	r30, 0x11	; 17
    2214:	80 81       	ld	r24, Z
    2216:	ea a9       	ldd	r30, Y+50	; 0x32
    2218:	fb a9       	ldd	r31, Y+51	; 0x33
    221a:	80 83       	st	Z, r24

				return ES_OK;
    221c:	81 e0       	ldi	r24, 0x01	; 1

       }
	  DIO_enuSetPinVAL(local_Au8C_PORT[local_u8C_Iterator],local_Au8C_PIN[local_u8C_Iterator],DIO_PIN_HIGH);
   }
}
}
    221e:	e8 96       	adiw	r28, 0x38	; 56
    2220:	0f b6       	in	r0, 0x3f	; 63
    2222:	f8 94       	cli
    2224:	de bf       	out	0x3e, r29	; 62
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	cd bf       	out	0x3d, r28	; 61
    222a:	cf 91       	pop	r28
    222c:	df 91       	pop	r29
    222e:	08 95       	ret
while(1){
  for(local_u8C_Iterator=0;local_u8C_Iterator<COLS_NUM;local_u8C_Iterator++)
  {
	  DIO_enuSetPinVAL(local_Au8C_PORT[local_u8C_Iterator],local_Au8C_PIN[local_u8C_Iterator],DIO_PIN_LOW);

	  for(local_u8R_Iterator=0;local_u8R_Iterator<ROWS_NUM;local_u8R_Iterator++)
    2230:	88 89       	ldd	r24, Y+16	; 0x10
    2232:	8f 5f       	subi	r24, 0xFF	; 255
    2234:	88 8b       	std	Y+16, r24	; 0x10
    2236:	88 89       	ldd	r24, Y+16	; 0x10
    2238:	84 30       	cpi	r24, 0x04	; 4
    223a:	08 f4       	brcc	.+2      	; 0x223e <Keypad_enuGetPressedKey+0x2e0>
    223c:	f6 ce       	rjmp	.-532    	; 0x202a <Keypad_enuGetPressedKey+0xcc>
				return ES_OK;
			}
		  }

       }
	  DIO_enuSetPinVAL(local_Au8C_PORT[local_u8C_Iterator],local_Au8C_PIN[local_u8C_Iterator],DIO_PIN_HIGH);
    223e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2240:	28 2f       	mov	r18, r24
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	ce 01       	movw	r24, r28
    2246:	86 96       	adiw	r24, 0x26	; 38
    2248:	fc 01       	movw	r30, r24
    224a:	e2 0f       	add	r30, r18
    224c:	f3 1f       	adc	r31, r19
    224e:	40 81       	ld	r20, Z
    2250:	8f 85       	ldd	r24, Y+15	; 0x0f
    2252:	28 2f       	mov	r18, r24
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	ce 01       	movw	r24, r28
    2258:	8e 96       	adiw	r24, 0x2e	; 46
    225a:	fc 01       	movw	r30, r24
    225c:	e2 0f       	add	r30, r18
    225e:	f3 1f       	adc	r31, r19
    2260:	90 81       	ld	r25, Z
    2262:	84 2f       	mov	r24, r20
    2264:	69 2f       	mov	r22, r25
    2266:	41 e0       	ldi	r20, 0x01	; 1
    2268:	0e 94 6c 07 	call	0xed8	; 0xed8 <DIO_enuSetPinVAL>
  u8 local_Au8R_PIN[ROWS_NUM]={R1_PIN,R2_PIN,R3_PIN,R4_PIN};
  u8 local_Au8C_PIN[ROWS_NUM]={C1_PIN,C2_PIN,C3_PIN,C4_PIN};


while(1){
  for(local_u8C_Iterator=0;local_u8C_Iterator<COLS_NUM;local_u8C_Iterator++)
    226c:	8f 85       	ldd	r24, Y+15	; 0x0f
    226e:	8f 5f       	subi	r24, 0xFF	; 255
    2270:	8f 87       	std	Y+15, r24	; 0x0f
    2272:	8f 85       	ldd	r24, Y+15	; 0x0f
    2274:	84 30       	cpi	r24, 0x04	; 4
    2276:	08 f4       	brcc	.+2      	; 0x227a <Keypad_enuGetPressedKey+0x31c>
    2278:	bf ce       	rjmp	.-642    	; 0x1ff8 <Keypad_enuGetPressedKey+0x9a>
    227a:	bc ce       	rjmp	.-648    	; 0x1ff4 <Keypad_enuGetPressedKey+0x96>

0000227c <push_num>:

//global variables
int numbers[50],tn=-1,to=-1;
char op[50];
void push_num(int n)
{
    227c:	df 93       	push	r29
    227e:	cf 93       	push	r28
    2280:	00 d0       	rcall	.+0      	; 0x2282 <push_num+0x6>
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    2286:	9a 83       	std	Y+2, r25	; 0x02
    2288:	89 83       	std	Y+1, r24	; 0x01
numbers[++tn]=n;
    228a:	80 91 83 00 	lds	r24, 0x0083
    228e:	90 91 84 00 	lds	r25, 0x0084
    2292:	01 96       	adiw	r24, 0x01	; 1
    2294:	90 93 84 00 	sts	0x0084, r25
    2298:	80 93 83 00 	sts	0x0083, r24
    229c:	80 91 83 00 	lds	r24, 0x0083
    22a0:	90 91 84 00 	lds	r25, 0x0084
    22a4:	88 0f       	add	r24, r24
    22a6:	99 1f       	adc	r25, r25
    22a8:	fc 01       	movw	r30, r24
    22aa:	e5 53       	subi	r30, 0x35	; 53
    22ac:	ff 4f       	sbci	r31, 0xFF	; 255
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	9a 81       	ldd	r25, Y+2	; 0x02
    22b2:	91 83       	std	Z+1, r25	; 0x01
    22b4:	80 83       	st	Z, r24
}
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	cf 91       	pop	r28
    22bc:	df 91       	pop	r29
    22be:	08 95       	ret

000022c0 <push_op>:
//function to push operator
void push_op(char ch)
{
    22c0:	df 93       	push	r29
    22c2:	cf 93       	push	r28
    22c4:	0f 92       	push	r0
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
    22ca:	89 83       	std	Y+1, r24	; 0x01
op[++to]=ch;
    22cc:	80 91 85 00 	lds	r24, 0x0085
    22d0:	90 91 86 00 	lds	r25, 0x0086
    22d4:	01 96       	adiw	r24, 0x01	; 1
    22d6:	90 93 86 00 	sts	0x0086, r25
    22da:	80 93 85 00 	sts	0x0085, r24
    22de:	80 91 85 00 	lds	r24, 0x0085
    22e2:	90 91 86 00 	lds	r25, 0x0086
    22e6:	fc 01       	movw	r30, r24
    22e8:	e7 56       	subi	r30, 0x67	; 103
    22ea:	ff 4f       	sbci	r31, 0xFF	; 255
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	80 83       	st	Z, r24
}
    22f0:	0f 90       	pop	r0
    22f2:	cf 91       	pop	r28
    22f4:	df 91       	pop	r29
    22f6:	08 95       	ret

000022f8 <pop_num>:
//function to pop digits
int pop_num()
{
    22f8:	df 93       	push	r29
    22fa:	cf 93       	push	r28
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
return numbers[tn--];
    2300:	20 91 83 00 	lds	r18, 0x0083
    2304:	30 91 84 00 	lds	r19, 0x0084
    2308:	c9 01       	movw	r24, r18
    230a:	88 0f       	add	r24, r24
    230c:	99 1f       	adc	r25, r25
    230e:	fc 01       	movw	r30, r24
    2310:	e5 53       	subi	r30, 0x35	; 53
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	40 81       	ld	r20, Z
    2316:	51 81       	ldd	r21, Z+1	; 0x01
    2318:	c9 01       	movw	r24, r18
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	90 93 84 00 	sts	0x0084, r25
    2320:	80 93 83 00 	sts	0x0083, r24
    2324:	ca 01       	movw	r24, r20
}
    2326:	cf 91       	pop	r28
    2328:	df 91       	pop	r29
    232a:	08 95       	ret

0000232c <pop_op>:
//function to pop operators
char pop_op()
{
    232c:	df 93       	push	r29
    232e:	cf 93       	push	r28
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
	return op[to--];
    2334:	80 91 85 00 	lds	r24, 0x0085
    2338:	90 91 86 00 	lds	r25, 0x0086
    233c:	fc 01       	movw	r30, r24
    233e:	e7 56       	subi	r30, 0x67	; 103
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	20 81       	ld	r18, Z
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	90 93 86 00 	sts	0x0086, r25
    234a:	80 93 85 00 	sts	0x0085, r24
    234e:	82 2f       	mov	r24, r18
}
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	08 95       	ret

00002356 <infix_eval>:
//evaluating the expression
int infix_eval(int numbers[50],char op[50])
{
    2356:	df 93       	push	r29
    2358:	cf 93       	push	r28
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	2d 97       	sbiw	r28, 0x0d	; 13
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	9f 83       	std	Y+7, r25	; 0x07
    236c:	8e 83       	std	Y+6, r24	; 0x06
    236e:	79 87       	std	Y+9, r23	; 0x09
    2370:	68 87       	std	Y+8, r22	; 0x08
int x,y;
char ope;
//taking first two operands
x=pop_num();
    2372:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <pop_num>
    2376:	9d 83       	std	Y+5, r25	; 0x05
    2378:	8c 83       	std	Y+4, r24	; 0x04
y=pop_num();
    237a:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <pop_num>
    237e:	9b 83       	std	Y+3, r25	; 0x03
    2380:	8a 83       	std	Y+2, r24	; 0x02
//taking the operators between them
ope=pop_op();
    2382:	0e 94 96 11 	call	0x232c	; 0x232c <pop_op>
    2386:	89 83       	std	Y+1, r24	; 0x01
//executing the operation
switch(ope)
    2388:	89 81       	ldd	r24, Y+1	; 0x01
    238a:	28 2f       	mov	r18, r24
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	3d 87       	std	Y+13, r19	; 0x0d
    2390:	2c 87       	std	Y+12, r18	; 0x0c
    2392:	4c 85       	ldd	r20, Y+12	; 0x0c
    2394:	5d 85       	ldd	r21, Y+13	; 0x0d
    2396:	4b 32       	cpi	r20, 0x2B	; 43
    2398:	51 05       	cpc	r21, r1
    239a:	b1 f0       	breq	.+44     	; 0x23c8 <infix_eval+0x72>
    239c:	8c 85       	ldd	r24, Y+12	; 0x0c
    239e:	9d 85       	ldd	r25, Y+13	; 0x0d
    23a0:	8c 32       	cpi	r24, 0x2C	; 44
    23a2:	91 05       	cpc	r25, r1
    23a4:	34 f4       	brge	.+12     	; 0x23b2 <infix_eval+0x5c>
    23a6:	2c 85       	ldd	r18, Y+12	; 0x0c
    23a8:	3d 85       	ldd	r19, Y+13	; 0x0d
    23aa:	2a 32       	cpi	r18, 0x2A	; 42
    23ac:	31 05       	cpc	r19, r1
    23ae:	01 f1       	breq	.+64     	; 0x23f0 <infix_eval+0x9a>
    23b0:	4c c0       	rjmp	.+152    	; 0x244a <infix_eval+0xf4>
    23b2:	4c 85       	ldd	r20, Y+12	; 0x0c
    23b4:	5d 85       	ldd	r21, Y+13	; 0x0d
    23b6:	4d 32       	cpi	r20, 0x2D	; 45
    23b8:	51 05       	cpc	r21, r1
    23ba:	81 f0       	breq	.+32     	; 0x23dc <infix_eval+0x86>
    23bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    23be:	9d 85       	ldd	r25, Y+13	; 0x0d
    23c0:	8f 32       	cpi	r24, 0x2F	; 47
    23c2:	91 05       	cpc	r25, r1
    23c4:	19 f1       	breq	.+70     	; 0x240c <infix_eval+0xb6>
    23c6:	41 c0       	rjmp	.+130    	; 0x244a <infix_eval+0xf4>
{
case '+':
return x+y;
    23c8:	2c 81       	ldd	r18, Y+4	; 0x04
    23ca:	3d 81       	ldd	r19, Y+5	; 0x05
    23cc:	8a 81       	ldd	r24, Y+2	; 0x02
    23ce:	9b 81       	ldd	r25, Y+3	; 0x03
    23d0:	a9 01       	movw	r20, r18
    23d2:	48 0f       	add	r20, r24
    23d4:	59 1f       	adc	r21, r25
    23d6:	5b 87       	std	Y+11, r21	; 0x0b
    23d8:	4a 87       	std	Y+10, r20	; 0x0a
    23da:	39 c0       	rjmp	.+114    	; 0x244e <infix_eval+0xf8>
case '-':
return y-x;
    23dc:	2a 81       	ldd	r18, Y+2	; 0x02
    23de:	3b 81       	ldd	r19, Y+3	; 0x03
    23e0:	8c 81       	ldd	r24, Y+4	; 0x04
    23e2:	9d 81       	ldd	r25, Y+5	; 0x05
    23e4:	a9 01       	movw	r20, r18
    23e6:	48 1b       	sub	r20, r24
    23e8:	59 0b       	sbc	r21, r25
    23ea:	5b 87       	std	Y+11, r21	; 0x0b
    23ec:	4a 87       	std	Y+10, r20	; 0x0a
    23ee:	2f c0       	rjmp	.+94     	; 0x244e <infix_eval+0xf8>
case '*':
return x*y;
    23f0:	2c 81       	ldd	r18, Y+4	; 0x04
    23f2:	3d 81       	ldd	r19, Y+5	; 0x05
    23f4:	8a 81       	ldd	r24, Y+2	; 0x02
    23f6:	9b 81       	ldd	r25, Y+3	; 0x03
    23f8:	28 9f       	mul	r18, r24
    23fa:	a0 01       	movw	r20, r0
    23fc:	29 9f       	mul	r18, r25
    23fe:	50 0d       	add	r21, r0
    2400:	38 9f       	mul	r19, r24
    2402:	50 0d       	add	r21, r0
    2404:	11 24       	eor	r1, r1
    2406:	5b 87       	std	Y+11, r21	; 0x0b
    2408:	4a 87       	std	Y+10, r20	; 0x0a
    240a:	21 c0       	rjmp	.+66     	; 0x244e <infix_eval+0xf8>
case '/':
if(x==0)
    240c:	8c 81       	ldd	r24, Y+4	; 0x04
    240e:	9d 81       	ldd	r25, Y+5	; 0x05
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	81 f4       	brne	.+32     	; 0x2434 <infix_eval+0xde>
{
printf("\nCan not divide by 0");
    2414:	00 d0       	rcall	.+0      	; 0x2416 <infix_eval+0xc0>
    2416:	ed b7       	in	r30, 0x3d	; 61
    2418:	fe b7       	in	r31, 0x3e	; 62
    241a:	31 96       	adiw	r30, 0x01	; 1
    241c:	80 e6       	ldi	r24, 0x60	; 96
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	91 83       	std	Z+1, r25	; 0x01
    2422:	80 83       	st	Z, r24
    2424:	0e 94 80 15 	call	0x2b00	; 0x2b00 <printf>
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
exit(0);
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	0e 94 12 18 	call	0x3024	; 0x3024 <_exit>
}
else
return y/x;
    2434:	8a 81       	ldd	r24, Y+2	; 0x02
    2436:	9b 81       	ldd	r25, Y+3	; 0x03
    2438:	2c 81       	ldd	r18, Y+4	; 0x04
    243a:	3d 81       	ldd	r19, Y+5	; 0x05
    243c:	b9 01       	movw	r22, r18
    243e:	0e 94 28 14 	call	0x2850	; 0x2850 <__divmodhi4>
    2442:	cb 01       	movw	r24, r22
    2444:	9b 87       	std	Y+11, r25	; 0x0b
    2446:	8a 87       	std	Y+10, r24	; 0x0a
    2448:	02 c0       	rjmp	.+4      	; 0x244e <infix_eval+0xf8>
}
return 0;
    244a:	1b 86       	std	Y+11, r1	; 0x0b
    244c:	1a 86       	std	Y+10, r1	; 0x0a
    244e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2450:	9b 85       	ldd	r25, Y+11	; 0x0b
}
    2452:	2d 96       	adiw	r28, 0x0d	; 13
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	de bf       	out	0x3e, r29	; 62
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	cd bf       	out	0x3d, r28	; 61
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	08 95       	ret

00002464 <is_operator>:
//function to check whether the character is an operator or not
int is_operator(char ch)
{
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	00 d0       	rcall	.+0      	; 0x246a <is_operator+0x6>
    246a:	0f 92       	push	r0
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
    2470:	89 83       	std	Y+1, r24	; 0x01
return(ch=='+'||ch=='-'||ch=='*'||ch=='/'||ch=='^');
    2472:	89 81       	ldd	r24, Y+1	; 0x01
    2474:	8b 32       	cpi	r24, 0x2B	; 43
    2476:	61 f0       	breq	.+24     	; 0x2490 <is_operator+0x2c>
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	8d 32       	cpi	r24, 0x2D	; 45
    247c:	49 f0       	breq	.+18     	; 0x2490 <is_operator+0x2c>
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	8a 32       	cpi	r24, 0x2A	; 42
    2482:	31 f0       	breq	.+12     	; 0x2490 <is_operator+0x2c>
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	8f 32       	cpi	r24, 0x2F	; 47
    2488:	19 f0       	breq	.+6      	; 0x2490 <is_operator+0x2c>
    248a:	89 81       	ldd	r24, Y+1	; 0x01
    248c:	8e 35       	cpi	r24, 0x5E	; 94
    248e:	29 f4       	brne	.+10     	; 0x249a <is_operator+0x36>
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	9b 83       	std	Y+3, r25	; 0x03
    2496:	8a 83       	std	Y+2, r24	; 0x02
    2498:	02 c0       	rjmp	.+4      	; 0x249e <is_operator+0x3a>
    249a:	1b 82       	std	Y+3, r1	; 0x03
    249c:	1a 82       	std	Y+2, r1	; 0x02
    249e:	8a 81       	ldd	r24, Y+2	; 0x02
    24a0:	9b 81       	ldd	r25, Y+3	; 0x03
}
    24a2:	0f 90       	pop	r0
    24a4:	0f 90       	pop	r0
    24a6:	0f 90       	pop	r0
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	08 95       	ret

000024ae <precedence>:
//the precedence of the operators
int precedence(char c)
{
    24ae:	df 93       	push	r29
    24b0:	cf 93       	push	r28
    24b2:	00 d0       	rcall	.+0      	; 0x24b4 <precedence+0x6>
    24b4:	00 d0       	rcall	.+0      	; 0x24b6 <precedence+0x8>
    24b6:	0f 92       	push	r0
    24b8:	cd b7       	in	r28, 0x3d	; 61
    24ba:	de b7       	in	r29, 0x3e	; 62
    24bc:	89 83       	std	Y+1, r24	; 0x01
switch(c)
    24be:	89 81       	ldd	r24, Y+1	; 0x01
    24c0:	28 2f       	mov	r18, r24
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	3d 83       	std	Y+5, r19	; 0x05
    24c6:	2c 83       	std	Y+4, r18	; 0x04
    24c8:	8c 81       	ldd	r24, Y+4	; 0x04
    24ca:	9d 81       	ldd	r25, Y+5	; 0x05
    24cc:	8d 32       	cpi	r24, 0x2D	; 45
    24ce:	91 05       	cpc	r25, r1
    24d0:	01 f1       	breq	.+64     	; 0x2512 <precedence+0x64>
    24d2:	2c 81       	ldd	r18, Y+4	; 0x04
    24d4:	3d 81       	ldd	r19, Y+5	; 0x05
    24d6:	2e 32       	cpi	r18, 0x2E	; 46
    24d8:	31 05       	cpc	r19, r1
    24da:	5c f4       	brge	.+22     	; 0x24f2 <precedence+0x44>
    24dc:	8c 81       	ldd	r24, Y+4	; 0x04
    24de:	9d 81       	ldd	r25, Y+5	; 0x05
    24e0:	8a 32       	cpi	r24, 0x2A	; 42
    24e2:	91 05       	cpc	r25, r1
    24e4:	d9 f0       	breq	.+54     	; 0x251c <precedence+0x6e>
    24e6:	2c 81       	ldd	r18, Y+4	; 0x04
    24e8:	3d 81       	ldd	r19, Y+5	; 0x05
    24ea:	2b 32       	cpi	r18, 0x2B	; 43
    24ec:	31 05       	cpc	r19, r1
    24ee:	61 f0       	breq	.+24     	; 0x2508 <precedence+0x5a>
    24f0:	24 c0       	rjmp	.+72     	; 0x253a <precedence+0x8c>
    24f2:	8c 81       	ldd	r24, Y+4	; 0x04
    24f4:	9d 81       	ldd	r25, Y+5	; 0x05
    24f6:	8f 32       	cpi	r24, 0x2F	; 47
    24f8:	91 05       	cpc	r25, r1
    24fa:	a9 f0       	breq	.+42     	; 0x2526 <precedence+0x78>
    24fc:	2c 81       	ldd	r18, Y+4	; 0x04
    24fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2500:	2e 35       	cpi	r18, 0x5E	; 94
    2502:	31 05       	cpc	r19, r1
    2504:	a9 f0       	breq	.+42     	; 0x2530 <precedence+0x82>
    2506:	19 c0       	rjmp	.+50     	; 0x253a <precedence+0x8c>
{
case '+':
return 1;
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	9b 83       	std	Y+3, r25	; 0x03
    250e:	8a 83       	std	Y+2, r24	; 0x02
    2510:	18 c0       	rjmp	.+48     	; 0x2542 <precedence+0x94>
case '-':
return 1;
    2512:	21 e0       	ldi	r18, 0x01	; 1
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	3b 83       	std	Y+3, r19	; 0x03
    2518:	2a 83       	std	Y+2, r18	; 0x02
    251a:	13 c0       	rjmp	.+38     	; 0x2542 <precedence+0x94>
case '*':
return 2;
    251c:	82 e0       	ldi	r24, 0x02	; 2
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	9b 83       	std	Y+3, r25	; 0x03
    2522:	8a 83       	std	Y+2, r24	; 0x02
    2524:	0e c0       	rjmp	.+28     	; 0x2542 <precedence+0x94>
case '/':
return 2;
    2526:	22 e0       	ldi	r18, 0x02	; 2
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	3b 83       	std	Y+3, r19	; 0x03
    252c:	2a 83       	std	Y+2, r18	; 0x02
    252e:	09 c0       	rjmp	.+18     	; 0x2542 <precedence+0x94>
case '^':
return 3;
    2530:	83 e0       	ldi	r24, 0x03	; 3
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	9b 83       	std	Y+3, r25	; 0x03
    2536:	8a 83       	std	Y+2, r24	; 0x02
    2538:	04 c0       	rjmp	.+8      	; 0x2542 <precedence+0x94>
}
return -1;
    253a:	2f ef       	ldi	r18, 0xFF	; 255
    253c:	3f ef       	ldi	r19, 0xFF	; 255
    253e:	3b 83       	std	Y+3, r19	; 0x03
    2540:	2a 83       	std	Y+2, r18	; 0x02
    2542:	8a 81       	ldd	r24, Y+2	; 0x02
    2544:	9b 81       	ldd	r25, Y+3	; 0x03
}
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	cf 91       	pop	r28
    2552:	df 91       	pop	r29
    2554:	08 95       	ret

00002556 <eval>:
//function to evaluate an infix expression
int eval(char exp[20])
{
    2556:	0f 93       	push	r16
    2558:	1f 93       	push	r17
    255a:	df 93       	push	r29
    255c:	cf 93       	push	r28
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
    2562:	2b 97       	sbiw	r28, 0x0b	; 11
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	f8 94       	cli
    2568:	de bf       	out	0x3e, r29	; 62
    256a:	0f be       	out	0x3f, r0	; 63
    256c:	cd bf       	out	0x3d, r28	; 61
    256e:	9b 87       	std	Y+11, r25	; 0x0b
    2570:	8a 87       	std	Y+10, r24	; 0x0a

    int i,num,output,r;
    char c;
	for(i=0;exp[i]!='\0';i++)
    2572:	19 86       	std	Y+9, r1	; 0x09
    2574:	18 86       	std	Y+8, r1	; 0x08
    2576:	a9 c0       	rjmp	.+338    	; 0x26ca <eval+0x174>
	{
		//taking each character from the expression
		c = exp[i];
    2578:	28 85       	ldd	r18, Y+8	; 0x08
    257a:	39 85       	ldd	r19, Y+9	; 0x09
    257c:	8a 85       	ldd	r24, Y+10	; 0x0a
    257e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2580:	fc 01       	movw	r30, r24
    2582:	e2 0f       	add	r30, r18
    2584:	f3 1f       	adc	r31, r19
    2586:	80 81       	ld	r24, Z
    2588:	89 83       	std	Y+1, r24	; 0x01
		//checking if it is number
		if(isdigit(c)!=0)
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	88 2f       	mov	r24, r24
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	c0 97       	sbiw	r24, 0x30	; 48
    2592:	8a 30       	cpi	r24, 0x0A	; 10
    2594:	91 05       	cpc	r25, r1
    2596:	08 f0       	brcs	.+2      	; 0x259a <eval+0x44>
    2598:	3f c0       	rjmp	.+126    	; 0x2618 <eval+0xc2>
		{
			num = 0;
    259a:	1f 82       	std	Y+7, r1	; 0x07
    259c:	1e 82       	std	Y+6, r1	; 0x06
    259e:	2b c0       	rjmp	.+86     	; 0x25f6 <eval+0xa0>
			while (isdigit(c))
			{
				num = num*10 + (c-'0');
    25a0:	8e 81       	ldd	r24, Y+6	; 0x06
    25a2:	9f 81       	ldd	r25, Y+7	; 0x07
    25a4:	9c 01       	movw	r18, r24
    25a6:	22 0f       	add	r18, r18
    25a8:	33 1f       	adc	r19, r19
    25aa:	c9 01       	movw	r24, r18
    25ac:	88 0f       	add	r24, r24
    25ae:	99 1f       	adc	r25, r25
    25b0:	88 0f       	add	r24, r24
    25b2:	99 1f       	adc	r25, r25
    25b4:	28 0f       	add	r18, r24
    25b6:	39 1f       	adc	r19, r25
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	88 2f       	mov	r24, r24
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	c0 97       	sbiw	r24, 0x30	; 48
    25c0:	82 0f       	add	r24, r18
    25c2:	93 1f       	adc	r25, r19
    25c4:	9f 83       	std	Y+7, r25	; 0x07
    25c6:	8e 83       	std	Y+6, r24	; 0x06
				i++;
    25c8:	88 85       	ldd	r24, Y+8	; 0x08
    25ca:	99 85       	ldd	r25, Y+9	; 0x09
    25cc:	01 96       	adiw	r24, 0x01	; 1
    25ce:	99 87       	std	Y+9, r25	; 0x09
    25d0:	88 87       	std	Y+8, r24	; 0x08
				if(i <strlen(exp))
    25d2:	08 85       	ldd	r16, Y+8	; 0x08
    25d4:	19 85       	ldd	r17, Y+9	; 0x09
    25d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    25d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    25da:	0e 94 77 15 	call	0x2aee	; 0x2aee <strlen>
    25de:	08 17       	cp	r16, r24
    25e0:	19 07       	cpc	r17, r25
    25e2:	80 f4       	brcc	.+32     	; 0x2604 <eval+0xae>
				c = exp[i];
    25e4:	28 85       	ldd	r18, Y+8	; 0x08
    25e6:	39 85       	ldd	r19, Y+9	; 0x09
    25e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    25ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    25ec:	fc 01       	movw	r30, r24
    25ee:	e2 0f       	add	r30, r18
    25f0:	f3 1f       	adc	r31, r19
    25f2:	80 81       	ld	r24, Z
    25f4:	89 83       	std	Y+1, r24	; 0x01
		c = exp[i];
		//checking if it is number
		if(isdigit(c)!=0)
		{
			num = 0;
			while (isdigit(c))
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
    25f8:	88 2f       	mov	r24, r24
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	c0 97       	sbiw	r24, 0x30	; 48
    25fe:	8a 30       	cpi	r24, 0x0A	; 10
    2600:	91 05       	cpc	r25, r1
    2602:	70 f2       	brcs	.-100    	; 0x25a0 <eval+0x4a>
				if(i <strlen(exp))
				c = exp[i];
				else
				break;
			}
			i--;
    2604:	88 85       	ldd	r24, Y+8	; 0x08
    2606:	99 85       	ldd	r25, Y+9	; 0x09
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	99 87       	std	Y+9, r25	; 0x09
    260c:	88 87       	std	Y+8, r24	; 0x08
			//pushing the number into stack of numbers
			push_num(num);
    260e:	8e 81       	ldd	r24, Y+6	; 0x06
    2610:	9f 81       	ldd	r25, Y+7	; 0x07
    2612:	0e 94 3e 11 	call	0x227c	; 0x227c <push_num>
    2616:	54 c0       	rjmp	.+168    	; 0x26c0 <eval+0x16a>
		}
		else if(c=='(')
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	88 32       	cpi	r24, 0x28	; 40
    261c:	21 f4       	brne	.+8      	; 0x2626 <eval+0xd0>
		{
			//pushing the operators into the stack
			push_op(c);
    261e:	89 81       	ldd	r24, Y+1	; 0x01
    2620:	0e 94 60 11 	call	0x22c0	; 0x22c0 <push_op>
    2624:	4d c0       	rjmp	.+154    	; 0x26c0 <eval+0x16a>
		}
		//If we get close bracket, evaluate the entire bracket
		else if(c==')')
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	89 32       	cpi	r24, 0x29	; 41
    262a:	d9 f4       	brne	.+54     	; 0x2662 <eval+0x10c>
    262c:	0d c0       	rjmp	.+26     	; 0x2648 <eval+0xf2>
		{
			while(op[to]!='(')
			{
				r = infix_eval(numbers, op);
    262e:	8b ec       	ldi	r24, 0xCB	; 203
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	29 e9       	ldi	r18, 0x99	; 153
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	b9 01       	movw	r22, r18
    2638:	0e 94 ab 11 	call	0x2356	; 0x2356 <infix_eval>
    263c:	9b 83       	std	Y+3, r25	; 0x03
    263e:	8a 83       	std	Y+2, r24	; 0x02
				//pushing the result back to stack
				push_num(r);
    2640:	8a 81       	ldd	r24, Y+2	; 0x02
    2642:	9b 81       	ldd	r25, Y+3	; 0x03
    2644:	0e 94 3e 11 	call	0x227c	; 0x227c <push_num>
			push_op(c);
		}
		//If we get close bracket, evaluate the entire bracket
		else if(c==')')
		{
			while(op[to]!='(')
    2648:	80 91 85 00 	lds	r24, 0x0085
    264c:	90 91 86 00 	lds	r25, 0x0086
    2650:	fc 01       	movw	r30, r24
    2652:	e7 56       	subi	r30, 0x67	; 103
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	80 81       	ld	r24, Z
    2658:	88 32       	cpi	r24, 0x28	; 40
    265a:	49 f7       	brne	.-46     	; 0x262e <eval+0xd8>
			{
				r = infix_eval(numbers, op);
				//pushing the result back to stack
				push_num(r);
			}
			pop_op();
    265c:	0e 94 96 11 	call	0x232c	; 0x232c <pop_op>
    2660:	2f c0       	rjmp	.+94     	; 0x26c0 <eval+0x16a>
	    }
		// if the current character is operator
		else if(is_operator(c))
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	0e 94 32 12 	call	0x2464	; 0x2464 <is_operator>
    2668:	00 97       	sbiw	r24, 0x00	; 0
    266a:	51 f1       	breq	.+84     	; 0x26c0 <eval+0x16a>
    266c:	0d c0       	rjmp	.+26     	; 0x2688 <eval+0x132>
		{
			//evaluating the expression
			while(to!=-1 && precedence(c)<=precedence(op[to]))
			{
				output = infix_eval(numbers, op);
    266e:	8b ec       	ldi	r24, 0xCB	; 203
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	29 e9       	ldi	r18, 0x99	; 153
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	b9 01       	movw	r22, r18
    2678:	0e 94 ab 11 	call	0x2356	; 0x2356 <infix_eval>
    267c:	9d 83       	std	Y+5, r25	; 0x05
    267e:	8c 83       	std	Y+4, r24	; 0x04
				//pushing the result back to stack
				push_num(output);
    2680:	8c 81       	ldd	r24, Y+4	; 0x04
    2682:	9d 81       	ldd	r25, Y+5	; 0x05
    2684:	0e 94 3e 11 	call	0x227c	; 0x227c <push_num>
	    }
		// if the current character is operator
		else if(is_operator(c))
		{
			//evaluating the expression
			while(to!=-1 && precedence(c)<=precedence(op[to]))
    2688:	80 91 85 00 	lds	r24, 0x0085
    268c:	90 91 86 00 	lds	r25, 0x0086
    2690:	2f ef       	ldi	r18, 0xFF	; 255
    2692:	8f 3f       	cpi	r24, 0xFF	; 255
    2694:	92 07       	cpc	r25, r18
    2696:	89 f0       	breq	.+34     	; 0x26ba <eval+0x164>
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	0e 94 57 12 	call	0x24ae	; 0x24ae <precedence>
    269e:	8c 01       	movw	r16, r24
    26a0:	80 91 85 00 	lds	r24, 0x0085
    26a4:	90 91 86 00 	lds	r25, 0x0086
    26a8:	fc 01       	movw	r30, r24
    26aa:	e7 56       	subi	r30, 0x67	; 103
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	80 81       	ld	r24, Z
    26b0:	0e 94 57 12 	call	0x24ae	; 0x24ae <precedence>
    26b4:	80 17       	cp	r24, r16
    26b6:	91 07       	cpc	r25, r17
    26b8:	d4 f6       	brge	.-76     	; 0x266e <eval+0x118>
				output = infix_eval(numbers, op);
				//pushing the result back to stack
				push_num(output);
			}
			//pushing the current operator to stack
			push_op(c);
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	0e 94 60 11 	call	0x22c0	; 0x22c0 <push_op>
int eval(char exp[20])
{

    int i,num,output,r;
    char c;
	for(i=0;exp[i]!='\0';i++)
    26c0:	88 85       	ldd	r24, Y+8	; 0x08
    26c2:	99 85       	ldd	r25, Y+9	; 0x09
    26c4:	01 96       	adiw	r24, 0x01	; 1
    26c6:	99 87       	std	Y+9, r25	; 0x09
    26c8:	88 87       	std	Y+8, r24	; 0x08
    26ca:	28 85       	ldd	r18, Y+8	; 0x08
    26cc:	39 85       	ldd	r19, Y+9	; 0x09
    26ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    26d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    26d2:	fc 01       	movw	r30, r24
    26d4:	e2 0f       	add	r30, r18
    26d6:	f3 1f       	adc	r31, r19
    26d8:	80 81       	ld	r24, Z
    26da:	88 23       	and	r24, r24
    26dc:	09 f0       	breq	.+2      	; 0x26e0 <eval+0x18a>
    26de:	4c cf       	rjmp	.-360    	; 0x2578 <eval+0x22>
    26e0:	0d c0       	rjmp	.+26     	; 0x26fc <eval+0x1a6>
		}
	}
//if there is any remaining expression, evaluate them
	while(to!=-1)
	{
		output = infix_eval(numbers, op);
    26e2:	8b ec       	ldi	r24, 0xCB	; 203
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	29 e9       	ldi	r18, 0x99	; 153
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	b9 01       	movw	r22, r18
    26ec:	0e 94 ab 11 	call	0x2356	; 0x2356 <infix_eval>
    26f0:	9d 83       	std	Y+5, r25	; 0x05
    26f2:	8c 83       	std	Y+4, r24	; 0x04
		//pushing it back to stack
		push_num(output);
    26f4:	8c 81       	ldd	r24, Y+4	; 0x04
    26f6:	9d 81       	ldd	r25, Y+5	; 0x05
    26f8:	0e 94 3e 11 	call	0x227c	; 0x227c <push_num>
			//pushing the current operator to stack
			push_op(c);
		}
	}
//if there is any remaining expression, evaluate them
	while(to!=-1)
    26fc:	80 91 85 00 	lds	r24, 0x0085
    2700:	90 91 86 00 	lds	r25, 0x0086
    2704:	2f ef       	ldi	r18, 0xFF	; 255
    2706:	8f 3f       	cpi	r24, 0xFF	; 255
    2708:	92 07       	cpc	r25, r18
    270a:	59 f7       	brne	.-42     	; 0x26e2 <eval+0x18c>
	{
		output = infix_eval(numbers, op);
		//pushing it back to stack
		push_num(output);
	}
	return pop_num();
    270c:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <pop_num>
}
    2710:	2b 96       	adiw	r28, 0x0b	; 11
    2712:	0f b6       	in	r0, 0x3f	; 63
    2714:	f8 94       	cli
    2716:	de bf       	out	0x3e, r29	; 62
    2718:	0f be       	out	0x3f, r0	; 63
    271a:	cd bf       	out	0x3d, r28	; 61
    271c:	cf 91       	pop	r28
    271e:	df 91       	pop	r29
    2720:	1f 91       	pop	r17
    2722:	0f 91       	pop	r16
    2724:	08 95       	ret

00002726 <main>:


int main()
{
    2726:	df 93       	push	r29
    2728:	cf 93       	push	r28
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
    272e:	6b 97       	sbiw	r28, 0x1b	; 27
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	de bf       	out	0x3e, r29	; 62
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	cd bf       	out	0x3d, r28	; 61
	Keypad_enuInit();
    273a:	0e 94 56 0f 	call	0x1eac	; 0x1eac <Keypad_enuInit>
	LCD_enuinit();
    273e:	0e 94 91 09 	call	0x1322	; 0x1322 <LCD_enuinit>
	unsigned char pressed;
	while(1)
	{
		char ex[20];
		int iterator =0;
    2742:	1e 82       	std	Y+6, r1	; 0x06
    2744:	1d 82       	std	Y+5, r1	; 0x05
		Keypad_enuGetPressedKey(&pressed);
    2746:	ce 01       	movw	r24, r28
    2748:	07 96       	adiw	r24, 0x07	; 7
    274a:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <Keypad_enuGetPressedKey>
		if(pressed!='c')
    274e:	8f 81       	ldd	r24, Y+7	; 0x07
    2750:	83 36       	cpi	r24, 0x63	; 99
    2752:	09 f4       	brne	.+2      	; 0x2756 <main+0x30>
    2754:	59 c0       	rjmp	.+178    	; 0x2808 <main+0xe2>
		{
		LCD_enuwritedate(pressed);
    2756:	8f 81       	ldd	r24, Y+7	; 0x07
    2758:	0e 94 98 0c 	call	0x1930	; 0x1930 <LCD_enuwritedate>
		ex[iterator] = pressed;
    275c:	2d 81       	ldd	r18, Y+5	; 0x05
    275e:	3e 81       	ldd	r19, Y+6	; 0x06
    2760:	4f 81       	ldd	r20, Y+7	; 0x07
    2762:	ce 01       	movw	r24, r28
    2764:	08 96       	adiw	r24, 0x08	; 8
    2766:	fc 01       	movw	r30, r24
    2768:	e2 0f       	add	r30, r18
    276a:	f3 1f       	adc	r31, r19
    276c:	40 83       	st	Z, r20
    276e:	15 c0       	rjmp	.+42     	; 0x279a <main+0x74>
		while (pressed!= '=')
		{
			Keypad_enuGetPressedKey(&pressed);
    2770:	ce 01       	movw	r24, r28
    2772:	07 96       	adiw	r24, 0x07	; 7
    2774:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <Keypad_enuGetPressedKey>
			LCD_enuwritedate(pressed);
    2778:	8f 81       	ldd	r24, Y+7	; 0x07
    277a:	0e 94 98 0c 	call	0x1930	; 0x1930 <LCD_enuwritedate>
			ex[++iterator] = pressed;
    277e:	8d 81       	ldd	r24, Y+5	; 0x05
    2780:	9e 81       	ldd	r25, Y+6	; 0x06
    2782:	01 96       	adiw	r24, 0x01	; 1
    2784:	9e 83       	std	Y+6, r25	; 0x06
    2786:	8d 83       	std	Y+5, r24	; 0x05
    2788:	2d 81       	ldd	r18, Y+5	; 0x05
    278a:	3e 81       	ldd	r19, Y+6	; 0x06
    278c:	4f 81       	ldd	r20, Y+7	; 0x07
    278e:	ce 01       	movw	r24, r28
    2790:	08 96       	adiw	r24, 0x08	; 8
    2792:	fc 01       	movw	r30, r24
    2794:	e2 0f       	add	r30, r18
    2796:	f3 1f       	adc	r31, r19
    2798:	40 83       	st	Z, r20
		Keypad_enuGetPressedKey(&pressed);
		if(pressed!='c')
		{
		LCD_enuwritedate(pressed);
		ex[iterator] = pressed;
		while (pressed!= '=')
    279a:	8f 81       	ldd	r24, Y+7	; 0x07
    279c:	8d 33       	cpi	r24, 0x3D	; 61
    279e:	41 f7       	brne	.-48     	; 0x2770 <main+0x4a>
		{
			Keypad_enuGetPressedKey(&pressed);
			LCD_enuwritedate(pressed);
			ex[++iterator] = pressed;
		}
		char *expr = malloc((iterator) * sizeof(char));
    27a0:	8d 81       	ldd	r24, Y+5	; 0x05
    27a2:	9e 81       	ldd	r25, Y+6	; 0x06
    27a4:	0e 94 72 14 	call	0x28e4	; 0x28e4 <malloc>
    27a8:	9c 83       	std	Y+4, r25	; 0x04
    27aa:	8b 83       	std	Y+3, r24	; 0x03
		for (int j = 0; j < iterator; j++)
    27ac:	1a 82       	std	Y+2, r1	; 0x02
    27ae:	19 82       	std	Y+1, r1	; 0x01
    27b0:	15 c0       	rjmp	.+42     	; 0x27dc <main+0xb6>
		{
			expr[j] = ex[j];
    27b2:	29 81       	ldd	r18, Y+1	; 0x01
    27b4:	3a 81       	ldd	r19, Y+2	; 0x02
    27b6:	8b 81       	ldd	r24, Y+3	; 0x03
    27b8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ba:	dc 01       	movw	r26, r24
    27bc:	a2 0f       	add	r26, r18
    27be:	b3 1f       	adc	r27, r19
    27c0:	29 81       	ldd	r18, Y+1	; 0x01
    27c2:	3a 81       	ldd	r19, Y+2	; 0x02
    27c4:	ce 01       	movw	r24, r28
    27c6:	08 96       	adiw	r24, 0x08	; 8
    27c8:	fc 01       	movw	r30, r24
    27ca:	e2 0f       	add	r30, r18
    27cc:	f3 1f       	adc	r31, r19
    27ce:	80 81       	ld	r24, Z
    27d0:	8c 93       	st	X, r24
			Keypad_enuGetPressedKey(&pressed);
			LCD_enuwritedate(pressed);
			ex[++iterator] = pressed;
		}
		char *expr = malloc((iterator) * sizeof(char));
		for (int j = 0; j < iterator; j++)
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	9a 81       	ldd	r25, Y+2	; 0x02
    27d6:	01 96       	adiw	r24, 0x01	; 1
    27d8:	9a 83       	std	Y+2, r25	; 0x02
    27da:	89 83       	std	Y+1, r24	; 0x01
    27dc:	29 81       	ldd	r18, Y+1	; 0x01
    27de:	3a 81       	ldd	r19, Y+2	; 0x02
    27e0:	8d 81       	ldd	r24, Y+5	; 0x05
    27e2:	9e 81       	ldd	r25, Y+6	; 0x06
    27e4:	28 17       	cp	r18, r24
    27e6:	39 07       	cpc	r19, r25
    27e8:	24 f3       	brlt	.-56     	; 0x27b2 <main+0x8c>
		{
			expr[j] = ex[j];
		}
		expr[iterator]='\0';
    27ea:	2d 81       	ldd	r18, Y+5	; 0x05
    27ec:	3e 81       	ldd	r19, Y+6	; 0x06
    27ee:	8b 81       	ldd	r24, Y+3	; 0x03
    27f0:	9c 81       	ldd	r25, Y+4	; 0x04
    27f2:	fc 01       	movw	r30, r24
    27f4:	e2 0f       	add	r30, r18
    27f6:	f3 1f       	adc	r31, r19
    27f8:	10 82       	st	Z, r1
		LCD_voidWriteNumber(eval(expr));
    27fa:	8b 81       	ldd	r24, Y+3	; 0x03
    27fc:	9c 81       	ldd	r25, Y+4	; 0x04
    27fe:	0e 94 ab 12 	call	0x2556	; 0x2556 <eval>
    2802:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <LCD_voidWriteNumber>
    2806:	9d cf       	rjmp	.-198    	; 0x2742 <main+0x1c>
		}
		else
		{
			LCD_enusendcmd(0x01);
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	0e 94 8c 0b 	call	0x1718	; 0x1718 <LCD_enusendcmd>
			tn=-1;
    280e:	8f ef       	ldi	r24, 0xFF	; 255
    2810:	9f ef       	ldi	r25, 0xFF	; 255
    2812:	90 93 84 00 	sts	0x0084, r25
    2816:	80 93 83 00 	sts	0x0083, r24
			to=-1;
    281a:	8f ef       	ldi	r24, 0xFF	; 255
    281c:	9f ef       	ldi	r25, 0xFF	; 255
    281e:	90 93 86 00 	sts	0x0086, r25
    2822:	80 93 85 00 	sts	0x0085, r24
    2826:	8d cf       	rjmp	.-230    	; 0x2742 <main+0x1c>

00002828 <__udivmodhi4>:
    2828:	aa 1b       	sub	r26, r26
    282a:	bb 1b       	sub	r27, r27
    282c:	51 e1       	ldi	r21, 0x11	; 17
    282e:	07 c0       	rjmp	.+14     	; 0x283e <__udivmodhi4_ep>

00002830 <__udivmodhi4_loop>:
    2830:	aa 1f       	adc	r26, r26
    2832:	bb 1f       	adc	r27, r27
    2834:	a6 17       	cp	r26, r22
    2836:	b7 07       	cpc	r27, r23
    2838:	10 f0       	brcs	.+4      	; 0x283e <__udivmodhi4_ep>
    283a:	a6 1b       	sub	r26, r22
    283c:	b7 0b       	sbc	r27, r23

0000283e <__udivmodhi4_ep>:
    283e:	88 1f       	adc	r24, r24
    2840:	99 1f       	adc	r25, r25
    2842:	5a 95       	dec	r21
    2844:	a9 f7       	brne	.-22     	; 0x2830 <__udivmodhi4_loop>
    2846:	80 95       	com	r24
    2848:	90 95       	com	r25
    284a:	bc 01       	movw	r22, r24
    284c:	cd 01       	movw	r24, r26
    284e:	08 95       	ret

00002850 <__divmodhi4>:
    2850:	97 fb       	bst	r25, 7
    2852:	09 2e       	mov	r0, r25
    2854:	07 26       	eor	r0, r23
    2856:	0a d0       	rcall	.+20     	; 0x286c <__divmodhi4_neg1>
    2858:	77 fd       	sbrc	r23, 7
    285a:	04 d0       	rcall	.+8      	; 0x2864 <__divmodhi4_neg2>
    285c:	e5 df       	rcall	.-54     	; 0x2828 <__udivmodhi4>
    285e:	06 d0       	rcall	.+12     	; 0x286c <__divmodhi4_neg1>
    2860:	00 20       	and	r0, r0
    2862:	1a f4       	brpl	.+6      	; 0x286a <__divmodhi4_exit>

00002864 <__divmodhi4_neg2>:
    2864:	70 95       	com	r23
    2866:	61 95       	neg	r22
    2868:	7f 4f       	sbci	r23, 0xFF	; 255

0000286a <__divmodhi4_exit>:
    286a:	08 95       	ret

0000286c <__divmodhi4_neg1>:
    286c:	f6 f7       	brtc	.-4      	; 0x286a <__divmodhi4_exit>
    286e:	90 95       	com	r25
    2870:	81 95       	neg	r24
    2872:	9f 4f       	sbci	r25, 0xFF	; 255
    2874:	08 95       	ret

00002876 <__prologue_saves__>:
    2876:	2f 92       	push	r2
    2878:	3f 92       	push	r3
    287a:	4f 92       	push	r4
    287c:	5f 92       	push	r5
    287e:	6f 92       	push	r6
    2880:	7f 92       	push	r7
    2882:	8f 92       	push	r8
    2884:	9f 92       	push	r9
    2886:	af 92       	push	r10
    2888:	bf 92       	push	r11
    288a:	cf 92       	push	r12
    288c:	df 92       	push	r13
    288e:	ef 92       	push	r14
    2890:	ff 92       	push	r15
    2892:	0f 93       	push	r16
    2894:	1f 93       	push	r17
    2896:	cf 93       	push	r28
    2898:	df 93       	push	r29
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	ca 1b       	sub	r28, r26
    28a0:	db 0b       	sbc	r29, r27
    28a2:	0f b6       	in	r0, 0x3f	; 63
    28a4:	f8 94       	cli
    28a6:	de bf       	out	0x3e, r29	; 62
    28a8:	0f be       	out	0x3f, r0	; 63
    28aa:	cd bf       	out	0x3d, r28	; 61
    28ac:	09 94       	ijmp

000028ae <__epilogue_restores__>:
    28ae:	2a 88       	ldd	r2, Y+18	; 0x12
    28b0:	39 88       	ldd	r3, Y+17	; 0x11
    28b2:	48 88       	ldd	r4, Y+16	; 0x10
    28b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    28b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    28b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    28ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    28bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    28be:	aa 84       	ldd	r10, Y+10	; 0x0a
    28c0:	b9 84       	ldd	r11, Y+9	; 0x09
    28c2:	c8 84       	ldd	r12, Y+8	; 0x08
    28c4:	df 80       	ldd	r13, Y+7	; 0x07
    28c6:	ee 80       	ldd	r14, Y+6	; 0x06
    28c8:	fd 80       	ldd	r15, Y+5	; 0x05
    28ca:	0c 81       	ldd	r16, Y+4	; 0x04
    28cc:	1b 81       	ldd	r17, Y+3	; 0x03
    28ce:	aa 81       	ldd	r26, Y+2	; 0x02
    28d0:	b9 81       	ldd	r27, Y+1	; 0x01
    28d2:	ce 0f       	add	r28, r30
    28d4:	d1 1d       	adc	r29, r1
    28d6:	0f b6       	in	r0, 0x3f	; 63
    28d8:	f8 94       	cli
    28da:	de bf       	out	0x3e, r29	; 62
    28dc:	0f be       	out	0x3f, r0	; 63
    28de:	cd bf       	out	0x3d, r28	; 61
    28e0:	ed 01       	movw	r28, r26
    28e2:	08 95       	ret

000028e4 <malloc>:
    28e4:	cf 93       	push	r28
    28e6:	df 93       	push	r29
    28e8:	bc 01       	movw	r22, r24
    28ea:	82 30       	cpi	r24, 0x02	; 2
    28ec:	91 05       	cpc	r25, r1
    28ee:	10 f4       	brcc	.+4      	; 0x28f4 <malloc+0x10>
    28f0:	62 e0       	ldi	r22, 0x02	; 2
    28f2:	70 e0       	ldi	r23, 0x00	; 0
    28f4:	a0 91 31 01 	lds	r26, 0x0131
    28f8:	b0 91 32 01 	lds	r27, 0x0132
    28fc:	ed 01       	movw	r28, r26
    28fe:	e0 e0       	ldi	r30, 0x00	; 0
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	40 e0       	ldi	r20, 0x00	; 0
    2904:	50 e0       	ldi	r21, 0x00	; 0
    2906:	21 c0       	rjmp	.+66     	; 0x294a <malloc+0x66>
    2908:	88 81       	ld	r24, Y
    290a:	99 81       	ldd	r25, Y+1	; 0x01
    290c:	86 17       	cp	r24, r22
    290e:	97 07       	cpc	r25, r23
    2910:	69 f4       	brne	.+26     	; 0x292c <malloc+0x48>
    2912:	8a 81       	ldd	r24, Y+2	; 0x02
    2914:	9b 81       	ldd	r25, Y+3	; 0x03
    2916:	30 97       	sbiw	r30, 0x00	; 0
    2918:	19 f0       	breq	.+6      	; 0x2920 <malloc+0x3c>
    291a:	93 83       	std	Z+3, r25	; 0x03
    291c:	82 83       	std	Z+2, r24	; 0x02
    291e:	04 c0       	rjmp	.+8      	; 0x2928 <malloc+0x44>
    2920:	90 93 32 01 	sts	0x0132, r25
    2924:	80 93 31 01 	sts	0x0131, r24
    2928:	fe 01       	movw	r30, r28
    292a:	34 c0       	rjmp	.+104    	; 0x2994 <malloc+0xb0>
    292c:	68 17       	cp	r22, r24
    292e:	79 07       	cpc	r23, r25
    2930:	38 f4       	brcc	.+14     	; 0x2940 <malloc+0x5c>
    2932:	41 15       	cp	r20, r1
    2934:	51 05       	cpc	r21, r1
    2936:	19 f0       	breq	.+6      	; 0x293e <malloc+0x5a>
    2938:	84 17       	cp	r24, r20
    293a:	95 07       	cpc	r25, r21
    293c:	08 f4       	brcc	.+2      	; 0x2940 <malloc+0x5c>
    293e:	ac 01       	movw	r20, r24
    2940:	fe 01       	movw	r30, r28
    2942:	8a 81       	ldd	r24, Y+2	; 0x02
    2944:	9b 81       	ldd	r25, Y+3	; 0x03
    2946:	9c 01       	movw	r18, r24
    2948:	e9 01       	movw	r28, r18
    294a:	20 97       	sbiw	r28, 0x00	; 0
    294c:	e9 f6       	brne	.-70     	; 0x2908 <malloc+0x24>
    294e:	41 15       	cp	r20, r1
    2950:	51 05       	cpc	r21, r1
    2952:	a9 f1       	breq	.+106    	; 0x29be <malloc+0xda>
    2954:	ca 01       	movw	r24, r20
    2956:	86 1b       	sub	r24, r22
    2958:	97 0b       	sbc	r25, r23
    295a:	04 97       	sbiw	r24, 0x04	; 4
    295c:	08 f4       	brcc	.+2      	; 0x2960 <malloc+0x7c>
    295e:	ba 01       	movw	r22, r20
    2960:	e0 e0       	ldi	r30, 0x00	; 0
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	2a c0       	rjmp	.+84     	; 0x29ba <malloc+0xd6>
    2966:	8d 91       	ld	r24, X+
    2968:	9c 91       	ld	r25, X
    296a:	11 97       	sbiw	r26, 0x01	; 1
    296c:	84 17       	cp	r24, r20
    296e:	95 07       	cpc	r25, r21
    2970:	f9 f4       	brne	.+62     	; 0x29b0 <malloc+0xcc>
    2972:	64 17       	cp	r22, r20
    2974:	75 07       	cpc	r23, r21
    2976:	81 f4       	brne	.+32     	; 0x2998 <malloc+0xb4>
    2978:	12 96       	adiw	r26, 0x02	; 2
    297a:	8d 91       	ld	r24, X+
    297c:	9c 91       	ld	r25, X
    297e:	13 97       	sbiw	r26, 0x03	; 3
    2980:	30 97       	sbiw	r30, 0x00	; 0
    2982:	19 f0       	breq	.+6      	; 0x298a <malloc+0xa6>
    2984:	93 83       	std	Z+3, r25	; 0x03
    2986:	82 83       	std	Z+2, r24	; 0x02
    2988:	04 c0       	rjmp	.+8      	; 0x2992 <malloc+0xae>
    298a:	90 93 32 01 	sts	0x0132, r25
    298e:	80 93 31 01 	sts	0x0131, r24
    2992:	fd 01       	movw	r30, r26
    2994:	32 96       	adiw	r30, 0x02	; 2
    2996:	4f c0       	rjmp	.+158    	; 0x2a36 <malloc+0x152>
    2998:	ca 01       	movw	r24, r20
    299a:	86 1b       	sub	r24, r22
    299c:	97 0b       	sbc	r25, r23
    299e:	fd 01       	movw	r30, r26
    29a0:	e8 0f       	add	r30, r24
    29a2:	f9 1f       	adc	r31, r25
    29a4:	61 93       	st	Z+, r22
    29a6:	71 93       	st	Z+, r23
    29a8:	02 97       	sbiw	r24, 0x02	; 2
    29aa:	8d 93       	st	X+, r24
    29ac:	9c 93       	st	X, r25
    29ae:	43 c0       	rjmp	.+134    	; 0x2a36 <malloc+0x152>
    29b0:	fd 01       	movw	r30, r26
    29b2:	82 81       	ldd	r24, Z+2	; 0x02
    29b4:	93 81       	ldd	r25, Z+3	; 0x03
    29b6:	9c 01       	movw	r18, r24
    29b8:	d9 01       	movw	r26, r18
    29ba:	10 97       	sbiw	r26, 0x00	; 0
    29bc:	a1 f6       	brne	.-88     	; 0x2966 <malloc+0x82>
    29be:	80 91 2f 01 	lds	r24, 0x012F
    29c2:	90 91 30 01 	lds	r25, 0x0130
    29c6:	89 2b       	or	r24, r25
    29c8:	41 f4       	brne	.+16     	; 0x29da <malloc+0xf6>
    29ca:	80 91 7f 00 	lds	r24, 0x007F
    29ce:	90 91 80 00 	lds	r25, 0x0080
    29d2:	90 93 30 01 	sts	0x0130, r25
    29d6:	80 93 2f 01 	sts	0x012F, r24
    29da:	40 91 81 00 	lds	r20, 0x0081
    29de:	50 91 82 00 	lds	r21, 0x0082
    29e2:	41 15       	cp	r20, r1
    29e4:	51 05       	cpc	r21, r1
    29e6:	41 f4       	brne	.+16     	; 0x29f8 <malloc+0x114>
    29e8:	4d b7       	in	r20, 0x3d	; 61
    29ea:	5e b7       	in	r21, 0x3e	; 62
    29ec:	80 91 7d 00 	lds	r24, 0x007D
    29f0:	90 91 7e 00 	lds	r25, 0x007E
    29f4:	48 1b       	sub	r20, r24
    29f6:	59 0b       	sbc	r21, r25
    29f8:	20 91 2f 01 	lds	r18, 0x012F
    29fc:	30 91 30 01 	lds	r19, 0x0130
    2a00:	24 17       	cp	r18, r20
    2a02:	35 07       	cpc	r19, r21
    2a04:	b0 f4       	brcc	.+44     	; 0x2a32 <malloc+0x14e>
    2a06:	ca 01       	movw	r24, r20
    2a08:	82 1b       	sub	r24, r18
    2a0a:	93 0b       	sbc	r25, r19
    2a0c:	86 17       	cp	r24, r22
    2a0e:	97 07       	cpc	r25, r23
    2a10:	80 f0       	brcs	.+32     	; 0x2a32 <malloc+0x14e>
    2a12:	ab 01       	movw	r20, r22
    2a14:	4e 5f       	subi	r20, 0xFE	; 254
    2a16:	5f 4f       	sbci	r21, 0xFF	; 255
    2a18:	84 17       	cp	r24, r20
    2a1a:	95 07       	cpc	r25, r21
    2a1c:	50 f0       	brcs	.+20     	; 0x2a32 <malloc+0x14e>
    2a1e:	42 0f       	add	r20, r18
    2a20:	53 1f       	adc	r21, r19
    2a22:	50 93 30 01 	sts	0x0130, r21
    2a26:	40 93 2f 01 	sts	0x012F, r20
    2a2a:	f9 01       	movw	r30, r18
    2a2c:	61 93       	st	Z+, r22
    2a2e:	71 93       	st	Z+, r23
    2a30:	02 c0       	rjmp	.+4      	; 0x2a36 <malloc+0x152>
    2a32:	e0 e0       	ldi	r30, 0x00	; 0
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	cf 01       	movw	r24, r30
    2a38:	df 91       	pop	r29
    2a3a:	cf 91       	pop	r28
    2a3c:	08 95       	ret

00002a3e <free>:
    2a3e:	cf 93       	push	r28
    2a40:	df 93       	push	r29
    2a42:	00 97       	sbiw	r24, 0x00	; 0
    2a44:	09 f4       	brne	.+2      	; 0x2a48 <free+0xa>
    2a46:	50 c0       	rjmp	.+160    	; 0x2ae8 <free+0xaa>
    2a48:	ec 01       	movw	r28, r24
    2a4a:	22 97       	sbiw	r28, 0x02	; 2
    2a4c:	1b 82       	std	Y+3, r1	; 0x03
    2a4e:	1a 82       	std	Y+2, r1	; 0x02
    2a50:	a0 91 31 01 	lds	r26, 0x0131
    2a54:	b0 91 32 01 	lds	r27, 0x0132
    2a58:	10 97       	sbiw	r26, 0x00	; 0
    2a5a:	09 f1       	breq	.+66     	; 0x2a9e <free+0x60>
    2a5c:	40 e0       	ldi	r20, 0x00	; 0
    2a5e:	50 e0       	ldi	r21, 0x00	; 0
    2a60:	ac 17       	cp	r26, r28
    2a62:	bd 07       	cpc	r27, r29
    2a64:	08 f1       	brcs	.+66     	; 0x2aa8 <free+0x6a>
    2a66:	bb 83       	std	Y+3, r27	; 0x03
    2a68:	aa 83       	std	Y+2, r26	; 0x02
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	21 91       	ld	r18, Z+
    2a6e:	31 91       	ld	r19, Z+
    2a70:	e2 0f       	add	r30, r18
    2a72:	f3 1f       	adc	r31, r19
    2a74:	ae 17       	cp	r26, r30
    2a76:	bf 07       	cpc	r27, r31
    2a78:	79 f4       	brne	.+30     	; 0x2a98 <free+0x5a>
    2a7a:	8d 91       	ld	r24, X+
    2a7c:	9c 91       	ld	r25, X
    2a7e:	11 97       	sbiw	r26, 0x01	; 1
    2a80:	28 0f       	add	r18, r24
    2a82:	39 1f       	adc	r19, r25
    2a84:	2e 5f       	subi	r18, 0xFE	; 254
    2a86:	3f 4f       	sbci	r19, 0xFF	; 255
    2a88:	39 83       	std	Y+1, r19	; 0x01
    2a8a:	28 83       	st	Y, r18
    2a8c:	12 96       	adiw	r26, 0x02	; 2
    2a8e:	8d 91       	ld	r24, X+
    2a90:	9c 91       	ld	r25, X
    2a92:	13 97       	sbiw	r26, 0x03	; 3
    2a94:	9b 83       	std	Y+3, r25	; 0x03
    2a96:	8a 83       	std	Y+2, r24	; 0x02
    2a98:	41 15       	cp	r20, r1
    2a9a:	51 05       	cpc	r21, r1
    2a9c:	71 f4       	brne	.+28     	; 0x2aba <free+0x7c>
    2a9e:	d0 93 32 01 	sts	0x0132, r29
    2aa2:	c0 93 31 01 	sts	0x0131, r28
    2aa6:	20 c0       	rjmp	.+64     	; 0x2ae8 <free+0xaa>
    2aa8:	12 96       	adiw	r26, 0x02	; 2
    2aaa:	8d 91       	ld	r24, X+
    2aac:	9c 91       	ld	r25, X
    2aae:	13 97       	sbiw	r26, 0x03	; 3
    2ab0:	ad 01       	movw	r20, r26
    2ab2:	00 97       	sbiw	r24, 0x00	; 0
    2ab4:	11 f0       	breq	.+4      	; 0x2aba <free+0x7c>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	d3 cf       	rjmp	.-90     	; 0x2a60 <free+0x22>
    2aba:	fa 01       	movw	r30, r20
    2abc:	d3 83       	std	Z+3, r29	; 0x03
    2abe:	c2 83       	std	Z+2, r28	; 0x02
    2ac0:	21 91       	ld	r18, Z+
    2ac2:	31 91       	ld	r19, Z+
    2ac4:	e2 0f       	add	r30, r18
    2ac6:	f3 1f       	adc	r31, r19
    2ac8:	ce 17       	cp	r28, r30
    2aca:	df 07       	cpc	r29, r31
    2acc:	69 f4       	brne	.+26     	; 0x2ae8 <free+0xaa>
    2ace:	88 81       	ld	r24, Y
    2ad0:	99 81       	ldd	r25, Y+1	; 0x01
    2ad2:	28 0f       	add	r18, r24
    2ad4:	39 1f       	adc	r19, r25
    2ad6:	2e 5f       	subi	r18, 0xFE	; 254
    2ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    2ada:	fa 01       	movw	r30, r20
    2adc:	31 83       	std	Z+1, r19	; 0x01
    2ade:	20 83       	st	Z, r18
    2ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ae4:	93 83       	std	Z+3, r25	; 0x03
    2ae6:	82 83       	std	Z+2, r24	; 0x02
    2ae8:	df 91       	pop	r29
    2aea:	cf 91       	pop	r28
    2aec:	08 95       	ret

00002aee <strlen>:
    2aee:	fc 01       	movw	r30, r24
    2af0:	01 90       	ld	r0, Z+
    2af2:	00 20       	and	r0, r0
    2af4:	e9 f7       	brne	.-6      	; 0x2af0 <strlen+0x2>
    2af6:	80 95       	com	r24
    2af8:	90 95       	com	r25
    2afa:	8e 0f       	add	r24, r30
    2afc:	9f 1f       	adc	r25, r31
    2afe:	08 95       	ret

00002b00 <printf>:
    2b00:	a0 e0       	ldi	r26, 0x00	; 0
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	e6 e8       	ldi	r30, 0x86	; 134
    2b06:	f5 e1       	ldi	r31, 0x15	; 21
    2b08:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__prologue_saves__+0x20>
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	35 96       	adiw	r30, 0x05	; 5
    2b10:	61 91       	ld	r22, Z+
    2b12:	71 91       	ld	r23, Z+
    2b14:	80 91 35 01 	lds	r24, 0x0135
    2b18:	90 91 36 01 	lds	r25, 0x0136
    2b1c:	af 01       	movw	r20, r30
    2b1e:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <vfprintf>
    2b22:	20 96       	adiw	r28, 0x00	; 0
    2b24:	e2 e0       	ldi	r30, 0x02	; 2
    2b26:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__epilogue_restores__+0x20>

00002b2a <vfprintf>:
    2b2a:	ab e0       	ldi	r26, 0x0B	; 11
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	eb e9       	ldi	r30, 0x9B	; 155
    2b30:	f5 e1       	ldi	r31, 0x15	; 21
    2b32:	0c 94 3b 14 	jmp	0x2876	; 0x2876 <__prologue_saves__>
    2b36:	3c 01       	movw	r6, r24
    2b38:	2b 01       	movw	r4, r22
    2b3a:	5a 01       	movw	r10, r20
    2b3c:	fc 01       	movw	r30, r24
    2b3e:	17 82       	std	Z+7, r1	; 0x07
    2b40:	16 82       	std	Z+6, r1	; 0x06
    2b42:	83 81       	ldd	r24, Z+3	; 0x03
    2b44:	81 fd       	sbrc	r24, 1
    2b46:	03 c0       	rjmp	.+6      	; 0x2b4e <vfprintf+0x24>
    2b48:	6f ef       	ldi	r22, 0xFF	; 255
    2b4a:	7f ef       	ldi	r23, 0xFF	; 255
    2b4c:	c6 c1       	rjmp	.+908    	; 0x2eda <vfprintf+0x3b0>
    2b4e:	9a e0       	ldi	r25, 0x0A	; 10
    2b50:	89 2e       	mov	r8, r25
    2b52:	1e 01       	movw	r2, r28
    2b54:	08 94       	sec
    2b56:	21 1c       	adc	r2, r1
    2b58:	31 1c       	adc	r3, r1
    2b5a:	f3 01       	movw	r30, r6
    2b5c:	23 81       	ldd	r18, Z+3	; 0x03
    2b5e:	f2 01       	movw	r30, r4
    2b60:	23 fd       	sbrc	r18, 3
    2b62:	85 91       	lpm	r24, Z+
    2b64:	23 ff       	sbrs	r18, 3
    2b66:	81 91       	ld	r24, Z+
    2b68:	2f 01       	movw	r4, r30
    2b6a:	88 23       	and	r24, r24
    2b6c:	09 f4       	brne	.+2      	; 0x2b70 <vfprintf+0x46>
    2b6e:	b2 c1       	rjmp	.+868    	; 0x2ed4 <vfprintf+0x3aa>
    2b70:	85 32       	cpi	r24, 0x25	; 37
    2b72:	39 f4       	brne	.+14     	; 0x2b82 <vfprintf+0x58>
    2b74:	23 fd       	sbrc	r18, 3
    2b76:	85 91       	lpm	r24, Z+
    2b78:	23 ff       	sbrs	r18, 3
    2b7a:	81 91       	ld	r24, Z+
    2b7c:	2f 01       	movw	r4, r30
    2b7e:	85 32       	cpi	r24, 0x25	; 37
    2b80:	29 f4       	brne	.+10     	; 0x2b8c <vfprintf+0x62>
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	b3 01       	movw	r22, r6
    2b86:	0e 94 88 17 	call	0x2f10	; 0x2f10 <fputc>
    2b8a:	e7 cf       	rjmp	.-50     	; 0x2b5a <vfprintf+0x30>
    2b8c:	98 2f       	mov	r25, r24
    2b8e:	ff 24       	eor	r15, r15
    2b90:	ee 24       	eor	r14, r14
    2b92:	99 24       	eor	r9, r9
    2b94:	ff e1       	ldi	r31, 0x1F	; 31
    2b96:	ff 15       	cp	r31, r15
    2b98:	d0 f0       	brcs	.+52     	; 0x2bce <vfprintf+0xa4>
    2b9a:	9b 32       	cpi	r25, 0x2B	; 43
    2b9c:	69 f0       	breq	.+26     	; 0x2bb8 <vfprintf+0x8e>
    2b9e:	9c 32       	cpi	r25, 0x2C	; 44
    2ba0:	28 f4       	brcc	.+10     	; 0x2bac <vfprintf+0x82>
    2ba2:	90 32       	cpi	r25, 0x20	; 32
    2ba4:	59 f0       	breq	.+22     	; 0x2bbc <vfprintf+0x92>
    2ba6:	93 32       	cpi	r25, 0x23	; 35
    2ba8:	91 f4       	brne	.+36     	; 0x2bce <vfprintf+0xa4>
    2baa:	0e c0       	rjmp	.+28     	; 0x2bc8 <vfprintf+0x9e>
    2bac:	9d 32       	cpi	r25, 0x2D	; 45
    2bae:	49 f0       	breq	.+18     	; 0x2bc2 <vfprintf+0x98>
    2bb0:	90 33       	cpi	r25, 0x30	; 48
    2bb2:	69 f4       	brne	.+26     	; 0x2bce <vfprintf+0xa4>
    2bb4:	41 e0       	ldi	r20, 0x01	; 1
    2bb6:	24 c0       	rjmp	.+72     	; 0x2c00 <vfprintf+0xd6>
    2bb8:	52 e0       	ldi	r21, 0x02	; 2
    2bba:	f5 2a       	or	r15, r21
    2bbc:	84 e0       	ldi	r24, 0x04	; 4
    2bbe:	f8 2a       	or	r15, r24
    2bc0:	28 c0       	rjmp	.+80     	; 0x2c12 <vfprintf+0xe8>
    2bc2:	98 e0       	ldi	r25, 0x08	; 8
    2bc4:	f9 2a       	or	r15, r25
    2bc6:	25 c0       	rjmp	.+74     	; 0x2c12 <vfprintf+0xe8>
    2bc8:	e0 e1       	ldi	r30, 0x10	; 16
    2bca:	fe 2a       	or	r15, r30
    2bcc:	22 c0       	rjmp	.+68     	; 0x2c12 <vfprintf+0xe8>
    2bce:	f7 fc       	sbrc	r15, 7
    2bd0:	29 c0       	rjmp	.+82     	; 0x2c24 <vfprintf+0xfa>
    2bd2:	89 2f       	mov	r24, r25
    2bd4:	80 53       	subi	r24, 0x30	; 48
    2bd6:	8a 30       	cpi	r24, 0x0A	; 10
    2bd8:	70 f4       	brcc	.+28     	; 0x2bf6 <vfprintf+0xcc>
    2bda:	f6 fe       	sbrs	r15, 6
    2bdc:	05 c0       	rjmp	.+10     	; 0x2be8 <vfprintf+0xbe>
    2bde:	98 9c       	mul	r9, r8
    2be0:	90 2c       	mov	r9, r0
    2be2:	11 24       	eor	r1, r1
    2be4:	98 0e       	add	r9, r24
    2be6:	15 c0       	rjmp	.+42     	; 0x2c12 <vfprintf+0xe8>
    2be8:	e8 9c       	mul	r14, r8
    2bea:	e0 2c       	mov	r14, r0
    2bec:	11 24       	eor	r1, r1
    2bee:	e8 0e       	add	r14, r24
    2bf0:	f0 e2       	ldi	r31, 0x20	; 32
    2bf2:	ff 2a       	or	r15, r31
    2bf4:	0e c0       	rjmp	.+28     	; 0x2c12 <vfprintf+0xe8>
    2bf6:	9e 32       	cpi	r25, 0x2E	; 46
    2bf8:	29 f4       	brne	.+10     	; 0x2c04 <vfprintf+0xda>
    2bfa:	f6 fc       	sbrc	r15, 6
    2bfc:	6b c1       	rjmp	.+726    	; 0x2ed4 <vfprintf+0x3aa>
    2bfe:	40 e4       	ldi	r20, 0x40	; 64
    2c00:	f4 2a       	or	r15, r20
    2c02:	07 c0       	rjmp	.+14     	; 0x2c12 <vfprintf+0xe8>
    2c04:	9c 36       	cpi	r25, 0x6C	; 108
    2c06:	19 f4       	brne	.+6      	; 0x2c0e <vfprintf+0xe4>
    2c08:	50 e8       	ldi	r21, 0x80	; 128
    2c0a:	f5 2a       	or	r15, r21
    2c0c:	02 c0       	rjmp	.+4      	; 0x2c12 <vfprintf+0xe8>
    2c0e:	98 36       	cpi	r25, 0x68	; 104
    2c10:	49 f4       	brne	.+18     	; 0x2c24 <vfprintf+0xfa>
    2c12:	f2 01       	movw	r30, r4
    2c14:	23 fd       	sbrc	r18, 3
    2c16:	95 91       	lpm	r25, Z+
    2c18:	23 ff       	sbrs	r18, 3
    2c1a:	91 91       	ld	r25, Z+
    2c1c:	2f 01       	movw	r4, r30
    2c1e:	99 23       	and	r25, r25
    2c20:	09 f0       	breq	.+2      	; 0x2c24 <vfprintf+0xfa>
    2c22:	b8 cf       	rjmp	.-144    	; 0x2b94 <vfprintf+0x6a>
    2c24:	89 2f       	mov	r24, r25
    2c26:	85 54       	subi	r24, 0x45	; 69
    2c28:	83 30       	cpi	r24, 0x03	; 3
    2c2a:	18 f0       	brcs	.+6      	; 0x2c32 <vfprintf+0x108>
    2c2c:	80 52       	subi	r24, 0x20	; 32
    2c2e:	83 30       	cpi	r24, 0x03	; 3
    2c30:	38 f4       	brcc	.+14     	; 0x2c40 <vfprintf+0x116>
    2c32:	44 e0       	ldi	r20, 0x04	; 4
    2c34:	50 e0       	ldi	r21, 0x00	; 0
    2c36:	a4 0e       	add	r10, r20
    2c38:	b5 1e       	adc	r11, r21
    2c3a:	5f e3       	ldi	r21, 0x3F	; 63
    2c3c:	59 83       	std	Y+1, r21	; 0x01
    2c3e:	0f c0       	rjmp	.+30     	; 0x2c5e <vfprintf+0x134>
    2c40:	93 36       	cpi	r25, 0x63	; 99
    2c42:	31 f0       	breq	.+12     	; 0x2c50 <vfprintf+0x126>
    2c44:	93 37       	cpi	r25, 0x73	; 115
    2c46:	79 f0       	breq	.+30     	; 0x2c66 <vfprintf+0x13c>
    2c48:	93 35       	cpi	r25, 0x53	; 83
    2c4a:	09 f0       	breq	.+2      	; 0x2c4e <vfprintf+0x124>
    2c4c:	56 c0       	rjmp	.+172    	; 0x2cfa <vfprintf+0x1d0>
    2c4e:	20 c0       	rjmp	.+64     	; 0x2c90 <vfprintf+0x166>
    2c50:	f5 01       	movw	r30, r10
    2c52:	80 81       	ld	r24, Z
    2c54:	89 83       	std	Y+1, r24	; 0x01
    2c56:	42 e0       	ldi	r20, 0x02	; 2
    2c58:	50 e0       	ldi	r21, 0x00	; 0
    2c5a:	a4 0e       	add	r10, r20
    2c5c:	b5 1e       	adc	r11, r21
    2c5e:	61 01       	movw	r12, r2
    2c60:	01 e0       	ldi	r16, 0x01	; 1
    2c62:	10 e0       	ldi	r17, 0x00	; 0
    2c64:	12 c0       	rjmp	.+36     	; 0x2c8a <vfprintf+0x160>
    2c66:	f5 01       	movw	r30, r10
    2c68:	c0 80       	ld	r12, Z
    2c6a:	d1 80       	ldd	r13, Z+1	; 0x01
    2c6c:	f6 fc       	sbrc	r15, 6
    2c6e:	03 c0       	rjmp	.+6      	; 0x2c76 <vfprintf+0x14c>
    2c70:	6f ef       	ldi	r22, 0xFF	; 255
    2c72:	7f ef       	ldi	r23, 0xFF	; 255
    2c74:	02 c0       	rjmp	.+4      	; 0x2c7a <vfprintf+0x150>
    2c76:	69 2d       	mov	r22, r9
    2c78:	70 e0       	ldi	r23, 0x00	; 0
    2c7a:	42 e0       	ldi	r20, 0x02	; 2
    2c7c:	50 e0       	ldi	r21, 0x00	; 0
    2c7e:	a4 0e       	add	r10, r20
    2c80:	b5 1e       	adc	r11, r21
    2c82:	c6 01       	movw	r24, r12
    2c84:	0e 94 7d 17 	call	0x2efa	; 0x2efa <strnlen>
    2c88:	8c 01       	movw	r16, r24
    2c8a:	5f e7       	ldi	r21, 0x7F	; 127
    2c8c:	f5 22       	and	r15, r21
    2c8e:	14 c0       	rjmp	.+40     	; 0x2cb8 <vfprintf+0x18e>
    2c90:	f5 01       	movw	r30, r10
    2c92:	c0 80       	ld	r12, Z
    2c94:	d1 80       	ldd	r13, Z+1	; 0x01
    2c96:	f6 fc       	sbrc	r15, 6
    2c98:	03 c0       	rjmp	.+6      	; 0x2ca0 <vfprintf+0x176>
    2c9a:	6f ef       	ldi	r22, 0xFF	; 255
    2c9c:	7f ef       	ldi	r23, 0xFF	; 255
    2c9e:	02 c0       	rjmp	.+4      	; 0x2ca4 <vfprintf+0x17a>
    2ca0:	69 2d       	mov	r22, r9
    2ca2:	70 e0       	ldi	r23, 0x00	; 0
    2ca4:	42 e0       	ldi	r20, 0x02	; 2
    2ca6:	50 e0       	ldi	r21, 0x00	; 0
    2ca8:	a4 0e       	add	r10, r20
    2caa:	b5 1e       	adc	r11, r21
    2cac:	c6 01       	movw	r24, r12
    2cae:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <strnlen_P>
    2cb2:	8c 01       	movw	r16, r24
    2cb4:	50 e8       	ldi	r21, 0x80	; 128
    2cb6:	f5 2a       	or	r15, r21
    2cb8:	f3 fe       	sbrs	r15, 3
    2cba:	07 c0       	rjmp	.+14     	; 0x2cca <vfprintf+0x1a0>
    2cbc:	1a c0       	rjmp	.+52     	; 0x2cf2 <vfprintf+0x1c8>
    2cbe:	80 e2       	ldi	r24, 0x20	; 32
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	b3 01       	movw	r22, r6
    2cc4:	0e 94 88 17 	call	0x2f10	; 0x2f10 <fputc>
    2cc8:	ea 94       	dec	r14
    2cca:	8e 2d       	mov	r24, r14
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	08 17       	cp	r16, r24
    2cd0:	19 07       	cpc	r17, r25
    2cd2:	a8 f3       	brcs	.-22     	; 0x2cbe <vfprintf+0x194>
    2cd4:	0e c0       	rjmp	.+28     	; 0x2cf2 <vfprintf+0x1c8>
    2cd6:	f6 01       	movw	r30, r12
    2cd8:	f7 fc       	sbrc	r15, 7
    2cda:	85 91       	lpm	r24, Z+
    2cdc:	f7 fe       	sbrs	r15, 7
    2cde:	81 91       	ld	r24, Z+
    2ce0:	6f 01       	movw	r12, r30
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	b3 01       	movw	r22, r6
    2ce6:	0e 94 88 17 	call	0x2f10	; 0x2f10 <fputc>
    2cea:	e1 10       	cpse	r14, r1
    2cec:	ea 94       	dec	r14
    2cee:	01 50       	subi	r16, 0x01	; 1
    2cf0:	10 40       	sbci	r17, 0x00	; 0
    2cf2:	01 15       	cp	r16, r1
    2cf4:	11 05       	cpc	r17, r1
    2cf6:	79 f7       	brne	.-34     	; 0x2cd6 <vfprintf+0x1ac>
    2cf8:	ea c0       	rjmp	.+468    	; 0x2ece <vfprintf+0x3a4>
    2cfa:	94 36       	cpi	r25, 0x64	; 100
    2cfc:	11 f0       	breq	.+4      	; 0x2d02 <vfprintf+0x1d8>
    2cfe:	99 36       	cpi	r25, 0x69	; 105
    2d00:	69 f5       	brne	.+90     	; 0x2d5c <vfprintf+0x232>
    2d02:	f7 fe       	sbrs	r15, 7
    2d04:	08 c0       	rjmp	.+16     	; 0x2d16 <vfprintf+0x1ec>
    2d06:	f5 01       	movw	r30, r10
    2d08:	20 81       	ld	r18, Z
    2d0a:	31 81       	ldd	r19, Z+1	; 0x01
    2d0c:	42 81       	ldd	r20, Z+2	; 0x02
    2d0e:	53 81       	ldd	r21, Z+3	; 0x03
    2d10:	84 e0       	ldi	r24, 0x04	; 4
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	0a c0       	rjmp	.+20     	; 0x2d2a <vfprintf+0x200>
    2d16:	f5 01       	movw	r30, r10
    2d18:	80 81       	ld	r24, Z
    2d1a:	91 81       	ldd	r25, Z+1	; 0x01
    2d1c:	9c 01       	movw	r18, r24
    2d1e:	44 27       	eor	r20, r20
    2d20:	37 fd       	sbrc	r19, 7
    2d22:	40 95       	com	r20
    2d24:	54 2f       	mov	r21, r20
    2d26:	82 e0       	ldi	r24, 0x02	; 2
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	a8 0e       	add	r10, r24
    2d2c:	b9 1e       	adc	r11, r25
    2d2e:	9f e6       	ldi	r25, 0x6F	; 111
    2d30:	f9 22       	and	r15, r25
    2d32:	57 ff       	sbrs	r21, 7
    2d34:	09 c0       	rjmp	.+18     	; 0x2d48 <vfprintf+0x21e>
    2d36:	50 95       	com	r21
    2d38:	40 95       	com	r20
    2d3a:	30 95       	com	r19
    2d3c:	21 95       	neg	r18
    2d3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d40:	4f 4f       	sbci	r20, 0xFF	; 255
    2d42:	5f 4f       	sbci	r21, 0xFF	; 255
    2d44:	e0 e8       	ldi	r30, 0x80	; 128
    2d46:	fe 2a       	or	r15, r30
    2d48:	ca 01       	movw	r24, r20
    2d4a:	b9 01       	movw	r22, r18
    2d4c:	a1 01       	movw	r20, r2
    2d4e:	2a e0       	ldi	r18, 0x0A	; 10
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <__ultoa_invert>
    2d56:	d8 2e       	mov	r13, r24
    2d58:	d2 18       	sub	r13, r2
    2d5a:	40 c0       	rjmp	.+128    	; 0x2ddc <vfprintf+0x2b2>
    2d5c:	95 37       	cpi	r25, 0x75	; 117
    2d5e:	29 f4       	brne	.+10     	; 0x2d6a <vfprintf+0x240>
    2d60:	1f 2d       	mov	r17, r15
    2d62:	1f 7e       	andi	r17, 0xEF	; 239
    2d64:	2a e0       	ldi	r18, 0x0A	; 10
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	1d c0       	rjmp	.+58     	; 0x2da4 <vfprintf+0x27a>
    2d6a:	1f 2d       	mov	r17, r15
    2d6c:	19 7f       	andi	r17, 0xF9	; 249
    2d6e:	9f 36       	cpi	r25, 0x6F	; 111
    2d70:	61 f0       	breq	.+24     	; 0x2d8a <vfprintf+0x260>
    2d72:	90 37       	cpi	r25, 0x70	; 112
    2d74:	20 f4       	brcc	.+8      	; 0x2d7e <vfprintf+0x254>
    2d76:	98 35       	cpi	r25, 0x58	; 88
    2d78:	09 f0       	breq	.+2      	; 0x2d7c <vfprintf+0x252>
    2d7a:	ac c0       	rjmp	.+344    	; 0x2ed4 <vfprintf+0x3aa>
    2d7c:	0f c0       	rjmp	.+30     	; 0x2d9c <vfprintf+0x272>
    2d7e:	90 37       	cpi	r25, 0x70	; 112
    2d80:	39 f0       	breq	.+14     	; 0x2d90 <vfprintf+0x266>
    2d82:	98 37       	cpi	r25, 0x78	; 120
    2d84:	09 f0       	breq	.+2      	; 0x2d88 <vfprintf+0x25e>
    2d86:	a6 c0       	rjmp	.+332    	; 0x2ed4 <vfprintf+0x3aa>
    2d88:	04 c0       	rjmp	.+8      	; 0x2d92 <vfprintf+0x268>
    2d8a:	28 e0       	ldi	r18, 0x08	; 8
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	0a c0       	rjmp	.+20     	; 0x2da4 <vfprintf+0x27a>
    2d90:	10 61       	ori	r17, 0x10	; 16
    2d92:	14 fd       	sbrc	r17, 4
    2d94:	14 60       	ori	r17, 0x04	; 4
    2d96:	20 e1       	ldi	r18, 0x10	; 16
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	04 c0       	rjmp	.+8      	; 0x2da4 <vfprintf+0x27a>
    2d9c:	14 fd       	sbrc	r17, 4
    2d9e:	16 60       	ori	r17, 0x06	; 6
    2da0:	20 e1       	ldi	r18, 0x10	; 16
    2da2:	32 e0       	ldi	r19, 0x02	; 2
    2da4:	17 ff       	sbrs	r17, 7
    2da6:	08 c0       	rjmp	.+16     	; 0x2db8 <vfprintf+0x28e>
    2da8:	f5 01       	movw	r30, r10
    2daa:	60 81       	ld	r22, Z
    2dac:	71 81       	ldd	r23, Z+1	; 0x01
    2dae:	82 81       	ldd	r24, Z+2	; 0x02
    2db0:	93 81       	ldd	r25, Z+3	; 0x03
    2db2:	44 e0       	ldi	r20, 0x04	; 4
    2db4:	50 e0       	ldi	r21, 0x00	; 0
    2db6:	08 c0       	rjmp	.+16     	; 0x2dc8 <vfprintf+0x29e>
    2db8:	f5 01       	movw	r30, r10
    2dba:	80 81       	ld	r24, Z
    2dbc:	91 81       	ldd	r25, Z+1	; 0x01
    2dbe:	bc 01       	movw	r22, r24
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	42 e0       	ldi	r20, 0x02	; 2
    2dc6:	50 e0       	ldi	r21, 0x00	; 0
    2dc8:	a4 0e       	add	r10, r20
    2dca:	b5 1e       	adc	r11, r21
    2dcc:	a1 01       	movw	r20, r2
    2dce:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <__ultoa_invert>
    2dd2:	d8 2e       	mov	r13, r24
    2dd4:	d2 18       	sub	r13, r2
    2dd6:	8f e7       	ldi	r24, 0x7F	; 127
    2dd8:	f8 2e       	mov	r15, r24
    2dda:	f1 22       	and	r15, r17
    2ddc:	f6 fe       	sbrs	r15, 6
    2dde:	0b c0       	rjmp	.+22     	; 0x2df6 <vfprintf+0x2cc>
    2de0:	5e ef       	ldi	r21, 0xFE	; 254
    2de2:	f5 22       	and	r15, r21
    2de4:	d9 14       	cp	r13, r9
    2de6:	38 f4       	brcc	.+14     	; 0x2df6 <vfprintf+0x2cc>
    2de8:	f4 fe       	sbrs	r15, 4
    2dea:	07 c0       	rjmp	.+14     	; 0x2dfa <vfprintf+0x2d0>
    2dec:	f2 fc       	sbrc	r15, 2
    2dee:	05 c0       	rjmp	.+10     	; 0x2dfa <vfprintf+0x2d0>
    2df0:	8f ee       	ldi	r24, 0xEF	; 239
    2df2:	f8 22       	and	r15, r24
    2df4:	02 c0       	rjmp	.+4      	; 0x2dfa <vfprintf+0x2d0>
    2df6:	1d 2d       	mov	r17, r13
    2df8:	01 c0       	rjmp	.+2      	; 0x2dfc <vfprintf+0x2d2>
    2dfa:	19 2d       	mov	r17, r9
    2dfc:	f4 fe       	sbrs	r15, 4
    2dfe:	0d c0       	rjmp	.+26     	; 0x2e1a <vfprintf+0x2f0>
    2e00:	fe 01       	movw	r30, r28
    2e02:	ed 0d       	add	r30, r13
    2e04:	f1 1d       	adc	r31, r1
    2e06:	80 81       	ld	r24, Z
    2e08:	80 33       	cpi	r24, 0x30	; 48
    2e0a:	19 f4       	brne	.+6      	; 0x2e12 <vfprintf+0x2e8>
    2e0c:	99 ee       	ldi	r25, 0xE9	; 233
    2e0e:	f9 22       	and	r15, r25
    2e10:	08 c0       	rjmp	.+16     	; 0x2e22 <vfprintf+0x2f8>
    2e12:	1f 5f       	subi	r17, 0xFF	; 255
    2e14:	f2 fe       	sbrs	r15, 2
    2e16:	05 c0       	rjmp	.+10     	; 0x2e22 <vfprintf+0x2f8>
    2e18:	03 c0       	rjmp	.+6      	; 0x2e20 <vfprintf+0x2f6>
    2e1a:	8f 2d       	mov	r24, r15
    2e1c:	86 78       	andi	r24, 0x86	; 134
    2e1e:	09 f0       	breq	.+2      	; 0x2e22 <vfprintf+0x2f8>
    2e20:	1f 5f       	subi	r17, 0xFF	; 255
    2e22:	0f 2d       	mov	r16, r15
    2e24:	f3 fc       	sbrc	r15, 3
    2e26:	14 c0       	rjmp	.+40     	; 0x2e50 <vfprintf+0x326>
    2e28:	f0 fe       	sbrs	r15, 0
    2e2a:	0f c0       	rjmp	.+30     	; 0x2e4a <vfprintf+0x320>
    2e2c:	1e 15       	cp	r17, r14
    2e2e:	10 f0       	brcs	.+4      	; 0x2e34 <vfprintf+0x30a>
    2e30:	9d 2c       	mov	r9, r13
    2e32:	0b c0       	rjmp	.+22     	; 0x2e4a <vfprintf+0x320>
    2e34:	9d 2c       	mov	r9, r13
    2e36:	9e 0c       	add	r9, r14
    2e38:	91 1a       	sub	r9, r17
    2e3a:	1e 2d       	mov	r17, r14
    2e3c:	06 c0       	rjmp	.+12     	; 0x2e4a <vfprintf+0x320>
    2e3e:	80 e2       	ldi	r24, 0x20	; 32
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	b3 01       	movw	r22, r6
    2e44:	0e 94 88 17 	call	0x2f10	; 0x2f10 <fputc>
    2e48:	1f 5f       	subi	r17, 0xFF	; 255
    2e4a:	1e 15       	cp	r17, r14
    2e4c:	c0 f3       	brcs	.-16     	; 0x2e3e <vfprintf+0x314>
    2e4e:	04 c0       	rjmp	.+8      	; 0x2e58 <vfprintf+0x32e>
    2e50:	1e 15       	cp	r17, r14
    2e52:	10 f4       	brcc	.+4      	; 0x2e58 <vfprintf+0x32e>
    2e54:	e1 1a       	sub	r14, r17
    2e56:	01 c0       	rjmp	.+2      	; 0x2e5a <vfprintf+0x330>
    2e58:	ee 24       	eor	r14, r14
    2e5a:	04 ff       	sbrs	r16, 4
    2e5c:	0f c0       	rjmp	.+30     	; 0x2e7c <vfprintf+0x352>
    2e5e:	80 e3       	ldi	r24, 0x30	; 48
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	b3 01       	movw	r22, r6
    2e64:	0e 94 88 17 	call	0x2f10	; 0x2f10 <fputc>
    2e68:	02 ff       	sbrs	r16, 2
    2e6a:	1d c0       	rjmp	.+58     	; 0x2ea6 <vfprintf+0x37c>
    2e6c:	01 fd       	sbrc	r16, 1
    2e6e:	03 c0       	rjmp	.+6      	; 0x2e76 <vfprintf+0x34c>
    2e70:	88 e7       	ldi	r24, 0x78	; 120
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	0e c0       	rjmp	.+28     	; 0x2e92 <vfprintf+0x368>
    2e76:	88 e5       	ldi	r24, 0x58	; 88
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	0b c0       	rjmp	.+22     	; 0x2e92 <vfprintf+0x368>
    2e7c:	80 2f       	mov	r24, r16
    2e7e:	86 78       	andi	r24, 0x86	; 134
    2e80:	91 f0       	breq	.+36     	; 0x2ea6 <vfprintf+0x37c>
    2e82:	01 ff       	sbrs	r16, 1
    2e84:	02 c0       	rjmp	.+4      	; 0x2e8a <vfprintf+0x360>
    2e86:	8b e2       	ldi	r24, 0x2B	; 43
    2e88:	01 c0       	rjmp	.+2      	; 0x2e8c <vfprintf+0x362>
    2e8a:	80 e2       	ldi	r24, 0x20	; 32
    2e8c:	f7 fc       	sbrc	r15, 7
    2e8e:	8d e2       	ldi	r24, 0x2D	; 45
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	b3 01       	movw	r22, r6
    2e94:	0e 94 88 17 	call	0x2f10	; 0x2f10 <fputc>
    2e98:	06 c0       	rjmp	.+12     	; 0x2ea6 <vfprintf+0x37c>
    2e9a:	80 e3       	ldi	r24, 0x30	; 48
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	b3 01       	movw	r22, r6
    2ea0:	0e 94 88 17 	call	0x2f10	; 0x2f10 <fputc>
    2ea4:	9a 94       	dec	r9
    2ea6:	d9 14       	cp	r13, r9
    2ea8:	c0 f3       	brcs	.-16     	; 0x2e9a <vfprintf+0x370>
    2eaa:	da 94       	dec	r13
    2eac:	f1 01       	movw	r30, r2
    2eae:	ed 0d       	add	r30, r13
    2eb0:	f1 1d       	adc	r31, r1
    2eb2:	80 81       	ld	r24, Z
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	b3 01       	movw	r22, r6
    2eb8:	0e 94 88 17 	call	0x2f10	; 0x2f10 <fputc>
    2ebc:	dd 20       	and	r13, r13
    2ebe:	a9 f7       	brne	.-22     	; 0x2eaa <vfprintf+0x380>
    2ec0:	06 c0       	rjmp	.+12     	; 0x2ece <vfprintf+0x3a4>
    2ec2:	80 e2       	ldi	r24, 0x20	; 32
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	b3 01       	movw	r22, r6
    2ec8:	0e 94 88 17 	call	0x2f10	; 0x2f10 <fputc>
    2ecc:	ea 94       	dec	r14
    2ece:	ee 20       	and	r14, r14
    2ed0:	c1 f7       	brne	.-16     	; 0x2ec2 <vfprintf+0x398>
    2ed2:	43 ce       	rjmp	.-890    	; 0x2b5a <vfprintf+0x30>
    2ed4:	f3 01       	movw	r30, r6
    2ed6:	66 81       	ldd	r22, Z+6	; 0x06
    2ed8:	77 81       	ldd	r23, Z+7	; 0x07
    2eda:	cb 01       	movw	r24, r22
    2edc:	2b 96       	adiw	r28, 0x0b	; 11
    2ede:	e2 e1       	ldi	r30, 0x12	; 18
    2ee0:	0c 94 57 14 	jmp	0x28ae	; 0x28ae <__epilogue_restores__>

00002ee4 <strnlen_P>:
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	05 90       	lpm	r0, Z+
    2ee8:	61 50       	subi	r22, 0x01	; 1
    2eea:	70 40       	sbci	r23, 0x00	; 0
    2eec:	01 10       	cpse	r0, r1
    2eee:	d8 f7       	brcc	.-10     	; 0x2ee6 <strnlen_P+0x2>
    2ef0:	80 95       	com	r24
    2ef2:	90 95       	com	r25
    2ef4:	8e 0f       	add	r24, r30
    2ef6:	9f 1f       	adc	r25, r31
    2ef8:	08 95       	ret

00002efa <strnlen>:
    2efa:	fc 01       	movw	r30, r24
    2efc:	61 50       	subi	r22, 0x01	; 1
    2efe:	70 40       	sbci	r23, 0x00	; 0
    2f00:	01 90       	ld	r0, Z+
    2f02:	01 10       	cpse	r0, r1
    2f04:	d8 f7       	brcc	.-10     	; 0x2efc <strnlen+0x2>
    2f06:	80 95       	com	r24
    2f08:	90 95       	com	r25
    2f0a:	8e 0f       	add	r24, r30
    2f0c:	9f 1f       	adc	r25, r31
    2f0e:	08 95       	ret

00002f10 <fputc>:
    2f10:	0f 93       	push	r16
    2f12:	1f 93       	push	r17
    2f14:	cf 93       	push	r28
    2f16:	df 93       	push	r29
    2f18:	8c 01       	movw	r16, r24
    2f1a:	eb 01       	movw	r28, r22
    2f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1e:	81 ff       	sbrs	r24, 1
    2f20:	1b c0       	rjmp	.+54     	; 0x2f58 <fputc+0x48>
    2f22:	82 ff       	sbrs	r24, 2
    2f24:	0d c0       	rjmp	.+26     	; 0x2f40 <fputc+0x30>
    2f26:	2e 81       	ldd	r18, Y+6	; 0x06
    2f28:	3f 81       	ldd	r19, Y+7	; 0x07
    2f2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f2c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f2e:	28 17       	cp	r18, r24
    2f30:	39 07       	cpc	r19, r25
    2f32:	64 f4       	brge	.+24     	; 0x2f4c <fputc+0x3c>
    2f34:	e8 81       	ld	r30, Y
    2f36:	f9 81       	ldd	r31, Y+1	; 0x01
    2f38:	01 93       	st	Z+, r16
    2f3a:	f9 83       	std	Y+1, r31	; 0x01
    2f3c:	e8 83       	st	Y, r30
    2f3e:	06 c0       	rjmp	.+12     	; 0x2f4c <fputc+0x3c>
    2f40:	e8 85       	ldd	r30, Y+8	; 0x08
    2f42:	f9 85       	ldd	r31, Y+9	; 0x09
    2f44:	80 2f       	mov	r24, r16
    2f46:	09 95       	icall
    2f48:	89 2b       	or	r24, r25
    2f4a:	31 f4       	brne	.+12     	; 0x2f58 <fputc+0x48>
    2f4c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f4e:	9f 81       	ldd	r25, Y+7	; 0x07
    2f50:	01 96       	adiw	r24, 0x01	; 1
    2f52:	9f 83       	std	Y+7, r25	; 0x07
    2f54:	8e 83       	std	Y+6, r24	; 0x06
    2f56:	02 c0       	rjmp	.+4      	; 0x2f5c <fputc+0x4c>
    2f58:	0f ef       	ldi	r16, 0xFF	; 255
    2f5a:	1f ef       	ldi	r17, 0xFF	; 255
    2f5c:	c8 01       	movw	r24, r16
    2f5e:	df 91       	pop	r29
    2f60:	cf 91       	pop	r28
    2f62:	1f 91       	pop	r17
    2f64:	0f 91       	pop	r16
    2f66:	08 95       	ret

00002f68 <__ultoa_invert>:
    2f68:	fa 01       	movw	r30, r20
    2f6a:	aa 27       	eor	r26, r26
    2f6c:	28 30       	cpi	r18, 0x08	; 8
    2f6e:	51 f1       	breq	.+84     	; 0x2fc4 <__ultoa_invert+0x5c>
    2f70:	20 31       	cpi	r18, 0x10	; 16
    2f72:	81 f1       	breq	.+96     	; 0x2fd4 <__ultoa_invert+0x6c>
    2f74:	e8 94       	clt
    2f76:	6f 93       	push	r22
    2f78:	6e 7f       	andi	r22, 0xFE	; 254
    2f7a:	6e 5f       	subi	r22, 0xFE	; 254
    2f7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f7e:	8f 4f       	sbci	r24, 0xFF	; 255
    2f80:	9f 4f       	sbci	r25, 0xFF	; 255
    2f82:	af 4f       	sbci	r26, 0xFF	; 255
    2f84:	b1 e0       	ldi	r27, 0x01	; 1
    2f86:	3e d0       	rcall	.+124    	; 0x3004 <__ultoa_invert+0x9c>
    2f88:	b4 e0       	ldi	r27, 0x04	; 4
    2f8a:	3c d0       	rcall	.+120    	; 0x3004 <__ultoa_invert+0x9c>
    2f8c:	67 0f       	add	r22, r23
    2f8e:	78 1f       	adc	r23, r24
    2f90:	89 1f       	adc	r24, r25
    2f92:	9a 1f       	adc	r25, r26
    2f94:	a1 1d       	adc	r26, r1
    2f96:	68 0f       	add	r22, r24
    2f98:	79 1f       	adc	r23, r25
    2f9a:	8a 1f       	adc	r24, r26
    2f9c:	91 1d       	adc	r25, r1
    2f9e:	a1 1d       	adc	r26, r1
    2fa0:	6a 0f       	add	r22, r26
    2fa2:	71 1d       	adc	r23, r1
    2fa4:	81 1d       	adc	r24, r1
    2fa6:	91 1d       	adc	r25, r1
    2fa8:	a1 1d       	adc	r26, r1
    2faa:	20 d0       	rcall	.+64     	; 0x2fec <__ultoa_invert+0x84>
    2fac:	09 f4       	brne	.+2      	; 0x2fb0 <__ultoa_invert+0x48>
    2fae:	68 94       	set
    2fb0:	3f 91       	pop	r19
    2fb2:	2a e0       	ldi	r18, 0x0A	; 10
    2fb4:	26 9f       	mul	r18, r22
    2fb6:	11 24       	eor	r1, r1
    2fb8:	30 19       	sub	r19, r0
    2fba:	30 5d       	subi	r19, 0xD0	; 208
    2fbc:	31 93       	st	Z+, r19
    2fbe:	de f6       	brtc	.-74     	; 0x2f76 <__ultoa_invert+0xe>
    2fc0:	cf 01       	movw	r24, r30
    2fc2:	08 95       	ret
    2fc4:	46 2f       	mov	r20, r22
    2fc6:	47 70       	andi	r20, 0x07	; 7
    2fc8:	40 5d       	subi	r20, 0xD0	; 208
    2fca:	41 93       	st	Z+, r20
    2fcc:	b3 e0       	ldi	r27, 0x03	; 3
    2fce:	0f d0       	rcall	.+30     	; 0x2fee <__ultoa_invert+0x86>
    2fd0:	c9 f7       	brne	.-14     	; 0x2fc4 <__ultoa_invert+0x5c>
    2fd2:	f6 cf       	rjmp	.-20     	; 0x2fc0 <__ultoa_invert+0x58>
    2fd4:	46 2f       	mov	r20, r22
    2fd6:	4f 70       	andi	r20, 0x0F	; 15
    2fd8:	40 5d       	subi	r20, 0xD0	; 208
    2fda:	4a 33       	cpi	r20, 0x3A	; 58
    2fdc:	18 f0       	brcs	.+6      	; 0x2fe4 <__ultoa_invert+0x7c>
    2fde:	49 5d       	subi	r20, 0xD9	; 217
    2fe0:	31 fd       	sbrc	r19, 1
    2fe2:	40 52       	subi	r20, 0x20	; 32
    2fe4:	41 93       	st	Z+, r20
    2fe6:	02 d0       	rcall	.+4      	; 0x2fec <__ultoa_invert+0x84>
    2fe8:	a9 f7       	brne	.-22     	; 0x2fd4 <__ultoa_invert+0x6c>
    2fea:	ea cf       	rjmp	.-44     	; 0x2fc0 <__ultoa_invert+0x58>
    2fec:	b4 e0       	ldi	r27, 0x04	; 4
    2fee:	a6 95       	lsr	r26
    2ff0:	97 95       	ror	r25
    2ff2:	87 95       	ror	r24
    2ff4:	77 95       	ror	r23
    2ff6:	67 95       	ror	r22
    2ff8:	ba 95       	dec	r27
    2ffa:	c9 f7       	brne	.-14     	; 0x2fee <__ultoa_invert+0x86>
    2ffc:	00 97       	sbiw	r24, 0x00	; 0
    2ffe:	61 05       	cpc	r22, r1
    3000:	71 05       	cpc	r23, r1
    3002:	08 95       	ret
    3004:	9b 01       	movw	r18, r22
    3006:	ac 01       	movw	r20, r24
    3008:	0a 2e       	mov	r0, r26
    300a:	06 94       	lsr	r0
    300c:	57 95       	ror	r21
    300e:	47 95       	ror	r20
    3010:	37 95       	ror	r19
    3012:	27 95       	ror	r18
    3014:	ba 95       	dec	r27
    3016:	c9 f7       	brne	.-14     	; 0x300a <__ultoa_invert+0xa2>
    3018:	62 0f       	add	r22, r18
    301a:	73 1f       	adc	r23, r19
    301c:	84 1f       	adc	r24, r20
    301e:	95 1f       	adc	r25, r21
    3020:	a0 1d       	adc	r26, r0
    3022:	08 95       	ret

00003024 <_exit>:
    3024:	f8 94       	cli

00003026 <__stop_program>:
    3026:	ff cf       	rjmp	.-2      	; 0x3026 <__stop_program>
